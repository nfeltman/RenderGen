datatype binop  = Plus | Minus in
datatype iota	= Arg
				| Int of int 
				| Binop of binop * iota * iota
				| If of iota * iota * iota
in 
letfun evalBinop ((op, i1, i2) : binop * $int * $int) = 
	case unroll op of
	  plus => next{prev{i1} + prev{i2}}
	| minus => next{prev{i1} - prev{i2}}
in
letrec evalDir ((e,a) : iota * $int) : $int = 
	case unroll e of
	  arg => a
	| i => hold i
	| (op, e1, e2) => evalBinop(op, evalDir (e1,a), evalDir (e2,a))
	| (e1, e2, e3) => 
		next {
			if prev{evalDir (e1,a)} > 0 then 
				prev{evalDir (e2,a)}
			else 
				prev{evalDir (e3,a)}
		}
in
5