let datatype ^list = Empty | Cons of int * list in
let datatype listU = EmptyU | ConsU of ^int * ^list in
let fun unwrap (mono{l} : ^list) =
	case pushS mono{unroll l} of 
	  _ => EmptyU 
	| mono{(h,t)} => ConsU (mono{h}, mono{t})
in
let fun partition ((mono{p}, mono{l}) : ^int*^list) =
	let val mono {part} = 
	mono{
		let rec partition ((p,l) : int*list) : (int*list*list) = 
			case unroll l of _ => (0,Empty, Empty) | (h,t) => 
				let val (s,left,right) = partition (p,t) in 
				if h<p then (s+1,Cons(h,left),right) else (s,left,Cons(h,right))
		in 
		partition
	} in
	let val mono{(n,left,right)} = mono{part (p,l)} in
	(mono{n},mono{left},mono{right})
in
let rec qs ((l,next{i}) : ^list * $int) : $int = 
	case unroll (unwrap l) of 
	  _ => next {0} 
	| (h,t) => 
		let val (n,left,right) = partition (h,t) in 
		let val next{n} = hold n in 
		next { 
			if i < n then prev{qs (left,next{i})}
			else if i == n then prev{hold h}
			else prev{qs (right,next{(i-n)-1})}
		}
in 
let val testlist = 
	mono{let val c = Cons in c(8,c(2,c(3,c(7,c(4,c(5,Empty))))))}
in qs (testlist, next{2})