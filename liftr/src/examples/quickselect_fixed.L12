datatype ^list = Empty | Cons of int * list in
let mono {partition} =
mono{
	letrec partition ((p,l) : int*list) : (int*list*list) = 
		case unroll l of _ => (0,Empty, Empty) | (h,t) => 
			let (s,left,right) = partition (p,t) in 
			if h<p then (s+1,Cons(h,left),right) else (s,left,Cons(h,right))
	in partition
} in
letrec qs ((mono {l},next{i}) : ^list * $int) : $int = 
	case pushS mono{unroll l} of 
	  _ => next {0} 
	| mono{ht} => let (n,left,right) = pushP (mono {partition ht}) in 
		next { 
			let n = prev {hold (push n)} in 
			if i < n then prev{qs (left,next{i})}
			else if i == n then prev{hold (push (mono{#1 ht}))}
			else prev{qs (right,next{(i-n)-1})}
		}
in 
let testlist = 
	mono{let c = Cons in c(8,c(2,c(3,c(7,c(4,c(5,Empty))))))}
in qs (testlist, next{2})