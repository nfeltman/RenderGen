datatype binop  = Plus | Minus in
datatype iota	= Arg
				| Int of int 
				| Binop of binop * iota * iota
				| If of iota * iota * iota
in 

%% binary op evaluators

letfun evalBinop ((op, i1, i2) : binop * int * int) = 
	case unroll op of
	  plus => i1 + i2
	| minus => i1 - i2
in
letfun evalBinop2 ((op, i1, i2) : binop * $int * $int) = 
	case unroll op of
	  plus => next{prev{i1} + prev{i2}}
	| minus => next{prev{i1} - prev{i2}}
in

%% 1 = arg comes at stage 1
%% 2 = arg comes at stage 2
%% K = continuation passing style

letrec eval1 ((e,a) : iota * int) : int = 
	case unroll e of
	  arg => a
	| i => i
	| (op, e1, e2) => evalBinop(op, eval1 (e1,a), eval1 (e2,a))
	| (e1, e2, e3) => if eval1 (e1,a) > 0 then eval1 (e2,a) else eval1 (e3,a)
in
letrec eval1K ((e,a,k) : iota * int * (int -> int)) : int = 
	case unroll e of
	  arg => k a
	| i => k i
	| (op, e1, e2) => eval1K (e1,a, fn i:int => eval1K (e2,a, fn j:int => k (evalBinop(op,i,j)))) 
	| (e1, e2, e3) => eval1K (e1,a, fn i:int => if i > 0 then eval1K (e2,a,k) else eval1K (e3,a,k)) 
in
letrec eval2 ((e,a) : iota * $int) : $int = 
	case unroll e of
	  arg => a
	| i => hold i
	| (op, e1, e2) => evalBinop2 (op, eval2 (e1,a), eval2 (e2,a))
	| (e1, e2, e3) => 
		next {
			if prev{eval2 (e1,a)} > 0 then 
				prev{eval2 (e2,a)}
			else 
				prev{eval2 (e3,a)}
		}
in
letrec eval2K ((e,a,k) : iota * $int * ($int -> $int)) : $int = 
	case unroll e of
	  arg => k a
	| i => k (hold i)
	| (op, e1, e2) =>
			eval2K (e1,a, fn i:$int => eval2K (e2,a,fn j:$int => k (evalBinop2(op,i,j)))) 
	| (e1, e2, e3) =>
			eval2K (e1,a, 
				fn i:$int => next{if prev{i} > 0 then prev{eval2K (e2,a,k)} else prev{eval2K (e3,a,k)}}) 
in
5