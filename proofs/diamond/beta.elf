
beta :  term -> term -> type.

beta-app	: beta (app (exv (lam M)) (exv E)) (M (lam M) E).
%{beta-pi1	: beta (pi1 (exv (tup E1 E2))) (exv E1).
beta-pi2	: beta (pi2 (exv (tup E1 E2))) (exv E2).
beta-unrl	: beta (unrl (exv (roll E))) (exv E).
beta-case1	: beta (case (exv (inj1 E)) M N) (M E).
beta-case2	: beta (case (exv (inj2 E)) M N) (N E).
beta-let	: beta (let (exv V) M) (M V).
beta-lett	: beta (lett (exv (tup V1 V2)) M) (M V1 V2).

beta-tup	: beta (tup (exv V1) (exv V2)) (exv (tup V1 V2)).
beta-inj1	: beta (inj1 (exv V)) (exv (inj1 V)).
beta-inj2	: beta (inj2 (exv V)) (exv (inj2 V)).
beta-roll	: beta (roll (exv V)) (exv (roll V)).}%

%worlds (term-block) (beta _ _).
%unique beta +E -1E'.


beta-resp : beta E1 E2 -> eq-term E1 E1' -> eq-term E2 E2' -> beta E1' E2' -> type.
%mode beta-resp +D1 +D2 +D3 -D3.
- : beta-resp Dbeta eq-term_ eq-term_ Dbeta.
%worlds (term-block) (beta-resp _ _ _ _).
%total {} (beta-resp _ _ _ _).

excl-exv-beta : beta (exv E) E' -> false -> type.
%mode excl-exv-beta +Dstep -Dfalse.
%worlds () (excl-exv-beta _ _).
%total (Dstep) (excl-exv-beta Dstep _).


beta/unique : beta E E1 -> beta E E2 -> eq-term E1 E2 -> type.
%mode beta/unique +Dstep1 +Dstep2 -Deq.
- : beta/unique _ _ eq-term_.
%worlds (term-block) (beta/unique _ _ _).
%total D (beta/unique D _ _).


cont 	: (term -> term) -> type.
cont-app1 : {E} cont ([x] app x E).
cont-app2 : {V} cont ([x] app (exv V) x).
%{cont-pi1 : cont pi1.
cont-pi2 : cont pi2.
cont-inj1 : cont inj1.
cont-inj2 : cont inj2.
cont-roll : cont roll.
cont-unrl : cont unrl.
cont-tup1 : {E} cont ([x] tup x E).
cont-tup2 : {V} cont ([x] tup (exv V) x).
cont-let : cont ([x] let x B).
cont-lett : cont ([x] lett x B).
cont-case : cont ([x] case x B1 B2).}%

beta-cont\eq-exv : cont F -> beta (F E) _ -> eq-term E (exv V) -> type.
%mode beta-cont\eq-exv +Dcont +Dbeta -Deq.
- : beta-cont\eq-exv _ _ eq-term_.
%worlds () (beta-cont\eq-exv _ _ _).
%total (Dstep) (beta-cont\eq-exv Dstep _ _).

excl-exv-cont : cont F -> eq-term (exv E') (F E) -> false -> type.
%mode excl-exv-cont +Dcont +Deq -Dfalse.
%worlds () (excl-exv-cont _ _ _).
%total (Dstep) (excl-exv-cont Dstep _ _).

%{
excl-exv-cont : cont ([x] exv (F x)) -> false -> type.
%mode excl-exv-cont +Dcont -Dfalse.
%worlds () (excl-exv-cont _ _).
%total (Dstep) (excl-exv-cont Dstep _).}%

eq-or-val : (term -> term) -> (term -> term) -> term -> term -> type.
eov-val1 : eq-or-val F F' (exv V) E.
eov-val2 : eq-or-val F F' E (exv V).
eov-eq : eq-or-val F F E E.

cont-eq\eq-or-val : cont F -> cont F' -> eq-term (F E) (F' E') -> eq-or-val F F' E E' -> type.
%mode cont-eq\eq-or-val +Dcont +Dcont' +Deq -Deov.
- : cont-eq\eq-or-val _ _ _ eov-eq.
%{- : cont-eq\eq-or-val (cont-tup1 _) (cont-tup2 _) _ eov-val1.
- : cont-eq\eq-or-val (cont-tup2 _) (cont-tup1 _) _ eov-val2.}%
- : cont-eq\eq-or-val (cont-app1 _) (cont-app2 _) _ eov-val1.
- : cont-eq\eq-or-val (cont-app2 _) (cont-app1 _) _ eov-val2.
%worlds () (cont-eq\eq-or-val _ _ _ _).
%total {} (cont-eq\eq-or-val _ _ _ _).