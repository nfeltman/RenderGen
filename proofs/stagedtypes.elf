
%% WORLDS
wor : type. %name wor W.
wor1 : wor.
wor2 : wor.
worG : wor.

first-stage-wor : wor -> type.
fsw-wor1 : first-stage-wor wor1.
fsw-worG : first-stage-wor worG.
%worlds () (first-stage-wor _).

ground-wor : wor -> type.
%mode ground-wor +W.
grnd-wor2 : ground-wor wor2.
grnd-worG : ground-wor worG.
%worlds () (ground-wor _).

%% TYPE WELL-FORMED
ty^wf : ty -> wor -> type.
%mode ty^wf +T +W.
ty^wf-unit	: ty^wf unit W.
ty^wf-prod	: ty^wf (prod A B) W
				<- ty^wf B W
				<- ty^wf A W.
ty^wf-sum	: ty^wf (sum A B) W
				<- ty^wf B W
				<- ty^wf A W.
ty^wf-arr	: ty^wf (arr A B) W
				<- ty^wf B W
				<- ty^wf A W.
ty^wf-rec	: ty^wf (rec F) W
				<- {a} ty^wf a W -> ty^wf (F a) W.
ty^wf-fut	: ty^wf (fut A) wor1
				<- ty^wf A wor2.
ty^wf-curr	: ty^wf (curr T) wor1
				<- ty^wf T worG.
%block ty^wf-block : some {W : wor} block {a : ty} {_ : ty^wf a W}.
%worlds (ty^wf-block) (ty^wf _ _).



%% TYPING JUDGMENT
of^ : term L -> ty -> wor -> type. %name of^ Dof.
of^-ztup	: of^ ztup unit W.
of^-tup		: of^ (tup E1 E2) (prod A B) W
				<- of^ E2 B W
				<- of^ E1 A W.
of^-pi1		: of^ (pi1 E) A W
				<- of^ E (prod A B) W.
of^-pi2		: of^ (pi2 E) B W
				<- of^ E (prod A B) W.
of^-inj1	: of^ (inj1 E) (sum A T) W
				<- of^ E A W
				<- ty^wf T W.
of^-inj2	: of^ (inj2 E) (sum T B) W
				<- of^ E B W
				<- ty^wf T W.
of^-case 	: of^ (case E M N) C W
				<- ground-wor W
				<- ({x} of^ x B W -> of^ (N x) C W)
				<- ({x} of^ x A W -> of^ (M x) C W)
				<- of^ E (sum A B) W.	
of^-lam 	: of^ (lam M) (arr A B) W
				<- ({f} of^ f (arr A B) W -> {x} of^ x A W -> of^ (M f x) B W) 
				<- ty^wf (arr A B) W.
%{of^-fix 	: of^ (fix M) (arr A B) W
				<- ({f} of^ f (arr A B) W -> of^ (M f) (arr A B) W)
				<- ty^wf (arr A B) W.}%
of^-roll	: of^ (roll E) (rec F) W
				<- of^ E (F (rec F)) W
				<- {a} ty^wf a W -> ty^wf (F a) W.
of^-unrl	: of^ (unrl E) (F (rec F)) W
				<- of^ E (rec F) W.
of^-app 	: of^ (app E1 E2) B W
				<- of^ E2 A W
				<- of^ E1 (arr A B) W.
of^-let 	: of^ (let E M) B wor2
				<- ({x} of^ x A wor2 -> of^ (M x) B wor2)
				<- of^ E A wor2.		
%{of^-let : of^ (let (exv E) ([x] M x)) B wor2
				<- ({x:term} done wor2 x -> of^ x A wor2 -> of^ (M x) B wor2)
				<- of^ (exv E) A wor2.}%
of^-exv 	: of^ (exv V) A W
				<- of^ V A W.
of^-next	: of^ (next E) (fut A) wor1
				<- of^ E A wor2.
%{of^-letn : of^ (letn E M) B wor1
				<- of^ E (fut A) wor1
				<- ({x:term} of^ x A wor2 -> of^ (M x) B wor1).}% 
of^-prev	: of^ (prev E) A wor2
				<- of^ E (fut A) wor1.
of^-grnd 	: of^ (grnd E) (curr T) wor1
				<- of^ E T worG.
of^-letg 	: of^ (letg E M) T2 wor1
				<- ({x} of^ x T1 worG -> of^ (M x) T2 wor1)
				<- of^ E (curr T1) wor1.
of^-caseg 	: of^ (caseg E M N) C wor1
				<- ({x} of^ x B worG -> of^ (N x) C wor1)
				<- ({x} of^ x A worG -> of^ (M x) C wor1)
				<- of^ E (curr (sum A B)) wor1.

%block var-of1 : 
	some {A : ty} {L : lang} {W : wor} {_ : first-stage-wor W} 
	block {x:term L} {_ : of^ x A W}.
%block var-of2 : some {A : ty} {L : lang} block {x:term L} {_ : of^ x A wor2}.
%block var-of = (var-of1 | var-of2).
%worlds (var-of) (of^ _ _ _).

%% OUTPUTS OF TYPING ARE WELL-FORMED
of^-wf : of^ E T W -> ty^wf T W -> type.
%mode of^-wf +D1 -D2. 
- : of^-wf of^-ztup ty^wf-unit.
- : of^-wf (of^-tup Dof1 Dof2) (ty^wf-prod DwfA DwfB)
	<- of^-wf Dof1 DwfA
	<- of^-wf Dof2 DwfB.
- : of^-wf (of^-pi1 Dof) DwfA
	<- of^-wf Dof (ty^wf-prod DwfA DwfB).
- : of^-wf (of^-pi2 Dof) DwfB
	<- of^-wf Dof (ty^wf-prod DwfA DwfB).
- : of^-wf (of^-inj1 DwfB Dof) (ty^wf-sum DwfA DwfB)
	<- of^-wf Dof DwfA.
- : of^-wf (of^-inj2 DwfA Dof) (ty^wf-sum DwfA DwfB)
	<- of^-wf Dof DwfB.
- : of^-wf (of^-case DofE DofM _ _) Dwf2
	<- of^-wf DofE (ty^wf-sum Dwf1 _)
	<- ({x} {ofx : of^ x A W} of^-wf ofx Dwf1 -> of^-wf (DofM x ofx) Dwf2).
- : of^-wf (of^-roll Dwf Dof) (ty^wf-rec Dwf)
	<- of^-wf Dof _.
- : of^-wf (of^-unrl Dof) (DwfF (rec F) (ty^wf-rec DwfF))
	<- of^-wf Dof (ty^wf-rec DwfF).
- : of^-wf (of^-lam Dwf DofM) Dwf.
%{- : of^-wf (of^-fix Dwf DofM) Dwf.}%
- : of^-wf (of^-app Dof1 Dof2) Dwf
	<- of^-wf Dof1 (ty^wf-arr _ Dwf). 
- : of^-wf (of^-let DofE DofM) Dwf2
	<- of^-wf DofE Dwf1
	<- ({x} {ofx : of^ x A wor2} of^-wf ofx Dwf1 -> of^-wf (DofM x ofx) Dwf2).
- : of^-wf (of^-next Dof) (ty^wf-fut Dwf)
	<- of^-wf Dof Dwf.
%{- : of^-wf (of^-letn DofM DofE) Dwf2
	<- of^-wf DofE (ty^wf-fut Dwf1)
	<- ({x:term} {Dof : of^ x A wor2} {_ : of^-wf Dof Dwf1} of^-wf (DofM x Dof) Dwf2).}%
- : of^-wf (of^-prev Dof) Dwf
	<- of^-wf Dof (ty^wf-fut Dwf).
- : of^-wf (of^-exv Dof) Dwf
	<- of^-wf Dof Dwf.
- : of^-wf (of^-grnd Dof) (ty^wf-curr Dwf)
	<- of^-wf Dof Dwf.
- : of^-wf (of^-letg DofE DofM) DwfM
	<- of^-wf DofE (ty^wf-curr DwfE)
	<- ({x} {dof} of^-wf dof DwfE -> of^-wf (DofM x dof) DwfM).
- : of^-wf (of^-caseg DofE DofM DofN) DwfM
	<- of^-wf DofE (ty^wf-curr (ty^wf-sum DwfE _))
	<- ({x} {dof} of^-wf dof DwfE -> of^-wf (DofM x dof) DwfM).
%block var-of^-wf : 
	some {L : lang} {A : ty} {W : wor} {Dwf : ty^wf A W}
	block {x:term L} {Dof : of^ x A W} {_ : of^-wf Dof Dwf}.
%worlds (var-of^-wf | term-block) (of^-wf _ _).
%total D (of^-wf D _).

%% TYPES AT TWO ARE MONOTYPES
wor2^mono : ty^wf A wor2 -> ty-wf A -> type.
%mode wor2^mono +Dwf -Dwf'.
- : wor2^mono ty^wf-unit ty-wf-unit.
- : wor2^mono (ty^wf-prod Dwf1 Dwf2) (ty-wf-prod Dwf1' Dwf2')
	<- wor2^mono Dwf1 Dwf1'
	<- wor2^mono Dwf2 Dwf2'.
- : wor2^mono (ty^wf-arr Dwf1 Dwf2) (ty-wf-arr Dwf1' Dwf2')
	<- wor2^mono Dwf1 Dwf1'
	<- wor2^mono Dwf2 Dwf2'.
- : wor2^mono (ty^wf-sum Dwf1 Dwf2) (ty-wf-sum Dwf1' Dwf2')
	<- wor2^mono Dwf1 Dwf1'
	<- wor2^mono Dwf2 Dwf2'.
- : wor2^mono (ty^wf-rec DwfF) (ty-wf-rec DwfF')
	<- {a}{wfa}{wfa'} wor2^mono wfa wfa' -> wor2^mono (DwfF a wfa) (DwfF' a wfa').

%block wor2^mono-block : block {a : ty} {Dwf : ty^wf a wor2} {Dwf' : ty-wf a} {_ : wor2^mono Dwf Dwf'}.
%worlds (wor2^mono-block) (wor2^mono _ _).
%total (D) (wor2^mono D _).

%% TYPING RESPECTS IDENTITY
of^-resp : of^ M A W -> eq-ty A B -> of^ M B W -> type.
%mode of^-resp +D1 +D2 -D3.
- : of^-resp Dof eq-ty_ Dof.
%block ofs-block : some {L : lang} {A : ty} {W : wor}  {x : term L} block {_ : of^ x A W}.
%worlds (term-block | ofs-block) (of^-resp _ _ _).
%total {} (of^-resp _ _ _).



%% NORMALITY JUDGMENT
normality^ : type. %name normality^ N.
comp1 : normality^.
norm1 : normality^.
vars2 : normality^.

form^ : term L -> normality^ -> wor -> type. %name form^ Dform.
form^ztup : form^ ztup norm1 W.
form^lam1 : form^ (lam M) norm1 W
			<- first-stage-wor W
			<- {f} form^ f norm1 W -> {x} form^ x norm1 W -> form^ (M f x) comp1 W.
%{form^fix-c : form^ (fix M) comp1 W
			<- first-stage-wor W
			<- {f} form^ f norm1 W -> 
			   {x} form^ x norm1 W -> form^ (M f x) comp1 W.}%
form^lam2n : form^ (lam M) norm1 wor2
			<- {f} form^ f vars2 wor2 -> {x} form^ x vars2 wor2 -> form^ (M f x) norm1 wor2.
form^lam2c : form^ (lam M) comp1 wor2
			<- {f} form^ f vars2 wor2 -> {x} form^ x vars2 wor2 -> form^ (M f x) comp1 wor2.
%{form^fix-c2 : form^ (fix M) comp1 wor2
			<- {f} form^ f vars2 wor2 -> 
			   {x} form^ x vars2 wor2 -> form^ (M f x) comp1 wor2.
form^fix-n2 : form^ (fix M) norm1 wor2
			<- {f} form^ f vars2 wor2 -> 
			   {x} form^ x vars2 wor2 -> form^ (M f x) norm1 wor2.}%
form^tup-c : form^ (tup E1 E2) comp1 W
			<- form^ E2 comp1 W
			<- form^ E1 comp1 W.
form^tup-n : form^ (tup E1 E2) norm1 W
			<- form^ E2 norm1 W
			<- form^ E1 norm1 W.
form^inj1-c : form^ (inj1 E) comp1 W
			<- form^ E comp1 W.
form^inj2-c : form^ (inj2 E) comp1 W
			<- form^ E comp1 W.
form^inj1-n : form^ (inj1 E) norm1 W
			<- form^ E norm1 W.
form^inj2-n : form^ (inj2 E) norm1 W
			<- form^ E norm1 W.
form^roll-c : form^ (roll E) comp1 W
			<- form^ E comp1 W.
form^roll-n : form^ (roll E) norm1 W
			<- form^ E norm1 W.

form^exv  : form^ (exv E) comp1 W
			<- form^ E norm1 W.
form^var2 : form^ (exv E) norm1 wor2
			<- form^ E vars2 wor2.
form^pi1-c  : form^ (pi1 E) comp1 W
			<- form^ E comp1 W.
form^pi2-c  : form^ (pi2 E) comp1 W
			<- form^ E comp1 W.
form^unrl-c : form^ (unrl E) comp1 W
			<- form^ E comp1 W.
form^app-c  : form^ (app E1 E2) comp1 W
			<- form^ E2 comp1 W
			<- form^ E1 comp1 W.
form^case-cG : form^ (case E M N) comp1 worG
			<- ({x} form^ x norm1 worG -> form^ (N x) comp1 worG)
			<- ({x} form^ x norm1 worG -> form^ (M x) comp1 worG)
			<- form^ E comp1 worG.
form^case-c2 : form^ (case E M N) comp1 wor2
			<- ({x} form^ x vars2 wor2 -> form^ (N x) comp1 wor2)
			<- ({x} form^ x vars2 wor2 -> form^ (M x) comp1 wor2)
			<- form^ E comp1 wor2.
form^let-c  : form^ (let E M) comp1 wor2
			<- ({x} form^ x vars2 wor2 -> form^ (M x) comp1 wor2)
			<- form^ E comp1 wor2.
form^pi1-n2  : form^ (pi1 E) norm1 wor2
			<- form^ E norm1 wor2.
form^pi2-n2  : form^ (pi2 E) norm1 wor2
			<- form^ E norm1 wor2.
form^unrl-n2 : form^ (unrl E) norm1 wor2
			<- form^ E norm1 wor2.
form^app-n2  : form^ (app E1 E2) norm1 wor2
			<- form^ E2 norm1 wor2
			<- form^ E1 norm1 wor2.
form^case-n2  : form^ (case E M N) norm1 wor2
			<- ({x} form^ x vars2 wor2 -> form^ (N x) norm1 wor2)
			<- ({x} form^ x vars2 wor2 -> form^ (M x) norm1 wor2)
			<- form^ E norm1 wor2.
form^let-n2  : form^ (let E M) norm1 wor2
			<- ({x} form^ x vars2 wor2 -> form^ (M x) norm1 wor2)
			<- form^ E norm1 wor2.

form^next-c : form^ (next E) comp1 wor1
			<- form^ E comp1 wor2.
form^next-n : form^ (next E) norm1 wor1
			<- form^ E vars2 wor2.
form^prev  : form^ (prev E) comp1 wor2
			<- form^ E comp1 wor1.

form^grnd  : form^ (grnd E) N wor1
			<- form^ E N worG.
form^letg  : form^ (letg E M) comp1 wor1
			<- ({x} form^ x norm1 worG -> form^ (M x) comp1 wor1)
			<- form^ E comp1 wor1.
form^caseg : form^ (caseg E M N) comp1 wor1
			<- ({x} form^ x norm1 worG -> form^ (N x) comp1 wor1)
			<- ({x} form^ x norm1 worG -> form^ (M x) comp1 wor1)
			<- form^ E comp1 wor1.

%block form^-block : some {L} {N} {W} {x : term L} block {_ : form^ x N W}.
%block of^-form^-block = (ofs-block | form^-block).