

%% DONE-OR-STEP JUDGEMENT
dos : wor -> term L -> type.
dos-done	: dos W (exv E).
dos-mstep	: mstep W E E' -> dos W E.
dos-lstep	: lstep E Q E' -> dos wor1 E.

%% VAR-OR-NOT JUDGEMENT
var-or-not : term L -> type. %name var-or-not Dvon.
von-var : form^ E vars2 wor2 -> var-or-not (exv E).
von-not : not-variable E -> var-or-not E.


%% RESIDUALS ARE EITHER VARIABLES OR NOT VARIABLES
res\von : form^ E norm1 wor2 -> var-or-not E -> type.
%mode res\von +Dres -Dvon.
- : res\von (form^var2 Dvar) (von-var Dvar).
- : res\von (form^ztup) (von-not nv-ztup).
- : res\von (form^tup-n _ _) (von-not nv-tup).
- : res\von (form^pi1-n2 _) (von-not nv-pi1).
- : res\von (form^pi2-n2 _) (von-not nv-pi2).
- : res\von (form^lam2n _) (von-not nv-lam).
- : res\von (form^app-n2 _ _) (von-not nv-app).
- : res\von (form^let-n2 _ _) (von-not nv-let).
%block von-block : 
	some {A : ty} {L :lang} 
	block {x:term L} {dof : of^ x A wor2} {dvar : form^ x vars2 wor2}.
%worlds (von-block) (res\von _ _).
%total (E) (res\von E _).


%% PROGRESS LEMMAS
prog/tup : dos W E1 -> dos W E2 -> dos W (tup E1 E2) -> type.
%mode prog/tup +Ddos1 +Ddos2 -Ddos.
- : prog/tup (dos-mstep Dstep) _ (dos-mstep (ms-tup-s1 Dstep)).
- : prog/tup (dos-lstep Dstep) _ (dos-lstep (ls-tup-s1 Dstep)).
- : prog/tup dos-done (dos-mstep Dstep) (dos-mstep (ms-tup-s2 Dstep)).
- : prog/tup dos-done (dos-lstep Dstep) (dos-lstep (ls-tup-s2 Dstep)).
- : prog/tup dos-done dos-done (dos-mstep ms-tup-d).
%worlds (von-block) (prog/tup _ _ _).
%total (Ddos) (prog/tup Ddos _ _).


prog/pi1 : dos W E -> of^ E (prod T1 T2) W -> form^ E comp1 W -> dos W (pi1 E) -> type.
%mode prog/pi1 +Ddos +Dof +Dform -Ddos'.
- : prog/pi1 (dos-mstep Dstep) _ _ (dos-mstep (ms-pi1-s Dstep)).
- : prog/pi1 (dos-lstep Dstep) _ _ (dos-lstep (ls-pi1-s Dstep)).
- : prog/pi1 dos-done (of^-exv _) (form^exv _) (dos-mstep (ms-pi1-r fsw-wor1)).
- : prog/pi1 dos-done (of^-exv _) (form^exv _) (dos-mstep (ms-pi1-r fsw-worG)).
- : prog/pi1 dos-done (of^-exv _) (form^exv _) (dos-mstep ms-pi1-d).
%worlds (von-block) (prog/pi1 _ _ _ _).
%total (Ddos) (prog/pi1 Ddos _ _ _).

prog/pi2 : dos W E -> of^ E (prod T1 T2) W -> form^ E comp1 W -> dos W (pi2 E) -> type.
%mode prog/pi2 +Ddos +Dof +Dform -Ddos'.
- : prog/pi2 (dos-mstep Dstep) _ _ (dos-mstep (ms-pi2-s Dstep)).
- : prog/pi2 (dos-lstep Dstep) _ _ (dos-lstep (ls-pi2-s Dstep)).
- : prog/pi2 dos-done (of^-exv _) (form^exv _) (dos-mstep (ms-pi2-r fsw-wor1)).
- : prog/pi2 dos-done (of^-exv _) (form^exv _) (dos-mstep (ms-pi2-r fsw-worG)).
- : prog/pi2 dos-done (of^-exv _) (form^exv _) (dos-mstep ms-pi2-d).
%worlds (von-block) (prog/pi2 _ _ _ _).
%total (Ddos) (prog/pi2 Ddos _ _ _).

prog/inj1 : dos worG E -> dos worG (inj1 E) -> type.
%mode prog/inj1 +Ddos -Ddos'.
- : prog/inj1 (dos-mstep Dstep) (dos-mstep (ms-inj1-s Dstep)).
- : prog/inj1 dos-done (dos-mstep ms-inj1-d).
%worlds (von-block) (prog/inj1 _ _).
%total (Ddos) (prog/inj1 Ddos _ ).

prog/inj2 : dos worG E -> dos worG (inj2 E) -> type.
%mode prog/inj2 +Ddos -Ddos'.
- : prog/inj2 (dos-mstep Dstep) (dos-mstep (ms-inj2-s Dstep)).
- : prog/inj2 dos-done (dos-mstep ms-inj2-d).
%worlds (von-block) (prog/inj2 _ _).
%total (Ddos) (prog/inj2 Ddos _ ).

prog/case : dos worG E -> of^ (case E M N) _ worG -> form^ E comp1 worG -> mstep worG (case E M N) _ -> type.
%mode prog/case +Dvos +Dof +Dform -Dvos'.
- : prog/case (dos-mstep Dstep) _ _ (ms-case-s Dstep).
- : prog/case dos-done (of^-case (of^-exv (of^-inj1 _ _)) _ _) (form^exv _) ms-case-r1.
- : prog/case dos-done (of^-case (of^-exv (of^-inj2 _ _)) _ _) (form^exv _) ms-case-r2.
%worlds (von-block) (prog/case _ _ _ _).
%total (Dvos) (prog/case Dvos _ _ _).

prog/lam : ({x} dos wor2 (M x)) -> dos wor2 (lam M) -> type.
%mode prog/lam +Ddos -Ddos'.
- : prog/lam ([x] dos-mstep (Dstep x)) (dos-mstep (ms-lam-s Dstep)).
- : prog/lam ([x] dos-done) (dos-mstep ms-lam-d).
%worlds (von-block) (prog/lam _ _).
%total (Ddos) (prog/lam Ddos _).

prog/app/help : {E2} of^ E1 (arr T1 T2) W -> form^ E1 norm1 W -> dos W (app (exv E1) (exv E2)) -> type.
%mode prog/app/help +Dof +Dform +E2 -Ddos'.
- : prog/app/help _ _ _ (dos-mstep (ms-app-r fsw-wor1)).
- : prog/app/help _ _ _ (dos-mstep (ms-app-r fsw-worG)).
- : prog/app/help _ _ _ (dos-mstep ms-app-d).
%% following case can't fire, just here to get coverage checker to behave
- : prog/app/help _ _ (form^lam1 _) (dos-mstep (ms-app-r fsw-wor1)).
%worlds (von-block) (prog/app/help _ _ _ _).
%total (Ddos) (prog/app/help _ Ddos _ _).

prog/app : dos W E1 -> dos W E2 -> of^ E1 (arr T1 T2) W -> form^ E1 comp1 W -> dos W (app E1 E2) -> type.
%mode prog/app +Ddos1 +Ddos2 +Dof +Dform -Ddos.
- : prog/app (dos-mstep Dstep) _ _ _ (dos-mstep (ms-app-s1 Dstep)).
- : prog/app (dos-lstep Dstep) _ _ _ (dos-lstep (ls-app-s1 Dstep)).
- : prog/app dos-done (dos-mstep Dstep) _ _ (dos-mstep (ms-app-s2 Dstep)).
- : prog/app dos-done (dos-lstep Dstep) _ _ (dos-lstep (ls-app-s2 Dstep)).
- : prog/app dos-done dos-done (of^-exv Dof) (form^exv Dform) Ddos
	<- prog/app/help _ Dof Dform Ddos.
%worlds (von-block) (prog/app _ _ _ _ _).
%total (Ddos) (prog/app Ddos _ _ _ _).
%{
prog/let1 : dos wor1 E -> of^ (let E M) T wor1 _ -> dos wor1 (let E M) -> type.
%mode prog/let1 +Ddos +Dof -Ddos'.
- : prog/let1 (dos-mstep Dstep) _ (dos-mstep (ms-let-s1 Dstep)).
- : prog/let1 (dos-lstep Dstep) _ (dos-lstep (ls-let-s1 Dstep)).
- : prog/let1 dos-done _ (dos-mstep ms-let-r).
%worlds (von-block) (prog/let1 _ _ _).
%total (Ddos) (prog/let1 Ddos _ _).
}%
prog/let2 : dos wor2 E -> ({x} dos wor2 (M x)) -> dos wor2 (let E M) -> type.
%mode prog/let2 +Ddos1 +Ddos2 -Ddos'.
- : prog/let2 (dos-mstep Dstep) _ (dos-mstep (ms-let-s1 Dstep)).
- : prog/let2 dos-done ([x] dos-mstep (Dstep x)) (dos-mstep (ms-let-s2 Dstep)).
- : prog/let2 dos-done ([x] dos-done) (dos-mstep ms-let-d).
%worlds (von-block) (prog/let2 _ _ _).
%total (Ddos) (prog/let2 Ddos _ _).

von\dos : var-or-not E -> dos wor1 (next (exv E)) -> type.
%mode von\dos +Dvon -Ddos.
- : von\dos (von-var Dvar) (dos-mstep ms-next-d).
- : von\dos (von-not Dnotvar) (dos-lstep (ls-next-r Dnotvar)).
%worlds (von-block) (von\dos _ _).
%total (D) (von\dos D _).

prog/next : dos wor2 E -> form^ E comp1 wor2 -> dos wor1 (next E) -> type.
%mode prog/next +Ddos +Dof -Ddos'.
- : prog/next (dos-mstep Dstep) _ (dos-mstep (ms-next-s Dstep)).
- : prog/next dos-done (form^exv Dform) Ddos
	<- res\von Dform Dvon
	<- von\dos Dvon Ddos.
%worlds (von-block) (prog/next _ _ _).
%total (Ddos) (prog/next Ddos _ _).

prog/prev : dos wor1 E -> of^ E (fut T) wor1 -> form^ E comp1 wor1 -> dos wor2 (prev E) -> type.
%mode prog/prev +Ddos +Dof +Dform -Ddos'.
- : prog/prev (dos-mstep Dstep) _ _ (dos-mstep (ms-prev-s Dstep)).
- : prog/prev (dos-lstep Dstep) _ _ (dos-mstep (ms-prev-ls Dstep)).
- : prog/prev dos-done (of^-exv Dof) (form^exv Dform) (dos-mstep ms-prev-r).
%worlds (von-block) (prog/prev _ _ _ _).
%total (Ddos) (prog/prev Ddos _ _ _).

prog/grnd : dos worG E -> dos wor1 (grnd E) -> type.
%mode prog/grnd +Ddos -Ddos'.
- : prog/grnd (dos-mstep Dstep) (dos-mstep (ms-grnd-s Dstep)).
- : prog/grnd dos-done (dos-mstep ms-grnd-d).
%worlds (von-block) (prog/grnd _ _).
%total {} (prog/grnd _ _).

%% PROGRESS
prog : of^ E T W -> form^ E comp1 W -> dos W E -> type.
%mode prog +Dof +Dform -Ddos.
- : prog _ _ dos-done.
- : prog (of^-tup Dof1 Dof2) (form^tup-c Dcomp1 Dcomp2) Ddos
	<- prog Dof1 Dcomp1 Ddos1
	<- prog Dof2 Dcomp2 Ddos2
	<- prog/tup Ddos1 Ddos2 Ddos.
- : prog (of^-pi1 Dof) (form^pi1-c Dcomp) Ddos'
	<- prog Dof Dcomp Ddos
	<- prog/pi1 Ddos Dof Dcomp Ddos'.
- : prog (of^-pi2 Dof) (form^pi2-c Dcomp) Ddos'
	<- prog Dof Dcomp Ddos
	<- prog/pi2 Ddos Dof Dcomp Ddos'.
- : prog (of^-inj1 _ Dof) (form^inj1-c Dcomp) Ddos'
	<- prog Dof Dcomp Ddos
	<- prog/inj1 Ddos Ddos'.
- : prog (of^-inj2 _ Dof) (form^inj2-c Dcomp) Ddos'
	<- prog Dof Dcomp Ddos
	<- prog/inj2 Ddos Ddos'.
- : prog (of^-case DofE DofM DofN) (form^case-c DcompE DcompM DcompN) (dos-mstep Ddos)
	<- prog DofE DcompE DdosE
	<- prog/case DdosE (of^-case DofE DofM DofN) DcompE Ddos.
- : prog (of^-lam _ DofM) (form^lam2c Dcomp) Ddos'
	<- ({x} {dof: of^ x T wor2} {dvar : form^ x vars2 wor2}
		prog (DofM x dof) (Dcomp x dvar) (Ddos x))
	<- prog/lam Ddos Ddos'.
- : prog (of^-app Dof1 Dof2) (form^app-c Dcomp1 Dcomp2) Ddos
	<- prog Dof1 Dcomp1 Ddos1
	<- prog Dof2 Dcomp2 Ddos2
	<- prog/app Ddos1 Ddos2 Dof1 Dcomp1 Ddos.
%{- : prog (of^-let DofM DofE) Ddos'
	<- prog DofE Ddos
	<- prog/let1 Ddos (of^-let DofM DofE) Ddos'.}%
- : prog (of^-let DofE DofM) (form^let-c DcompE DcompM) Ddos'
	<- prog DofE DcompE DdosE
	<- ({x} {dof: of^ x T wor2} {dvar : form^ x vars2 wor2}
		prog (DofM x dof) (DcompM x dvar) (DdosM x))
	<- prog/let2 DdosE DdosM Ddos'.
- : prog (of^-next Dof) (form^next-c Dcomp) Ddos'
	<- prog Dof Dcomp Ddos
	<- prog/next Ddos Dcomp Ddos'.
- : prog (of^-prev Dof) (form^prev Dcomp) Ddos'
	<- prog Dof Dcomp Ddos
	<- prog/prev Ddos Dof Dcomp Ddos'.
- : prog (of^-grnd Dof) (form^grnd Dcomp) Ddos'
	<- prog Dof Dcomp Ddos
	<- prog/grnd Ddos Ddos'.
%worlds (von-block) (prog _ _ _).
%total (Ddos) (prog Ddos _ _).
