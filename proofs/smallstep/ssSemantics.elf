%{ monostage.elf }%



%% SOMETHING IS NOT A VARIABLE (indicates that contents of a next needs to be lifted)
not-variable : term L -> type.
nv-ztup : not-variable ztup.
nv-tup  : not-variable (tup _ _).
nv-pi1  : not-variable (pi1 _).
nv-pi2  : not-variable (pi2 _).
nv-lam  : not-variable (lam _).
nv-app  : not-variable (app _ _).
nv-let 	: not-variable (let _ _).
nv-inj1 : not-variable (inj1 _).
nv-inj2 : not-variable (inj2 _).
nv-case : not-variable (case _ _ _).

%% STANDARD COMPATABILITY CONTEXT
compc : (term L -> term L) -> type.
cc-tup1 : compc ([x] tup x E).
cc-tup2 : compc ([x] tup (exv E) x).
cc-pi1 : compc pi1.
cc-pi2 : compc pi2.
cc-app1 : compc ([x] app x E).
cc-app2 : compc ([x] app (exv E) x).
cc-let : compc ([x] let x M).
%freeze compc.

%% UNDER BINDER COMPATABILITY CONTEXT
binder-compc : ((term L -> term L) -> term L) -> type.
bcc-lam : binder-compc lam.
bcc-let : binder-compc (let E).

%% MSTEPS
mstep : wor -> term L -> term L -> type. %name mstep Dmstep.

%% DONE MARKING RULES
ms-tup-d 	: mstep W (tup (exv E1) (exv E2)) (exv (tup E1 E2)).
ms-pi1-d 	: mstep wor2 (pi1 (exv E)) (exv (pi1 E)).
ms-pi2-d 	: mstep wor2 (pi2 (exv E)) (exv (pi2 E)).
ms-inj1-d 	: mstep W (inj1 (exv E)) (exv (inj1 E)) <- ground-wor W.
ms-inj2-d 	: mstep W (inj2 (exv E)) (exv (inj2 E)) <- ground-wor W.
ms-case-d 	: mstep wor2 (case (exv E) ([x] exv (M x)) ([x] exv (N x))) (exv (case E M N)).
ms-lam-d 	: mstep wor2 (lam ([x] exv (M x))) (exv (lam M)).
ms-app-d 	: mstep wor2 (app (exv E1) (exv E2)) (exv (app E1 E2)).
ms-let-d 	: mstep wor2 (let (exv E) ([x] exv (M x))) (exv (let E M)).
ms-next-d 	: mstep wor1 (next (exv (exv E))) (exv (next E)).

%% M STEP - SUBSTEP RULES
ms-tup-s1	: mstep W (tup E1 E2) (tup E1' E2)
			<- mstep W E1 E1'.
ms-tup-s2	: mstep W (tup (exv E1) E2) (tup (exv E1) E2')
			<- mstep W E2 E2'.
ms-pi1-s	: mstep W (pi1 E) (pi1 E')
			<- mstep W E E'.
ms-pi2-s	: mstep W (pi2 E) (pi2 E')
			<- mstep W E E'.
ms-inj1-s	: mstep W (inj1 E) (inj1 E')
			<- mstep W E E'.
ms-inj2-s	: mstep W (inj2 E) (inj2 E')
			<- mstep W E E'.
ms-case-s1	: mstep W (case E M N) (case E' M N)
			<- mstep W E E'.
ms-case-s2	: mstep wor2 (case (exv E) M N) (case (exv E) M' N)
			<- {x} mstep wor2 (M x) (M' x).
ms-case-s3	: mstep wor2 (case (exv E) ([x] exv (M x)) N) (case (exv E) ([x] exv (M x)) N')
			<- {x} mstep wor2 (N x) (N' x).
ms-app-s1	: mstep W (app E1 E2) (app E1' E2)
			<- mstep W E1 E1'.
ms-app-s2	: mstep W (app (exv E1) E2) (app (exv E1) E2')
			<- mstep W E2 E2'.
ms-let-s1	: mstep W (let E M) (let E' M)
			<- mstep W E E'.
ms-lett-s1	: mstep W (lett E M) (lett E' M)
			<- mstep W E E'.
ms-lam-s	: mstep wor2 (lam M) (lam M')
			<- {x} mstep wor2 (M x) (M' x).
ms-let-s2	: mstep wor2 (let (exv E) M) (let (exv E) M')
			<- {x} mstep wor2 (M x) (M' x).

%{ms-compat	: mstep W (F E) (F E')
			<- compc F
			<- mstep W E E'.
ms-bcompat	: mstep wor2 (F M) (F M')
			<- binder-compc F
			<- {x:term} variable x -> mstep wor2 (M x) (M' x).}%

%% M STEP - REDUCTION RULES
ms-pi1-r	: mstep W (pi1 (exv (tup E1 E2))) (exv E1)
				<- first-stage-wor W.
ms-pi2-r	: mstep W (pi2 (exv (tup E1 E2))) (exv E2)
				<- first-stage-wor W.
ms-app-r	: mstep W (app (exv (lam M)) (exv E)) (M E)
				<- first-stage-wor W.
ms-case-r1	: mstep worG (case (exv (inj1 E)) M N) (M E).
ms-case-r2	: mstep worG (case (exv (inj2 E)) M N) (N E).
%{ms-let-r	: mstep wor1 (let (exv E) M) (M E).}%

			
%% SECOND-STAGE VARIABLE LIFT STEP
lstep : term L -> term L -> (term L -> term L) -> type. %name lstep Dlstep.
ls-tup-s1	: lstep (tup E1 E2) Q ([x] tup (E1' x) E2)
			<- lstep E1 Q E1'.
ls-tup-s2	: lstep (tup (exv E1) E2) Q ([x] tup (exv E1) (E2' x))
			<- lstep E2 Q E2'.
ls-pi1-s	: lstep (pi1 E) Q ([x] pi1 (E' x))
			<- lstep E Q E'.
ls-pi2-s	: lstep (pi2 E) Q ([x] pi2 (E' x))
			<- lstep E Q E'.
ls-app-s1	: lstep (app E1 E2) Q ([x] app (E1' x) E2)
			<- lstep E1 Q E1'.
ls-app-s2	: lstep (app (exv E1) E2) Q ([x] app (exv E1) (E2' x))
			<- lstep E2 Q E2'.
ls-letg-s1	: lstep (letg E M) Q ([x] letg (E' x) M)
			<- lstep E Q E'.
%{ls-compat	: lstep (F E) Q ([x] F (E' x))
			<- compc F
			<- lstep E Q E'.}%

			
%% STAGING FEATURES
ms-next-s	: mstep wor1 (next E) (next E')
			<- mstep wor2 E E'.
ls-next-r	: lstep (next (exv E)) E ([x] next (exv (exv x)))
			<- not-variable E.
ms-prev-s	: mstep wor2 (prev E) (prev E')
			<- mstep wor1 E E'.
ms-prev-ls	: mstep wor2 (prev E) (let (exv Q) ([x] prev (E' x)))
			<- lstep E Q E'.
ms-prev-r	: mstep wor2 (prev (exv (next E))) (exv (exv E)).
ms-grnd-s	: mstep wor1 (grnd E) (grnd E')
			<- mstep worG E E'.
ms-grnd-d 	: mstep wor1 (grnd (exv E)) (exv (grnd E)).
ms-letg-s1	: mstep wor1 (letg E M) (letg E' M)
			<- mstep wor1 E E'.
ms-letg-r	: mstep wor1 (letg (exv (grnd V)) M) (M V).

%freeze mstep.
%freeze lstep.

%% PATHS

mstep* : term L -> term L -> wor -> type.
mstep*-id : mstep* E E W.
mstep*-step : mstep W E1 E2 -> mstep* E2 E3 W -> mstep* E1 E3 W.