%%  USEFUL BLOCKS
%block pres-block : some {A : ty} block {x:term} {dvar : variable x} {dof : of^ x A wor2 dot-d}.

%% LIFT STEP PRESERVATION
lpres : lstep E Q E' -> of^ E T wor1 dot-t -> of^ Q TQ wor2 dot-d -> ({x:term} variable x -> of^ x TQ wor2 dot-d -> of^ (E' x) T wor1 dot-t) -> type.
%mode lpres +Dstep +Dof -DofQ -Dof'.
- : lpres (ls-next-r _) (of^-next-t (of^-exv Dof)) Dof ([x][vx][dof] of^-exv (of^-next-d dof vx)).
- : lpres (ls-tup-s1 Dstep) (of^-tup Dof1 Dof2) DofQ ([x][vx][dof] of^-tup (Dof1' x vx dof) Dof2)
	<- lpres Dstep Dof1 DofQ Dof1'.
- : lpres (ls-tup-s2 Dstep) (of^-tup Dof1 Dof2) DofQ ([x][vx][dof] of^-tup Dof1 (Dof2' x vx dof))
	<- lpres Dstep Dof2 DofQ Dof2'.
- : lpres (ls-pi1-s Dstep) (of^-pi1 Dof DT) DofQ ([x][vx][dof] of^-pi1 (Dof' x vx dof) DT)
	<- lpres Dstep Dof DofQ Dof'.
- : lpres (ls-pi2-s Dstep) (of^-pi2 Dof DT) DofQ ([x][vx][dof] of^-pi2 (Dof' x vx dof) DT)
	<- lpres Dstep Dof DofQ Dof'.
- : lpres (ls-app-s1 Dstep) (of^-app Dof1 Dof2 DT) DofQ ([x][vx][dof] of^-app (Dof1' x vx dof) Dof2 DT)
	<- lpres Dstep Dof1 DofQ Dof1'.
- : lpres (ls-app-s2 Dstep) (of^-app Dof1 Dof2 DT) DofQ ([x][vx][dof] of^-app Dof1 (Dof2' x vx dof) DT)
	<- lpres Dstep Dof2 DofQ Dof2'.
%{- : lpres (ms*-let-s1 Dstep) (of^-let DofM DofE) DofQ ([x] [dof] of^-let DofM (DofE' x dof))
	<- lpres Dstep DofE DofQ DofE'.}%

%worlds (pres-block) (lpres _ _ _ _).
%total {Dstep Dof} (lpres Dstep Dof _ _).

%% NORMAL STEP PRESERVATION (SUBSTEP RULES)
pres : mstep W E E' -> of^ E T W dot-t -> of^ E' T W dot-t -> type.
%mode pres +Dstep +Dof -Dof'.
- : pres (ms-tup-s1 Dstep) (of^-tup Dof1 Dof2) (of^-tup Dof1' Dof2)
	<- pres Dstep Dof1 Dof1'.
- : pres (ms-tup-s2 Dstep) (of^-tup Dof1 Dof2) (of^-tup Dof1 Dof2')
	<- pres Dstep Dof2 Dof2'. 
- : pres (ms-pi1-s Dstep) (of^-pi1 Dof DT) (of^-pi1 Dof' DT)
	<- pres Dstep Dof Dof'.
- : pres (ms-pi2-s Dstep) (of^-pi2 Dof DT) (of^-pi2 Dof' DT)
	<- pres Dstep Dof Dof'.
- : pres (ms-app-s1 Dstep) (of^-app Dof1 Dof2 Drx) (of^-app Dof1' Dof2 Drx)
	<- pres Dstep Dof1 Dof1'.
- : pres (ms-app-s2 Dstep) (of^-app Dof1 Dof2 Drx) (of^-app Dof1 Dof2' Drx)
	<- pres Dstep Dof2 Dof2'.
- : pres (ms-let-s1 Dstep) (of^-let DofE DofM) (of^-let DofE' DofM) 
	<- pres Dstep DofE DofE'.
- : pres (ms-lam-s Dstep) (of^-lam2 Dwf DofM) (of^-lam2 Dwf DofM') 
	<- {x:term} {dvar : variable x} {dof : of^ x T wor2 dot-d} 
		pres (Dstep x dvar) (DofM x dvar dof) (DofM' x dvar dof).
- : pres (ms-let-s2 Dstep) (of^-let DofE DofM) (of^-let DofE DofM') 
	<- {x:term} {dvar : variable x} {dof : of^ x T wor2 dot-d} 
		pres (Dstep x dvar) (DofM x dvar dof) (DofM' x dvar dof).


%% NORMAL STEP PRESERVATION (VALUE MARKERS)
- : pres ms-tup-d (of^-tup (of^-exv Dof1) (of^-exv Dof2)) (of^-exv (of^-tup Dof1 Dof2)).
- : pres ms-pi1-d (of^-pi1 (of^-exv Dof) _) (of^-exv (of^-pi1 Dof redux-d2)).
- : pres ms-pi2-d (of^-pi2 (of^-exv Dof) _) (of^-exv (of^-pi2 Dof redux-d2)).
- : pres ms-lam-d (of^-lam2 Dwf ([x][vx][ofx] of^-exv (Dof x vx ofx))) (of^-exv (of^-lam2 Dwf Dof)).
- : pres ms-app-d (of^-app (of^-exv Dof1) (of^-exv Dof2) _) (of^-exv (of^-app Dof1 Dof2 redux-d2)).
- : pres ms-let-d (of^-let (of^-exv DofE) ([x][vx][ofx] of^-exv (DofM x vx ofx))) (of^-exv (of^-let DofE DofM)).
- : pres (ms-next-d Dvar) (of^-next-t (of^-exv Dof)) (of^-exv (of^-next-d Dof Dvar)).

%% NORMAL STEP PRESERVATION (REDUCTION RULES)
- : pres ms-pi1-r (of^-pi1 (of^-exv (of^-tup Dof _)) _) (of^-exv Dof).
- : pres ms-pi2-r (of^-pi2 (of^-exv (of^-tup _ Dof)) _) (of^-exv Dof).
- : pres ms-app-r (of^-app (of^-exv (of^-lam1 _ DofM)) (of^-exv DofE) _) (DofM E DofE).
%%- : pres (ms-let-r _) (of^-let DofM DofE) (DofM E DofE).



%% STAGING FEATURE PRESERVATION
- : pres (ms-next-s Dstep) (of^-next-t Dof) (of^-next-t Dof')
	<- pres Dstep Dof Dof'.
- : pres (ms-prev-s Dstep) (of^-prev Dof) (of^-prev Dof')
	<- pres Dstep Dof Dof'.
- : pres (ms-prev-ls Dstep) (of^-prev Dof) (of^-let (of^-exv DofQ) ([x][vx][dof] of^-prev (Dof' x vx dof)))
	<- lpres Dstep Dof DofQ Dof'.
- : pres ms-prev-r (of^-prev (of^-exv (of^-next-d Dof _))) (of^-exv Dof).

%worlds (pres-block) (pres _ _ _).
%total (Dstep) (pres Dstep _ _).