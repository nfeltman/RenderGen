%{ liftr.elf }%

%% WORLDS
wor : type. %name wor W.
wor1 : wor.
%%wor2 : wor.

%% TYPES
ty : type. %name ty T.
unit  : ty.
arr    : ty -> ty -> ty.
%%fut    : ty wor2 -> ty wor1.

%% TERMS
term : type. %name term E.
ztup  : term.
%% annotate base constants with their world
lam    : ty -> (term -> term) -> term.
app    : term -> term -> term.
%%next  : term -> term.
%%prev  : term -> term.

%% TYPE WELL-FORMED
ty-wf : ty -> wor -> type.
ty-wf-unit	: ty-wf unit W.
ty-wf-arr	: ty-wf (arr A B) W
				<- ty-wf A W
				<- ty-wf B W.
%worlds () (ty-wf _ _).

%% TYPING JUDGMENT
of : term -> ty -> wor -> type. %name of Dof.
of-ztup	: of ztup unit W.
of-lam 	: of (lam A ([x] M x)) (arr A B) W
			<- ({x: term} of x A W -> of (M x) B W).
%%			<- ty-wf A W.
of-app  : of (app E1 E2) B W
			<- of E2 A W
			<- of E1 (arr A B) W.
%%of-next  : of (next E) (fut A)
%%      <- of E A.
%%of-prev  : of (prev E) A
%%      <- of E (fut A).

%block var-of : some {A : ty} {W : wor} block {x:term} {_ : of x A W}.
%worlds (var-of) (of _ _ _).
%unique of +E -T +W.

%% UNIQUENESS OF TYPING
idty : ty -> wor -> ty -> wor -> type.
idty/refl : idty T W T W.

idty-cong-arr :
  idty A1 W1 A2 W2 ->
  idty B1 W1 B2 W2 ->
  idty (arr A1 B1) W1 (arr A2 B2) W2 -> type.
%mode idty-cong-arr +D1 +D2 -D3.
- : idty-cong-arr idty/refl idty/refl idty/refl.
%worlds () (idty-cong-arr _ _ _).
%total {} (idty-cong-arr _ _ _).

idty-inj-arr :
  idty (arr A1 B1) W1 (arr A2 B2) W2 ->
  idty A1 W1 A2 W2 ->
  idty B1 W1 B2 W2 -> type.
%mode idty-inj-arr +D1 -D2 -D3.
- : idty-inj-arr idty/refl idty/refl idty/refl.
%worlds () (idty-inj-arr _ _ _).
%total {} (idty-inj-arr _ _ _).

of-unique : of M T1 W1 -> of M T2 W2 -> idty T1 W1 T2 W2 -> type.
%mode of-unique +D1 +D2 -E.
- : of-unique D D idty/refl.
- : of-unique of-ztup of-ztup idty/refl.
- : of-unique (of-lam D1) (of-lam D2) AtoBeq
    <- ({e:term} {D : of e A W} of-unique (D1 e D) (D2 e D) Beq)
    <- idty-cong-arr idty/refl Beq AtoBeq.
- : of-unique (of-app (Mof1 : of M (arr A1 B1) W1)
                      (Nof1 : of N A1 W1))
              (of-app (Mof2 : of M (arr A2 B2) W2)
                      (Nof2 : of N A2 W2))
              Beq
    <- of-unique Mof1 Mof2 AtoBeq
    <- idty-inj-arr AtoBeq _ Beq.
%worlds (var-of) (of-unique _ _ _).
%total D (of-unique D _ _).



