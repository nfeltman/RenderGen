%{ liftr.elf }%

%% WORLDS
wor : type. %name wor W.
wor1 : wor.
%%wor2 : wor.

%% TYPES
ty : wor -> type. %name ty T.
unit	: ty W.
arr		: ty W -> ty W -> ty W.
%%fut		: ty wor2 -> ty wor1.

%% TERMS
term : type. %name term E.
ztup	: term.
lam		: ty W -> (term -> term) -> term.
app		: term -> term -> term.
%%next	: term -> term.
%%prev	: term -> term.

%% TYPING JUDGMENT
of : term -> ty W -> type. %name of Dof.
%% (not sure if this is needed for now) mode of +E -T +W.
of-ztup	: of ztup unit.
of-lam	: of (lam A ([x] M x)) (arr A B)
			<- ({x: term} of x A -> of (M x) B).
of-app	: of (app E1 E2) B
			<- of E2 A
			<- of E1 (arr A B).
%%of-next	: of (next E) (fut A)
%%			<- of E A.
%%of-prev	: of (prev E) A
%%			<- of E (fut A).

%% REDUCTION JUDGMENT
red : term -> term -> type. %name red Dred.
%mode red +E -V.
red-ztup : red ztup ztup.
red-lam		: red (lam A M) (lam A M).
red-app		: red (app E1 E2) V
				<- red E2 V2
				<- red E1 (lam A ([x] M x))
				<- red (M V2) V.
%%red-next	: red (next E) (next V)
%%				<- red E V.
%%red-prev	: red (prev E) V
%%				<- red E (next V).

%% VALUE JUDGMENT
pval : term -> type. %name pval Dpval.
pval-ztup	: pval ztup.
pval-lam	: pval (lam _ _).
%%pval-next	: pval (next E) wor1
%%				<- pval E wor2.
             
%% PRESERVATION AND EVALUATION
pres : red E V -> of E (A : ty W) -> pval V -> of V A -> type.
%mode pres +T1 +R -V -T2.
pres-ztup	: pres red-ztup of-ztup pval-ztup of-ztup.
pres-lam	: pres red-lam (of-lam DofM) pval-lam (of-lam DofM).  
pres-app	: pres (red-app DredM DredE1 DredE2) (of-app DofE1 DofE2) DvalV3 DofV3
				<- pres DredE1 DofE1 pval-lam (of-lam DofM) %% inversion
				<- pres DredE2 DofE2 _ DofV2
				<- pres DredM (DofM V2 DofV2) DvalV3 DofV3.
%%pres-next	: pres (red-next Dred) (of-next DofE) (pval-next DvalV) (of-next DofV) 
%%				<- pres Dred DofE DvalV DofV.
%%pres-prev	: pres (red-prev Dred) (of-prev DofE) DvalV DofV 
%%				<- pres Dred DofE (pval-next DvalV) (of-next DofV). %% inversion

%worlds () (pres _ _ _ _).
%%total Dred (pres Dred _ _ _).
             