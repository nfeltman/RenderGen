%{ liftr.elf }%

%% WORLDS
wor : type. %name wor W.
wor1 : wor.
%%wor2 : wor.

%% TYPES
ty : type. %name ty T.
unit  : ty.
arr    : ty -> ty -> ty.
%%fut    : ty wor2 -> ty wor1.

%% TERMS
term : type. %name term E.
ztup  : wor -> term.
%% annotate base constants with their world
lam    : ty -> wor -> (term -> term) -> term.
app    : term -> term -> term.
%%next  : term -> term.
%%prev  : term -> term.

%% TYPING JUDGMENT
of : term -> ty -> wor -> type. %name of Dof.
of-ztup : of (ztup W) unit W.
of-lam  : of (lam A W ([x] M x)) (arr A B) W
      <- ({x: term} of x A W -> of (M x) B W).
of-app  : of (app E1 E2) B W
      <- of E2 A W
      <- of E1 (arr A B) W.
%%of-next  : of (next E) (fut A)
%%      <- of E A.
%%of-prev  : of (prev E) A
%%      <- of E (fut A).

%block var-of : some {A : ty} {W : wor} block {x:term} {_ : of x A W}.
%worlds (var-of) (of _ _ _).
%unique of +E -T -W.

%% UNIQUENESS OF TYPING
idty : ty -> wor -> ty -> wor -> type.
idty/refl : idty T W T W.

idty-cong-arr :
  idty A1 W1 A2 W2 ->
  idty B1 W1 B2 W2 ->
  idty (arr A1 B1) W1 (arr A2 B2) W2 -> type.
%mode idty-cong-arr +D1 +D2 -D3.
- : idty-cong-arr idty/refl idty/refl idty/refl.
%worlds () (idty-cong-arr _ _ _).
%total {} (idty-cong-arr _ _ _).

idty-inj-arr :
  idty (arr A1 B1) W1 (arr A2 B2) W2 ->
  idty A1 W1 A2 W2 ->
  idty B1 W1 B2 W2 -> type.
%mode idty-inj-arr +D1 -D2 -D3.
- : idty-inj-arr idty/refl idty/refl idty/refl.
%worlds () (idty-inj-arr _ _ _).
%total {} (idty-inj-arr _ _ _).

of-unique : of M T1 W1 -> of M T2 W2 -> idty T1 W1 T2 W2 -> type.
%mode of-unique +D1 +D2 -E.
- : of-unique D D idty/refl.
- : of-unique of-ztup of-ztup idty/refl.
- : of-unique (of-lam D1) (of-lam D2) AtoBeq
    <- ({e:term} {D : of e A W} of-unique (D1 e D) (D2 e D) Beq)
    <- idty-cong-arr idty/refl Beq AtoBeq.
- : of-unique (of-app (Mof1 : of M (arr A1 B1) W1)
                      (Nof1 : of N A1 W1))
              (of-app (Mof2 : of M (arr A2 B2) W2)
                      (Nof2 : of N A2 W2))
              Beq
    <- of-unique Mof1 Mof2 AtoBeq
    <- idty-inj-arr AtoBeq _ Beq.
%worlds (var-of) (of-unique _ _ _).
%total D (of-unique D _ _).

%% REDUCTION JUDGMENT
red : term -> term -> type. %name red Dred.
%mode red +E -V.
red-ztup : red (ztup W) (ztup W).
red-lam  : red (lam A W M) (lam A W M).
red-app  : red (app E1 E2) V
        <- red E2 V2
        <- red E1 (lam A W ([x] M x))
        <- red (M V2) V.
%%red-next  : red (next E) (next V)
%%        <- red E V.
%%red-prev  : red (prev E) V
%%        <- red E (next V).

%% VALUE JUDGMENT
pval : term -> type. %name pval Dpval.
pval-ztup  : pval (ztup _).
pval-lam  : pval (lam _ _ _).
%%pval-next  : pval (next E) wor1
%%        <- pval E wor2.
             
%% PRESERVATION AND EVALUATION
pres : red E V -> of E A W -> pval V -> of V A W -> type.
%mode pres +T1 +R -V -T2.
pres-ztup : pres red-ztup of-ztup pval-ztup of-ztup.
pres-lam  : pres red-lam (of-lam DofM) pval-lam (of-lam DofM).  
pres-app  : pres (red-app DredM DredE1 DredE2) (of-app DofE1 DofE2) DvalV3 DofV3
        <- pres (DredE1 : red E1 (lam A W M)) DofE1 pval-lam ((of-lam DofM) : of (lam A W M) (arr A B) W) %% inversion
        <- pres (DredE2 : red E2 V2)        DofE2 _ DofV2
        <- pres (DredM : red (M V2) V3)     (DofM V2 DofV2) DvalV3 DofV3.
%%pres-next  : pres (red-next Dred) (of-next DofE) (pval-next DvalV) (of-next DofV) 
%%        <- pres Dred DofE DvalV DofV.
%%pres-prev  : pres (red-prev Dred) (of-prev DofE) DvalV DofV 
%%        <- pres Dred DofE (pval-next DvalV) (of-next DofV). %% inversion

%worlds () (pres _ _ _ _).
%total Dred (pres Dred _ _ _).

