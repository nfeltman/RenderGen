%{ liftr.elf }%

%% TYPES
ty : type. %name ty T.
unit	: ty.
prod  : ty -> ty -> ty.
sum	  : ty -> ty -> ty.
arr		: ty -> ty -> ty.
rec   : (ty -> ty) -> ty.
fut		: ty -> ty.
curr	: ty -> ty.
%freeze ty.

%% NORMALITY LEVELS
normality : type. %name normality N.
norm : normality.
comp : normality.

%% LANG (little trick that makes translations a lot easier later)
lang : type. %name lang L.
lang0 : lang.
lang1 : lang.
lang2 : lang.
%freeze lang.
%block lang-block : block {L : lang}.

%% TERMS
term : lang -> type. %name term E.
ztup  : term L.
tup   : term L -> term L -> term L.
pi1   : term L -> term L.
pi2   : term L -> term L.
inj1  : term L -> term L.
inj2  : term L -> term L.
case  : term L -> (term L -> term L) -> (term L -> term L) -> term L.
roll  : term L -> term L.
unrl  : term L -> term L.
lam   : (term L -> term L) -> term L.
app   : term L -> term L -> term L.
let   : term L -> (term L -> term L) -> term L.
lett  : term L -> (term L -> term L -> term L) -> term L.
next  : term L -> term L.
%{letn  : term L -> (term L -> term L) -> term L.}%
prev  : term L -> term L.
grnd  : term L -> term L.
letg  : term L -> (term L -> term L) -> term L.
caseg : term L -> (term L -> term L) -> (term L -> term L) -> term L.
exv   : term L -> term L.
fix   : (term L -> term L) -> term L.

%block term-block : some {L : lang} block {x : term L}.
%worlds (term-block) (term _).
%freeze term.

%block abstr-term-block : block {x : {L : lang} term L}.
%block general-term-block = (lang-block | term-block | abstr-term-block).

%% HOLES
lett-hole = ([x] lett x M).
tup-hole-1 = ([x] tup x E).
tup-hole-2 = ([x] tup E x).

%% TERM EQUALITY
eq-term  : term L -> term L -> type. %name eq-term Deq.
eq-term_ : eq-term E E.

%abbrev `eq-term_ = ([x : term L] eq-term_ : eq-term E E).
%abbrev ``eq-term_ = ([x : term L][y : term L] eq-term_ : eq-term E E).

%% FALSE YIELDS ANY EQUALITY
false\eq-term : false -> {E} {E'} eq-term E E' -> type.
%mode false\eq-term +E +E' +Dfalse -Deq.
%worlds (term-block) (false\eq-term _ _ _ _).
%total {} (false\eq-term _ _ _ _).

eq-term-sym : eq-term A B -> eq-term B A -> type.
%mode eq-term-sym +D1 -D2.
- : eq-term-sym eq-term_ eq-term_.
%worlds (term-block) (eq-term-sym _ _).
%total {} (eq-term-sym _ _).

eq-term-trans : eq-term A B -> eq-term B C -> eq-term A C -> type.
%mode eq-term-trans +D1 +D2 -D3.
- : eq-term-trans eq-term_ eq-term_ eq-term_.
%worlds (term-block) (eq-term-trans _ _ _).
%total {} (eq-term-trans _ _ _).

%% TERM EQUALITY IS A CONGRUENCE
eq-cong/lam : ({x} eq-term (M x) (M' x)) -> eq-term (lam M) (lam M') -> type.
%mode eq-cong/lam +Deq -Deq'.
- : eq-cong/lam ([x] eq-term_) eq-term_.
%worlds (term-block) (eq-cong/lam _ _).
%total {} (eq-cong/lam _ _).

eq-cong/fix : ({x} eq-term (M x) (M' x)) -> eq-term (fix M) (fix M') -> type.
%mode eq-cong/fix +Deq -Deq'.
- : eq-cong/fix ([x] eq-term_) eq-term_.
%worlds (term-block) (eq-cong/fix _ _).
%total {} (eq-cong/fix _ _).

eq-cong/case : eq-term E E' -> 
        ({x} eq-term (M x) (M' x)) -> 
        ({x} eq-term (N x) (N' x)) -> 
        eq-term (case E M N) (case E' M' N') -> type.
%mode eq-cong/case +Deq +Deq1 +Deq2 -Deq'.
- : eq-cong/case eq-term_ ([x] eq-term_) ([x] eq-term_) eq-term_.
%worlds (term-block) (eq-cong/case _ _ _ _).
%total {} (eq-cong/case _ _ _ _).

eq-cong/caseg : eq-term E E' -> 
        ({x} eq-term (M x) (M' x)) -> 
        ({x} eq-term (N x) (N' x)) -> 
        eq-term (caseg E M N) (caseg E' M' N') -> type.
%mode eq-cong/caseg +Deq +Deq1 +Deq2 -Deq'.
- : eq-cong/caseg eq-term_ ([x] eq-term_) ([x] eq-term_) eq-term_.
%worlds (term-block) (eq-cong/caseg _ _ _ _).
%total {} (eq-cong/caseg _ _ _ _).

eq-cong/1 : {F : (term L -> term L) -> term L} ({x} eq-term (M x) (M' x)) -> eq-term (F M) (F M') -> type.
%mode eq-cong/1 +F +Deq -Deq'.
- : eq-cong/1 F ([x] eq-term_) eq-term_.
%worlds (term-block) (eq-cong/1 _ _ _).
%total {} (eq-cong/1 _ _ _).

eq-cong/let : eq-term E1 E1' -> ({x} eq-term (E2 x) (E2' x)) -> eq-term (let E1 E2) (let E1' E2') -> type.
%mode eq-cong/let +Deq +E -Deq'.
- : eq-cong/let eq-term_ _ eq-term_.
%worlds (term-block) (eq-cong/let _ _ _).
%total {} (eq-cong/let _ _ _).

eq-cong/letg : eq-term E1 E1' -> ({x} eq-term (E2 x) (E2' x)) -> eq-term (letg E1 E2) (letg E1' E2') -> type.
%mode eq-cong/letg +Deq +E -Deq'.
- : eq-cong/letg eq-term_ _ eq-term_.
%worlds (term-block) (eq-cong/letg _ _ _).
%total {} (eq-cong/letg _ _ _).

eq-cong/lett : eq-term E1 E1' -> ({x}{y} eq-term (E2 x y) (E2' x y)) -> eq-term (lett E1 E2) (lett E1' E2') -> type.
%mode eq-cong/lett +Deq +E -Deq'.
- : eq-cong/lett eq-term_ _ eq-term_.
%worlds (term-block) (eq-cong/lett _ _ _).
%total {} (eq-cong/lett _ _ _).

eq-cong : {F : term L -> term L} eq-term E E' -> eq-term (F E) (F E') -> type.
%mode eq-cong +F +Deq -Deq'.
- : eq-cong _ eq-term_ eq-term_.
%worlds (general-term-block) (eq-cong _ _ _).
%total {} (eq-cong _ _ _).

eq-cong2 : {F : term L -> term L -> term L} eq-term E1 E1' -> eq-term E2 E2' -> eq-term (F E1 E2) (F E1' E2') -> type.
%mode eq-cong2 +F +Deq1 +De2 -Deq'.
- : eq-cong2 _ eq-term_ eq-term_ eq-term_.
%worlds (term-block) (eq-cong2 _ _ _ _).
%total {} (eq-cong2 _ _ _ _).

eq-cong-hole : ({x:term L} eq-term (M x : term L) (M' x)) ->  eq-term E E' -> eq-term (M E) (M' E') -> type.
%mode eq-cong-hole +F +Deq -Deq'.
- : eq-cong-hole ([x] eq-term_) eq-term_ eq-term_.
%worlds (general-term-block) (eq-cong-hole _ _ _).
%total {} (eq-cong-hole _ _ _).

eq-cong/0/2 : {F : term L -> (term L -> term L -> term L) -> term L} 
  (eq-term E1 E1') -> 
  ({x}{y} eq-term (E2 x y) (E2' x y)) -> 
  (eq-term (F E1 E2) (F E1' E2')) -> type.
%mode eq-cong/0/2 +F +Deq1 +De2 -Deq'.
- : eq-cong/0/2 _ eq-term_ ([x][y] eq-term_) eq-term_.
%worlds (term-block) (eq-cong/0/2 _ _ _ _).
%total {} (eq-cong/0/2 _ _ _ _).

eq-cong/1/1 : {F : (term L -> term L) -> (term L -> term L) -> term L} 
  ({x} eq-term (E1 x) (E1' x)) -> 
  ({y} eq-term (E2 y) (E2' y)) -> 
  (eq-term (F E1 E2) (F E1' E2')) -> type.
%mode eq-cong/1/1 +F +Deq1 +De2 -Deq'.
- : eq-cong/1/1 _ ([x] eq-term_) ([y] eq-term_) eq-term_.
%worlds (term-block) (eq-cong/1/1 _ _ _ _).
%total {} (eq-cong/1/1 _ _ _ _).

%% TERM EQUALITY IS WHATEVER THE OPPOSITE OF A CONGRUENCE IS

eq-gnoc/tup : eq-term (tup E1 E2) (tup E1' E2') -> eq-term E1 E1' -> eq-term E2 E2' ->  type.
%mode eq-gnoc/tup +Deq1 -De2 -Deq'.
- : eq-gnoc/tup eq-term_ eq-term_ eq-term_.
%worlds (term-block) (eq-gnoc/tup _ _ _).
%total {} (eq-gnoc/tup _ _ _).

eq-gnoc/lam : eq-term (lam M) (lam M') -> ({x} eq-term (M x) (M' x)) -> type.
%mode eq-gnoc/lam +Deq1 -Deq'.
- : eq-gnoc/lam eq-term_ ([x] eq-term_).
%worlds (term-block) (eq-gnoc/lam _ _).
%total {} (eq-gnoc/lam _ _).


%% TYPE IDENTITY 
eq-ty : ty -> ty -> type.
eq-ty_ : eq-ty T T.

eq-ty-sym : eq-ty A B -> eq-ty B A -> type.
%mode eq-ty-sym +D1 -D2.
- : eq-ty-sym eq-ty_ eq-ty_.
%worlds () (eq-ty-sym _ _).
%total {} (eq-ty-sym _ _).

eq-ty-cong :
  {F : ty -> ty -> ty}
  eq-ty A1 A2 ->
  eq-ty B1 B2 ->
  eq-ty (F A1 B1) (F A2 B2) -> type.
%mode eq-ty-cong +D1 +D2 +F -D3.
- : eq-ty-cong _ eq-ty_ eq-ty_ eq-ty_.
%worlds () (eq-ty-cong _ _ _ _).
%total {} (eq-ty-cong _ _ _ _).

eq-ty-cong3 :
  {F : ty -> ty -> ty -> ty}
  eq-ty A1 A2 ->
  eq-ty B1 B2 ->
  eq-ty C1 C2 ->
  eq-ty (F A1 B1 C1) (F A2 B2 C2) -> type.
%mode eq-ty-cong3 +D1 +D2 +D3 +F -D3.
- : eq-ty-cong3 _ eq-ty_ eq-ty_ eq-ty_ eq-ty_.
%worlds () (eq-ty-cong3 _ _ _ _ _).
%total {} (eq-ty-cong3 _ _ _ _ _).


eq-ty-inj-arr :
  eq-ty (arr A1 B1) (arr A2 B2) ->
  eq-ty A1 A2 ->
  eq-ty B1 B2 -> type.
%mode eq-ty-inj-arr +D1 -D2 -D3.
- : eq-ty-inj-arr eq-ty_ eq-ty_ eq-ty_.
%worlds () (eq-ty-inj-arr _ _ _).
%total {} (eq-ty-inj-arr _ _ _).

%% LANGUAGE EQUALITY
eq-lang : lang -> lang -> type.
eq-lang_ : eq-lang L L.
neq-lang : lang -> lang -> type.
neq-lang_01 : neq-lang lang0 lang1.
neq-lang_02 : neq-lang lang0 lang2.
neq-lang_10 : neq-lang lang1 lang0.
neq-lang_12 : neq-lang lang1 lang2.
neq-lang_20 : neq-lang lang2 lang0.
neq-lang_21 : neq-lang lang2 lang1.

%% THINGS CAN'T BE BOTH EQUAL AND NOT-EQUAL
excl-eq-neq-lang : eq-lang L1 L2 -> neq-lang L1 L2 -> false -> type.
%mode excl-eq-neq-lang +Deq +Dneq -Dfalse.
%worlds () (excl-eq-neq-lang _ _ _).
%total {} (excl-eq-neq-lang _ _ _).


%% TERMS CANNOT DEPEND ON TERMS OF A DIFFERENT LANGUAGE
lang-indep : neq-lang L1 L2 -> {E : term L1 -> term L2} ({x : term L1} eq-term (E x) E') -> type.
%mode lang-indep +Dneq +E -Deq.
- : lang-indep Dneq _ ([x] eq-term_).
- : lang-indep Dneq ([x] tup (E1 x) (E2 x)) Deq
  <- lang-indep Dneq E1 Deq1
  <- lang-indep Dneq E2 Deq2
  <- {x} eq-cong2 tup (Deq1 x) (Deq2 x) (Deq x).
- : lang-indep Dneq ([x] pi1 (E x)) Deq'
  <- lang-indep Dneq E Deq
  <- {x} eq-cong pi1 (Deq x) (Deq' x).
- : lang-indep Dneq ([x] pi2 (E x)) Deq'
  <- lang-indep Dneq E Deq
  <- {x} eq-cong pi2 (Deq x) (Deq' x).
- : lang-indep Dneq ([x] inj1 (E x)) Deq'
  <- lang-indep Dneq E Deq
  <- {x} eq-cong inj1 (Deq x) (Deq' x).
- : lang-indep Dneq ([x] inj2 (E x)) Deq'
  <- lang-indep Dneq E Deq
  <- {x} eq-cong inj2 (Deq x) (Deq' x).
- : lang-indep Dneq ([x] case (E x) ([y] M1 y x) ([y] M2 y x)) Deq
  <- lang-indep Dneq E DeqE
  <- ({y} lang-indep Dneq (M1 y) ([x] DeqM1 x y))
  <- ({y} lang-indep Dneq (M2 y) ([x] DeqM2 x y))
  <- {x} eq-cong/case (DeqE x) (DeqM1 x) (DeqM2 x) (Deq x).
- : lang-indep Dneq ([x] roll (E x)) Deq'
  <- lang-indep Dneq E Deq
  <- {x} eq-cong roll (Deq x) (Deq' x).
- : lang-indep Dneq ([x] unrl (E x)) Deq'
  <- lang-indep Dneq E Deq
  <- {x} eq-cong unrl (Deq x) (Deq' x).
- : lang-indep Dneq ([x] lam ([y] E y x)) Deq'
  <- ({y} lang-indep Dneq (E y) ([x] Deq x y))
  <- {x} eq-cong/lam (Deq x) (Deq' x).
- : lang-indep Dneq ([x] app (E1 x) (E2 x)) Deq
  <- lang-indep Dneq E1 Deq1
  <- lang-indep Dneq E2 Deq2
  <- {x} eq-cong2 app (Deq1 x) (Deq2 x) (Deq x).
- : lang-indep Dneq ([x] fix ([y] E y x)) Deq'
  <- ({y} lang-indep Dneq (E y) ([x] Deq x y))
  <- {x} eq-cong/fix (Deq x) (Deq' x).
- : lang-indep Dneq ([x] let (E x) ([y] M y x)) Deq
  <- lang-indep Dneq E DeqE
  <- ({y} lang-indep Dneq (M y) ([x] DeqM x y))
  <- {x} eq-cong/let (DeqE x) (DeqM x) (Deq x).
- : lang-indep Dneq ([x] letg (E x) ([y] M y x)) Deq
  <- lang-indep Dneq E DeqE
  <- ({y} lang-indep Dneq (M y) ([x] DeqM x y))
  <- {x} eq-cong/letg (DeqE x) (DeqM x) (Deq x).
- : lang-indep Dneq ([x] lett (E x) ([y][z] M y z x)) Deq
  <- lang-indep Dneq E DeqE
  <- ({y}{z} lang-indep Dneq (M y z) ([x] DeqM x y z))
  <- {x} eq-cong/lett (DeqE x) (DeqM x) (Deq x).
- : lang-indep Dneq ([x] next (E x)) Deq'
  <- lang-indep Dneq E Deq
  <- {x} eq-cong next (Deq x) (Deq' x).
- : lang-indep Dneq ([x] prev (E x)) Deq'
  <- lang-indep Dneq E Deq
  <- {x} eq-cong prev (Deq x) (Deq' x).
- : lang-indep Dneq ([x] exv (E x)) Deq'
  <- lang-indep Dneq E Deq
  <- {x} eq-cong exv (Deq x) (Deq' x).
- : lang-indep Dneq ([x] grnd (E x)) Deq'
  <- lang-indep Dneq E Deq
  <- {x} eq-cong grnd (Deq x) (Deq' x).
- : lang-indep Dneq ([x] caseg (E x) ([y] M1 y x) ([y] M2 y x)) Deq
  <- lang-indep Dneq E DeqE
  <- ({y} lang-indep Dneq (M1 y) ([x] DeqM1 x y))
  <- ({y} lang-indep Dneq (M2 y) ([x] DeqM2 x y))
  <- {x} eq-cong/caseg (DeqE x) (DeqM1 x) (DeqM2 x) (Deq x).

%worlds (term-block) (lang-indep _ _ _).
%total (D) (lang-indep _ D _).


lang-indep2 : neq-lang L1 L3 -> neq-lang L2 L3 -> {E : term L1 -> term L2 -> term L3} ({x : term L1}{y : term L2} eq-term (E x y) E') -> type.
%mode lang-indep2 +Dneq1 +Dneq2 +E -Deq.
- : lang-indep2 Dneq1 Dneq2 E_2 Deq
    <- ({y} lang-indep Dneq1 ([x] E_2 x y) ([x] Deq1 x y : eq-term (E_2 x y) (E_1 y))) 
    <- lang-indep Dneq2 E_1 ([y] Deq2 y : eq-term (E_1 y) E)
    <- ({x}{y} eq-term-trans (Deq1 x y) (Deq2 y) (Deq x y : eq-term (E_2 x y) E)).
%worlds (term-block) (lang-indep2 _ _ _ _).
%total (D) (lang-indep2 _ _ D _).

%{
convert-hole : {M : ({L1} term L1) -> {L2} term L2} {N : {L} term L -> term L} ({x : {L'} term L'}{L} eq-term (M x L) (N L (x L))) -> type.
%mode convert-hole +M -N -Deq.

- : convert-hole ([xf] M) ([l][x] M l) ([xf][l] eq-term_).
- : convert-hole ([xf][l] pi1 (M xf l)) ([l][x] pi1 (N l x)) Deq'
    <- convert-hole M N Deq
    <- {xf : {L'} term L'}{l : lang} eq-cong pi1 (Deq xf l) (Deq' xf l).
- : convert-hole ([xf][l] pi2 (M xf l)) ([l][x] pi2 (N l x)) Deq'
    <- convert-hole M N Deq
    <- {xf : {L'} term L'}{l : lang} eq-cong pi2 (Deq xf l) (Deq' xf l).

- : convert-hole ([xf][l] lam ([y : term l] M y xf l)) ([l][x] lam ([y] N l x y)) Deq'
    <- ({y : {L'} term L'} convert-hole ([xf][l] M (y l) xf l) ([l][x] N* l x y) ([xf][l] Deq xf l y))
    <- ({l}{x:term l} convert-hole (N* l x) (N l x) )
    <- {xf : {L'} term L'}{l : lang} eq-cong/lam (Deq xf l) (Deq' xf l).

%worlds () (convert-hole _ _ _).
%total (D) (convert-hole D _ _).

lang-convert_12-total : {E : term lang1} {F : {L} term L} eq-term E (F lang1) -> type.
%mode lang-convert_12-total +E -F -Deq.
- : lang-convert_12-total ztup ([l] ztup) eq-term_.
- : lang-convert_12-total (tup E1 E2) ([l] tup (F1 l) (F2 l)) Deq
    <- lang-convert_12-total E1 F1 Deq1
    <- lang-convert_12-total E2 F2 Deq2
    <- eq-cong2 tup Deq1 Deq2 Deq.
- : lang-convert_12-total (pi1 E) ([l] pi1 (F l)) Deq'
    <- lang-convert_12-total E F Deq
    <- eq-cong pi1 Deq Deq'.
- : lang-convert_12-total (pi2 E) ([l] pi2 (F l)) Deq'
    <- lang-convert_12-total E F Deq
    <- eq-cong pi2 Deq Deq'.
- : lang-convert_12-total (lam M) ([l] lam ([x : term l] MF l ))
    <- {xf : {L'} term L'} {L : lang} lang-convert_12-total (xf lang1) xf eq-term_ -> 
      lang-convert_12-total (M (xf lang1)) ([l] MF (xf l)) (Deq xf).
- : lang-convert_12-total (app E1 E2) (conv-gen2 ([l] app) Dconv1' Dconv2')
    <- lang-convert_12-total E2 Dconv2'
    <- lang-convert_12-total E1 Dconv1'.
- : lang-convert_12-total (let E M) (conv-let Dconv' DconvM)
    <- ({x}{x2}{convx : lang-convert x x2} lang-convert_12-total x convx -> 
        lang-convert_12-total (M x) (DconvM x x2 convx))
    <- lang-convert_12-total E Dconv'.
- : lang-convert_12-total (lett E M) (conv-lett Dconv' DconvM)
    <- ({x}{x2}{convx : lang-convert x x2} lang-convert_12-total x convx -> 
       {y}{y2}{convy : lang-convert y y2} lang-convert_12-total y convy ->  
       lang-convert_12-total (M x y) (DconvM x x2 convx y y2 convy))
    <- lang-convert_12-total E Dconv'.
- : lang-convert_12-total (next E) (conv-gen1 ([l] next) Dconv')
    <- lang-convert_12-total E Dconv'.
- : lang-convert_12-total (prev E) (conv-gen1 ([l] prev) Dconv')
    <- lang-convert_12-total E Dconv'.
- : lang-convert_12-total (grnd E) (conv-gen1 ([l] grnd) Dconv')
    <- lang-convert_12-total E Dconv'.
- : lang-convert_12-total (exv E) (conv-gen1 ([l] exv) Dconv')
    <- lang-convert_12-total E Dconv'.
%block convert-total-block : block {x1 : term lang1} {x2 : term lang2} {Dconv : lang-convert x1 x2} {_ : lang-convert_12-total x1 Dconv}.
%worlds (convert-total-block) (lang-convert_12-total _ _ _).
%total (D) (lang-convert_12-total D _ _).
}%


%% TERMS CANNOT DEPEND ON TERMS OF A DIFFERENT LANGUAGE
lang-convert : term L1 -> {L2} term L2 -> type. %name lang-convert Dconv.
conv-lam : lang-convert (lam M) L2 (lam (M' (ztup : term L1)))
    <- {x:term L1}{x': term L2} lang-convert x L2 x' -> lang-convert (M x) L2 (M' x x' : term L2).
conv-fix : lang-convert (fix M) L2 (fix (M' (ztup : term L1)))
    <- {x:term L1}{x': term L2} lang-convert x L2 x' -> lang-convert (M x) L2 (M' x x' : term L2).
conv-case : lang-convert (case E M N) L2 (case E' (M' (ztup : term L1)) (N' (ztup : term L1)))
    <- ({x:term L1}{x':term L2} lang-convert x L2 x' -> lang-convert (N x) L2 (N' x x' : term L2))
    <- ({x:term L1}{x':term L2} lang-convert x L2 x' -> lang-convert (M x) L2 (M' x x' : term L2))
    <- lang-convert E L2 E'.
conv-caseg : lang-convert (caseg E M N) L2 (caseg E' (M' (ztup : term L1)) (N' (ztup : term L1)))
    <- ({x:term L1}{x':term L2} lang-convert x L2 x' -> lang-convert (N x) L2 (N' x x' : term L2))
    <- ({x:term L1}{x':term L2} lang-convert x L2 x' -> lang-convert (M x) L2 (M' x x' : term L2))
    <- lang-convert E L2 E'.
conv-let : lang-convert (let E M) L2 (let E' (M' (ztup : term L1)))
    <- ({x:term L1}{x':term L2} lang-convert x L2 x' -> lang-convert (M x) L2 (M' x x' : term L2))
    <- lang-convert E L2 E'.
conv-lett : lang-convert (lett E M) L2 (lett E' (M' (ztup : term L1) (ztup : term L1)))
    <- ({x:term L1}{x':term L2} lang-convert x L2 x' -> 
        {y:term L1}{y':term L2} lang-convert y L2 y' -> 
        lang-convert (M x y) L2 (M' x y x' y' : term L2))
    <- lang-convert E L2 E'.
conv-ztup : lang-convert ztup _ ztup.
conv-pi1 : lang-convert (pi1 E) _ (pi1 E')
    <- lang-convert E _ E'.
conv-pi2 : lang-convert (pi2 E) _ (pi2 E')
    <- lang-convert E _ E'.
conv-inj1 : lang-convert (inj1 E) _ (inj1 E')
    <- lang-convert E _ E'.
conv-inj2 : lang-convert (inj2 E) _ (inj2 E')
    <- lang-convert E _ E'.
conv-next : lang-convert (next E) _ (next E')
    <- lang-convert E _ E'.
conv-prev : lang-convert (prev E) _ (prev E')
    <- lang-convert E _ E'.
conv-roll : lang-convert (roll E) _ (roll E')
    <- lang-convert E _ E'.
conv-unrl : lang-convert (unrl E) _ (unrl E')
    <- lang-convert E _ E'.
conv-grnd : lang-convert (grnd E) _ (grnd E')
    <- lang-convert E _ E'.
conv-letg : lang-convert (letg E M) L2 (letg E' (M' (ztup : term L1)))
    <- ({x:term L1}{x':term L2} lang-convert x L2 x' -> lang-convert (M x) L2 (M' x x' : term L2))
    <- lang-convert E L2 E'.
conv-exv : lang-convert (exv E) _ (exv E')
    <- lang-convert E _ E'.

conv-tup : lang-convert (tup E1 E2) _ (tup E1' E2')
    <- lang-convert E2 _ E2'
    <- lang-convert E1 _ E1'.
conv-app : lang-convert (app E1 E2) _ (app E1' E2')
    <- lang-convert E2 _ E2'
    <- lang-convert E1 _ E1'.
%block convert-block : some {L1} {L2} block {x1 : term L1} {x2 : term L2} {_ : lang-convert x1 L2 x2}.
%worlds (convert-block) (lang-convert _ _ _).
%unique lang-convert +E +L -1E'.

conv-tupzz = conv-tup conv-ztup conv-ztup.

%%unique lang-convert +E -1E'.
%{
conv-cong : {F : {L} term L -> term L} lang-convert (E : term L1) (E' : term L2) -> lang-convert (F L1 E) (F L2 E') -> type.
%mode conv-cong +F +Dconv -Dconv'.
- : conv-cong F (conv-gen0 E) (conv-gen0 ([l] F l (E l))).
%worlds (term-block) (conv-cong _ _ _).
%total {} (conv-cong _ _ _).

conv-cong2 : {F : {L} term L -> term L -> term L} lang-convert (E1 : term L1) (E1' : term L2) -> lang-convert E2 E2' -> lang-convert (F L1 E1 E2) (F L2 E1' E2') -> type.
%mode conv-cong2 +F +Dconv1 +De2 -Dconv'.
- : conv-cong2 F (conv-gen0 E1) (conv-gen0 E2) (conv-gen0 ([l] F l (E1 l) (E2 l))).
%worlds (term-block) (conv-cong2 _ _ _ _).
%total {} (conv-cong2 _ _ _ _).

conv-cong/lam : ({x : {L} term L} lang-convert (M (x lang1) : term lang1) (M' (x lang2) : term lang2)) -> lang-convert (lam M) (lam M') -> type.
%mode conv-cong/lam +Dconv -Dconv'.
- : conv-cong/lam ([x] conv-gen0 ([l] M l (x) : term l)) (conv-gen0 ([l:lang] lam ([x:term l] M l x))).
%worlds (term-block) (conv-conglam _ _).
%total {} (conv-conglam _ _).}%

lang-convert_12-total : {E : term lang1} lang-convert E lang2 (E2 : term lang2) -> type.
%mode lang-convert_12-total +E -E'.
- : lang-convert_12-total ztup conv-ztup.
- : lang-convert_12-total (tup E1 E2) (conv-tup Dconv1' Dconv2')
    <- lang-convert_12-total E2 Dconv2'
    <- lang-convert_12-total E1 Dconv1'.
- : lang-convert_12-total (pi1 E) (conv-pi1 Dconv')
    <- lang-convert_12-total E Dconv'.
- : lang-convert_12-total (pi2 E) (conv-pi2 Dconv')
    <- lang-convert_12-total E Dconv'.
- : lang-convert_12-total (inj1 E) (conv-inj1 Dconv')
    <- lang-convert_12-total E Dconv'.
- : lang-convert_12-total (inj2 E) (conv-inj2 Dconv')
    <- lang-convert_12-total E Dconv'.
- : lang-convert_12-total (case E M N) (conv-case Dconv' DconvM DconvN)
    <- ({x}{x2}{convx : lang-convert x lang2 x2} lang-convert_12-total x convx -> 
        lang-convert_12-total (M x) (DconvM x x2 convx))
    <- ({x}{x2}{convx : lang-convert x lang2 x2} lang-convert_12-total x convx -> 
        lang-convert_12-total (N x) (DconvN x x2 convx))
    <- lang-convert_12-total E Dconv'.
- : lang-convert_12-total (roll E) (conv-roll Dconv')
    <- lang-convert_12-total E Dconv'.
- : lang-convert_12-total (unrl E) (conv-unrl Dconv')
    <- lang-convert_12-total E Dconv'.
- : lang-convert_12-total (lam M) (conv-lam DconvM)
    <- ({x}{x2}{convx : lang-convert x lang2 x2} lang-convert_12-total x convx -> 
        lang-convert_12-total (M x) (DconvM x x2 convx)).
- : lang-convert_12-total (fix M) (conv-fix DconvM)
    <- ({x}{x2}{convx : lang-convert x lang2 x2} lang-convert_12-total x convx -> 
        lang-convert_12-total (M x) (DconvM x x2 convx)).
- : lang-convert_12-total (app E1 E2) (conv-app Dconv1' Dconv2')
    <- lang-convert_12-total E2 Dconv2'
    <- lang-convert_12-total E1 Dconv1'.
- : lang-convert_12-total (let E M) (conv-let Dconv' DconvM)
    <- ({x}{x2}{convx : lang-convert x lang2 x2} lang-convert_12-total x convx -> 
        lang-convert_12-total (M x) (DconvM x x2 convx))
    <- lang-convert_12-total E Dconv'.
- : lang-convert_12-total (lett E M) (conv-lett Dconv' DconvM)
    <- ({x}{x2}{convx : lang-convert x lang2 x2} lang-convert_12-total x convx -> 
       {y}{y2}{convy : lang-convert y lang2 y2} lang-convert_12-total y convy ->  
       lang-convert_12-total (M x y) (DconvM x x2 convx y y2 convy))
    <- lang-convert_12-total E Dconv'.
- : lang-convert_12-total (next E) (conv-next Dconv')
    <- lang-convert_12-total E Dconv'.
- : lang-convert_12-total (prev E) (conv-prev Dconv')
    <- lang-convert_12-total E Dconv'.
- : lang-convert_12-total (grnd E) (conv-grnd Dconv')
    <- lang-convert_12-total E Dconv'.
- : lang-convert_12-total (letg E M) (conv-letg Dconv' DconvM)
    <- ({x}{x2}{convx : lang-convert x lang2 x2} lang-convert_12-total x convx -> 
        lang-convert_12-total (M x) (DconvM x x2 convx))
    <- lang-convert_12-total E Dconv'.
- : lang-convert_12-total (exv E) (conv-exv Dconv')
    <- lang-convert_12-total E Dconv'.
- : lang-convert_12-total (caseg E M N) (conv-caseg Dconv' DconvM DconvN)
    <- ({x}{x2}{convx : lang-convert x lang2 x2} lang-convert_12-total x convx -> 
        lang-convert_12-total (M x) (DconvM x x2 convx))
    <- ({x}{x2}{convx : lang-convert x lang2 x2} lang-convert_12-total x convx -> 
        lang-convert_12-total (N x) (DconvN x x2 convx))
    <- lang-convert_12-total E Dconv'.
%block convert-total-block : block {x1 : term lang1} {x2 : term lang2} {Dconv : lang-convert x1 lang2 x2} {_ : lang-convert_12-total x1 Dconv}.
%block convert-total-ignore-block_0 : block {x1 : term lang0}.
%block convert-total-ignore-block_2 : block {x2 : term lang2}.
%block convert-total-ignore-block = (convert-total-ignore-block_0 | convert-total-ignore-block_2).
%worlds (convert-total-block | convert-total-ignore-block) (lang-convert_12-total _ _).
%total (D) (lang-convert_12-total D _).

lang-convert-unique : (lang-convert A L B) -> (lang-convert A L B') -> eq-term B B' -> type.
%mode lang-convert-unique +D1 +D2 -D3.
- : lang-convert-unique _ _ eq-term_.
%worlds (term-block | convert-block) (lang-convert-unique _ _ _).
%total (D) (lang-convert-unique D _ _).

conv-strengthen_12 : 
    ({x:term lang2} lang-convert (A : term lang1) lang2 (B_1 x : term lang2)) -> ({x} eq-term (B_1 x) B) -> type.
%mode conv-strengthen_12 +D1 -D3.
- : conv-strengthen_12 ([x] Dconv_1 x : lang-convert A lang2 (B_1 x)) Deq
    <- lang-convert_12-total A (Dconv : lang-convert A lang2 B)
    <- {x} lang-convert-unique (Dconv_1 x) Dconv (Deq x : eq-term (B_1 x) B).
%worlds (convert-total-block | convert-total-ignore-block) (conv-strengthen_12 _ _).
%total (D) (conv-strengthen_12 D _).

conv-strengthen2_12 : 
    ({x:term lang0}{x2:term lang2} lang-convert (A : term lang1) lang2 (B_2 x x2 : term lang2)) -> 
    ({x}{x2} eq-term (B_2 x x2) B) -> type.
%mode conv-strengthen2_12 +D1 -D3.
- : conv-strengthen2_12 ([x][x2] Dconv_2 x x2 : lang-convert A lang2 (B_2 x x2)) Deq
  <- ({x} conv-strengthen_12 (Dconv_2 x) ([x2] Deq_2 x x2 : eq-term (B_2 x x2) (B_1 x)))
  <- lang-indep neq-lang_02 B_1 ([x] Deq_1 x : eq-term (B_1 x) B)
  <- ({x}{x2} eq-term-trans (Deq_2 x x2) (Deq_1 x) (Deq x x2 : eq-term (B_2 x x2) B)).
%worlds (convert-total-block | convert-total-ignore-block) (conv-strengthen2_12 _ _).
%total (D) (conv-strengthen2_12 D _).

conv-resp : lang-convert E1 L E2 -> eq-term E1 E1' -> eq-term E2 E2' -> lang-convert E1' L E2' -> type.
%mode conv-resp +D1 +D2 +D3 -D3.
- : conv-resp Dof eq-term_ eq-term_ Dof.
%worlds (term-block) (conv-resp _ _ _ _).
%total {} (conv-resp _ _ _ _).