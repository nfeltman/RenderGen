%{ liftr.elf }%

%% WORLDS
wor : type. %name wor W.
wor1 : wor.
wor2 : wor.
%%worM : wor.

%% TYPES
ty : type. %name ty T.
unit	: ty.
prod	: ty -> ty -> ty.
arr		: ty -> ty -> ty.
arr+	: ty -> ty -> ty -> ty.
fut		: ty -> ty.
curr	: ty -> ty.
%freeze ty.

%% TERMS
term : type. %name term E.
ztup  : term.
tup   : term -> term -> term.
pi1   : term -> term.
pi2   : term -> term.
lam   : (term -> term) -> term.
app   : term -> term -> term.
let   : term -> (term -> term) -> term.
lett  : term -> (term -> term -> term) -> term.
next  : term -> term.
letn  : term -> (term -> term) -> term.
prev  : term -> term.
mono  : term -> term.
letm  : term -> (term -> term) -> term.
exv   : term -> term.

%block term-block : block {x : term}.
%worlds (term-block) (term).
%freeze term.

%block just-var : block {x : term}.

%% HOLES
lett-hole = ([x] lett x M).
tup-hole-1 = ([x] tup x E).
tup-hole-2 = ([x] tup E x).

%% TERM EQUALITY
eq-term  : term -> term -> type. %name eq-term Deq.
eq-term_ : eq-term E E.

%abbrev `eq-term_ = ([x : term] eq-term_).
%abbrev ``eq-term_ = ([x : term][y : term] eq-term_).

%% FALSE YIELDS ANY EQUALITY
false\eq-term : false -> {E} {E'} eq-term E E' -> type.
%mode false\eq-term +E +E' +Dfalse -Deq.
%worlds (just-var) (false\eq-term _ _ _ _).
%total {} (false\eq-term _ _ _ _).

%% TERM EQUALITY IS A CONGRUENCE
eq-cong/lam : ({x} eq-term (M x) (M' x)) -> eq-term (lam M) (lam M') -> type.
%mode eq-cong/lam +Deq -Deq'.
- : eq-cong/lam ([x] eq-term_) eq-term_.
%worlds (just-var) (eq-cong/lam _ _).
%total {} (eq-cong/lam _ _).

eq-cong/1 : {F : (term -> term) -> term} ({x} eq-term (M x) (M' x)) -> eq-term (F M) (F M') -> type.
%mode eq-cong/1 +F +Deq -Deq'.
- : eq-cong/1 F ([x] eq-term_) eq-term_.
%worlds (just-var) (eq-cong/1 _ _ _).
%total {} (eq-cong/1 _ _ _).

eq-cong/let : eq-term E1 E1' -> ({x} eq-term (E2 x) (E2' x)) -> eq-term (let E1 E2) (let E1' E2') -> type.
%mode eq-cong/let +Deq +E -Deq'.
- : eq-cong/let eq-term_ _ eq-term_.
%worlds (just-var) (eq-cong/let _ _ _).
%total {} (eq-cong/let _ _ _).

eq-cong/lett : eq-term E1 E1' -> ({x}{y} eq-term (E2 x y) (E2' x y)) -> eq-term (lett E1 E2) (lett E1' E2') -> type.
%mode eq-cong/lett +Deq +E -Deq'.
- : eq-cong/lett eq-term_ _ eq-term_.
%worlds (just-var) (eq-cong/lett _ _ _).
%total {} (eq-cong/lett _ _ _).

eq-cong : {F : term -> term} eq-term E E' -> eq-term (F E) (F E') -> type.
%mode eq-cong +F +Deq -Deq'.
- : eq-cong _ eq-term_ eq-term_.
%worlds (just-var) (eq-cong _ _ _).
%total {} (eq-cong _ _ _).

eq-cong2 : {F : term -> term -> term} eq-term E1 E1' -> eq-term E2 E2' -> eq-term (F E1 E2) (F E1' E2') -> type.
%mode eq-cong2 +F +Deq1 +De2 -Deq'.
- : eq-cong2 _ eq-term_ eq-term_ eq-term_.
%worlds (just-var) (eq-cong2 _ _ _ _).
%total {} (eq-cong2 _ _ _ _).

eq-cong/0/2 : {F : term -> (term -> term -> term) -> term} 
  (eq-term E1 E1') -> 
  ({x:term}{y:term} eq-term (E2 x y) (E2' x y)) -> 
  (eq-term (F E1 E2) (F E1' E2')) -> type.
%mode eq-cong/0/2 +F +Deq1 +De2 -Deq'.
- : eq-cong/0/2 _ eq-term_ ([x][y] eq-term_) eq-term_.
%worlds (just-var) (eq-cong/0/2 _ _ _ _).
%total {} (eq-cong/0/2 _ _ _ _).

eq-cong/1/1 : {F : (term -> term) -> (term -> term) -> term} 
  ({x:term} eq-term (E1 x) (E1' x)) -> 
  ({y:term} eq-term (E2 y) (E2' y)) -> 
  (eq-term (F E1 E2) (F E1' E2')) -> type.
%mode eq-cong/1/1 +F +Deq1 +De2 -Deq'.
- : eq-cong/1/1 _ ([x] eq-term_) ([y] eq-term_) eq-term_.
%worlds (just-var) (eq-cong/1/1 _ _ _ _).
%total {} (eq-cong/1/1 _ _ _ _).


%% TYPE IDENTITY 
eq-ty : ty -> ty -> type.
eq-ty_ : eq-ty T T.

eq-ty-sym : eq-ty A B -> eq-ty B A -> type.
%mode eq-ty-sym +D1 -D2.
- : eq-ty-sym eq-ty_ eq-ty_.
%worlds () (eq-ty-sym _ _).
%total {} (eq-ty-sym _ _).

eq-ty-cong :
  {F : ty -> ty -> ty}
  eq-ty A1 A2 ->
  eq-ty B1 B2 ->
  eq-ty (F A1 B1) (F A2 B2) -> type.
%mode eq-ty-cong +D1 +D2 +F -D3.
- : eq-ty-cong _ eq-ty_ eq-ty_ eq-ty_.
%worlds () (eq-ty-cong _ _ _ _).
%total {} (eq-ty-cong _ _ _ _).

eq-ty-cong3 :
  {F : ty -> ty -> ty -> ty}
  eq-ty A1 A2 ->
  eq-ty B1 B2 ->
  eq-ty C1 C2 ->
  eq-ty (F A1 B1 C1) (F A2 B2 C2) -> type.
%mode eq-ty-cong3 +D1 +D2 +D3 +F -D3.
- : eq-ty-cong3 _ eq-ty_ eq-ty_ eq-ty_ eq-ty_.
%worlds () (eq-ty-cong3 _ _ _ _ _).
%total {} (eq-ty-cong3 _ _ _ _ _).


eq-ty-inj-arr :
  eq-ty (arr A1 B1) (arr A2 B2) ->
  eq-ty A1 A2 ->
  eq-ty B1 B2 -> type.
%mode eq-ty-inj-arr +D1 -D2 -D3.
- : eq-ty-inj-arr eq-ty_ eq-ty_ eq-ty_.
%worlds () (eq-ty-inj-arr _ _ _).
%total {} (eq-ty-inj-arr _ _ _).
