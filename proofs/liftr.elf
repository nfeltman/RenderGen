%{ liftr.elf }%

%% WORLDS
wor : type. %name wor W.
wor1 : wor.
wor2 : wor.

%% TYPES
ty : type. %name ty T.
unit  : ty.
arr    : ty -> ty -> ty.
fut    : ty -> ty.

%% TERMS
term : type. %name term E.
ztup  : term.
%% annotate base constants with their world
lam    : ty -> (term -> term) -> term.
app    : term -> term -> term.
next  : term -> term.
prev  : term -> term.

%% TYPE WELL-FORMED
ty-wf : ty -> wor -> type.
%mode ty-wf +T +W.
ty-wf-unit	: ty-wf unit W.
ty-wf-arr	: ty-wf (arr A B) W
				<- ty-wf B W
				<- ty-wf A W.
ty-wf-fut	: ty-wf (fut A) wor1
				<- ty-wf A wor2.
%worlds () (ty-wf _ _).

%% TYPING JUDGMENT
of : term -> ty -> wor -> type. %name of Dof.
of-ztup	: of ztup unit W.
of-lam 	: of (lam A ([x] M x)) (arr A B) W
			<- ({x: term} of x A W -> of (M x) B W)
			<- ty-wf A W.
of-app  : of (app E1 E2) B W
			<- of E2 A W
			<- of E1 (arr A B) W.
of-next	: of (next E) (fut A) wor1
			<- of E A wor2.
of-prev	: of (prev E) A wor2
			<- of E (fut A) wor1.

%block var-of : some {A : ty} {W : wor} block {x:term} {_ : of x A W}.
%worlds (var-of) (of _ _ _).
%%unique of +E -T +W.

%% OUTPUTS OF TYPING ARE WELL-FORMED
of-wf : of E T W -> ty-wf T W -> type.
%mode of-wf +D1 -D2. 
- : of-wf of-ztup ty-wf-unit.
- : of-wf (of-lam Dwf1 DofM) (ty-wf-arr Dwf1 Dwf2)
	<- ({x:term} {Dof : of x A W} of-wf (DofM x Dof) Dwf2).
- : of-wf (of-app Dof1 Dof2) Dwf
	<- of-wf Dof1 (ty-wf-arr _ Dwf). 
- : of-wf (of-next Dof) (ty-wf-fut Dwf)
	<- of-wf Dof Dwf.
- : of-wf (of-prev Dof) Dwf
	<- of-wf Dof (ty-wf-fut Dwf).
%worlds (var-of) (of-wf _ _).
%total D (of-wf D _).

%% TYPE IDENTITY
idty : ty -> ty -> type.
idty/refl : idty T T.

idty-sym : idty A B -> idty B A -> type.
%mode idty-sym +D1 -D2.
- : idty-sym idty/refl idty/refl.
%worlds () (idty-sym _ _).
%total {} (idty-sym _ _).

idty-cong-arr :
  idty A1 A2 ->
  idty B1 B2 ->
  idty (arr A1 B1) (arr A2 B2) -> type.
%mode idty-cong-arr +D1 +D2 -D3.
- : idty-cong-arr idty/refl idty/refl idty/refl.
%worlds () (idty-cong-arr _ _ _).
%total {} (idty-cong-arr _ _ _).

idty-inj-arr :
  idty (arr A1 B1) (arr A2 B2) ->
  idty A1 A2 ->
  idty B1 B2 -> type.
%mode idty-inj-arr +D1 -D2 -D3.
- : idty-inj-arr idty/refl idty/refl idty/refl.
%worlds () (idty-inj-arr _ _ _).
%total {} (idty-inj-arr _ _ _).

%% TYPING RESPECTS IDENTITY
of-resp : of M A W -> idty A B -> of M B W -> type.
%mode of-resp +D1 +D2 -D3.
- : of-resp Dof idty/refl Dof.
%worlds () (of-resp _ _ _).
%total {} (of-resp _ _ _).


%% LAMBDA VALUE INVERSION LEMMA
lam-inverts : of (lam A1 _) (arr A2 _) W -> idty A1 A2 -> type.
- : lam-inverts (of-lam _) idty/refl.
%mode lam-inverts +O -I.
%worlds () (lam-inverts _ _).
%total D (lam-inverts D _).

%{
%% UNIQUENESS OF TYPING
of-unique : of M T1 W -> of M T2 W -> idty T1 T2 -> type.
%mode of-unique +D1 +D2 -E.
- : of-unique D D idty/refl.
- : of-unique of-ztup of-ztup idty/refl.
- : of-unique (of-lam D1) (of-lam D2) AtoBeq
    <- ({e:term} {D : of e A W} of-unique (D1 e D) (D2 e D) Beq)
    <- idty-cong-arr idty/refl Beq AtoBeq.
- : of-unique (of-app (Mof1 : of M (arr A1 B1) W)
                      (Nof1 : of N A1 W))
              (of-app (Mof2 : of M (arr A2 B2) W)
                      (Nof2 : of N A2 W))
              Beq
    <- of-unique Mof1 Mof2 AtoBeq
    <- idty-inj-arr AtoBeq _ Beq.
%worlds (var-of) (of-unique _ _ _).
%total D (of-unique D _ _).
}%