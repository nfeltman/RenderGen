%{ liftr.elf }%

%% WORLDS
wor : type. %name wor W.
wor1 : wor.
wor2 : wor.
%%worM : wor.

%% TYPES
ty : type. %name ty T.
unit	: ty.
prod	: ty -> ty -> ty.
arr		: ty -> ty -> ty.
arr+	: ty -> ty -> ty -> ty.
fut		: ty -> ty.
curr	: ty -> ty.

%% TERMS
term : type. %name term E.
ztup  : term.
tup : term -> term -> term.
pi1 : term -> term.
pi2 : term -> term.
lam   : (term -> term) -> term.
app   : term -> term -> term.
let   : term -> (term -> term) -> term.
lett  : term -> (term -> term -> term) -> term.
next  : term -> term.
letn  : term -> (term -> term) -> term.
prev  : term -> term.
mono  : term -> term.
letm  : term -> (term -> term) -> term.


%% TERM EQUALITY
eq-term  : term -> term -> type.
eq-term_ : eq-term E E.

%block just-var : block {x : term}.

%% TERM EQUALITY IS A CONGRUENCE
eq-cong/lam : ({x} eq-term (M x) (M' x)) -> eq-term (lam M) (lam M') -> type.
%mode eq-cong/lam +Deq -Deq'.
- : eq-cong/lam ([x] eq-term_) eq-term_.
%worlds (just-var) (eq-cong/lam _ _).
%total {} (eq-cong/lam _ _).

eq-cong/let : eq-term E1 E1' -> ({x} eq-term (E2 x) (E2' x)) -> eq-term (let E1 E2) (let E1' E2') -> type.
%mode eq-cong/let +Deq +E -Deq'.
- : eq-cong/let eq-term_ _ eq-term_.
%worlds (just-var) (eq-cong/let _ _ _).
%total {} (eq-cong/let _ _ _).

eq-cong/lett : eq-term E1 E1' -> ({x}{y} eq-term (E2 x y) (E2' x y)) -> eq-term (lett E1 E2) (lett E1' E2') -> type.
%mode eq-cong/lett +Deq +E -Deq'.
- : eq-cong/lett eq-term_ _ eq-term_.
%worlds (just-var) (eq-cong/lett _ _ _).
%total {} (eq-cong/lett _ _ _).

eq-cong : {F : term -> term} eq-term E E' -> eq-term (F E) (F E') -> type.
%mode eq-cong +F +Deq -Deq'.
- : eq-cong _ eq-term_ eq-term_.
%worlds (just-var) (eq-cong _ _ _).
%total {} (eq-cong _ _ _).

eq-cong2 : {F : term -> term -> term} eq-term E1 E1' -> eq-term E2 E2' -> eq-term (F E1 E2) (F E1' E2') -> type.
%mode eq-cong2 +F +Deq1 +De2 -Deq'.
- : eq-cong2 _ eq-term_ eq-term_ eq-term_.
%worlds (just-var) (eq-cong2 _ _ _ _).
%total {} (eq-cong2 _ _ _ _).

%% TYPE IDENTITY
idty : ty -> ty -> type.
idty/refl : idty T T.

idty-sym : idty A B -> idty B A -> type.
%mode idty-sym +D1 -D2.
- : idty-sym idty/refl idty/refl.
%worlds () (idty-sym _ _).
%total {} (idty-sym _ _).

idty-cong-arr :
  idty A1 A2 ->
  idty B1 B2 ->
  idty (arr A1 B1) (arr A2 B2) -> type.
%mode idty-cong-arr +D1 +D2 -D3.
- : idty-cong-arr idty/refl idty/refl idty/refl.
%worlds () (idty-cong-arr _ _ _).
%total {} (idty-cong-arr _ _ _).

idty-inj-arr :
  idty (arr A1 B1) (arr A2 B2) ->
  idty A1 A2 ->
  idty B1 B2 -> type.
%mode idty-inj-arr +D1 -D2 -D3.
- : idty-inj-arr idty/refl idty/refl idty/refl.
%worlds () (idty-inj-arr _ _ _).
%total {} (idty-inj-arr _ _ _).