%{ splitting.elf }%


%% SPLITTING
split1 : term -> seperatedM -> type. %name split1 Dspl.
split2 : term -> seperatedS -> type. %name split2 Dspl.
%mode split1 +E -P.
%mode split2 +E -P.

spl1-ztup	: split1 ztup (pipeM (tup ztup ztup) ([_] ztup)).
spl1-tup	: split1 (tup E1 E2) 
				(pipeM 
					(lett C1 ([y1] [z1] lett C2 ([y2] [z2] tup (tup y1 y2) (tup z1 z2)))) 
					([l] lett l ([l1] [l2] tup (R1 l1) (R2 l2)))
				)
			<- split1 E2 (pipeM C2 R2)
			<- split1 E1 (pipeM C1 R1).
spl1-pi1	: split1 (pi1 E) (pipeM (lett C ([y] [z] tup (pi1 y) z)) ([l] pi1 (R l)))
			<- split1 E (pipeM C R).
spl1-pi2	: split1 (pi2 E) (pipeM (lett C ([y] [z] tup (pi2 y) z)) ([l] pi2 (R l)))
			<- split1 E (pipeM C R).
spl1-lam	: split1 (lam M) (pipeM (tup (lam C) ztup) ([_] lam ([xl] lett xl R)))
			<- {x : term} split1 x (pipeM (tup x ztup) ([_] x)) -> split1 (M x) (pipeM (C x) ([l:term] R x l)). 
spl1-app	: split1 (app E1 E2) 
				(pipeM
					(lett C1 ([y1] [z1] lett C2 ([y2] [z2] lett (app y1 y2) ([y3] [z3] tup (y3) (tup (tup z1 z2) z3)))))
					([l] lett l ([l12] [l3] lett l12 ([l1] [l2] app (R1 l1) (tup (R2 l2) l3))))
				)
			<- split1 E2 (pipeM C2 R2)
			<- split1 E1 (pipeM C1 R1).
spl1-next	: split1 (next E) (pipeM (tup ztup P) R)
			<- split2 E (pipeS P R).
%{split1-letn : split1 (letn E M) 
				(lett C1 ([_] [z1] lett C2 ([y] [z2] tup y (tup z1 z2)))) 
				([l] lett l ([l1] [l2] let (R1 l1) ([x] R2 x l2)))
			<- split1 E C1 R1
			<- {x : term} split2 x ztup ([_] x) -> split1 (M x) C2 ([l] R2 x l).}%

spl2-ztup	: split2 ztup (pipeS ztup ([_] ztup)). 
spl2-tup	: split2 (tup E1 E2) (pipeS (tup P1 P2) ([l] lett l ([l1] [l2] tup (R1 l1) (R2 l2))))
			<- split2 E2 (pipeS P2 R2)
			<- split2 E1 (pipeS P1 R1).
spl2-pi1	: split2 (pi1 E) (pipeS P ([l] pi1 (R l)))
			<- split2 E (pipeS P R).
spl2-pi2	: split2 (pi2 E) (pipeS P ([l] pi2 (R l)))
			<- split2 E (pipeS P R).
spl2-lam	: split2 (lam M) (pipeS P ([l] lam ([x] R x l)))
			<- {x : term} split2 x (pipeS ztup ([_] x)) -> split2 (M x) (pipeS P ([l] R x l)).
spl2-app	: split2 (app E1 E2) (pipeS (tup P1 P2) ([l] lett l ([l1] [l2] app (R1 l1) (R2 l2))))
			<- split2 E2 (pipeS P2 R2)
			<- split2 E1 (pipeS P1 R1).
spl2-prev 	: split2 (prev E) (pipeS (pi2 C) R)
			<- split1 E (pipeM C R).

%{spl1-let	: split1 (let E M) 
				(pipeM
					(lett C1 ([x] [z1] lett (C2 x) ([y] [z2] tup y (tup z1 z2)))) 
					([l] lett l ([l1] [l2] let (R1 l1) ([x] R2 x l2)))
				)
			<- ({x : term} split1 x (pipeM x ([_] x)) -> split1 (M x) (pipeM (C2 x) ([l] R2 x l)))
			<- split1 E (pipeM C1 R1).}%
%{spl2-let	: split2 (let E M) (pipeS (tup P1 P2) ([l] lett l ([l1] [l2] let (R1 l1) ([x] R2 x l2))))
			<- ({x : term} split2 x (pipeS ztup ([_] x)) -> split2 (M x) (pipeS P2 ([l] R2 x l)))
			<- split2 E (pipeS P1 R1).}%


%block splitting-var1 : block {x:term} {dspl : split1 x (pipeM (tup x ztup) ([_] x))}.
%block splitting-var2 : block {x:term} {dspl : split2 x (pipeS ztup ([_] x))}.
%block splitting-block = (splitting-var1 | splitting-var2).