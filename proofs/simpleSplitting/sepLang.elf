%{ sepLang.elf }%

%% OUTPUT LANGUAGE
seperatedM : type. %name seperatedM S.
seperatedS : type. %name seperatedS S.
pipeS : term -> (term -> term) -> seperatedS.
pipeM : term -> (term -> term) -> seperatedM.

mval : term -> type.
mval-ztup : mval ztup.
mval-tup  : mval (tup E1 E2)
			<- mval E2
			<- mval E1.
mval-lam  : mval (lam _).


%% MULTI-OUTPUT PIPELINE TYPING
tyM : type.
tyM_ : ty -> ty -> ty -> tyM.
ofM : seperatedM -> tyM -> type.
ofM-pipe : ofM (pipeM C R) (tyM_ A T B)
	<- ({x} of x T -> of (R x) B)
	<- of C (prod A T).

tyM-wf : tyM -> type.
wf-tyM_ : tyM-wf (tyM_ A T B)
	<- ty-wf B
	<- ty-wf T
	<- ty-wf A.

%% SINGLE-OUTPUT PIPELINE TYPING
tyS : type.
ofS : seperatedS -> ty -> type.
ofS-pipe : ofS (pipeS P R) A
	<- ({x} of x T -> of (R x) A)
	<- of P T.

%{
pval : seperatedM -> type.
pval-s	: pval (trivM I Q)
		<- mval I.

sstepM  : seperatedM -> seperatedM -> type.
sstepM-t : mstep wor1 I I' -> sstepM (trivM I Q) (trivM I' Q).
sstepM-p : mstep wor1 C C' -> sstepM (pipeM C R) (pipeM C' R).}%