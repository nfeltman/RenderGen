%% FIRST-STAGE RESULTS CANNOT DEPEND ON STAGE TWO VARIABLES
c-strengthen : ({x : term} split2 x (pipeS ztup ([_] x)) -> split1 (E x) (pipeM (C x) _)) -> ({x :term} eq-term (C x) C') -> type.
%mode c-strengthen +Dspl -Deq.
p-strengthen : ({x : term} split2 x (pipeS ztup ([_] x)) -> split2 (E x) (pipeS (P x) _)) -> ({x :term} eq-term (P x) P') -> type.
%mode p-strengthen +Dspl -Deq.

%% CATCHALL CASES
- : c-strengthen ([x] [dspl] Dspl x dspl : split1 (E x) (pipeM C _)) ([x] eq-term_).
- : p-strengthen ([x] [dspl] Dspl x dspl : split2 (E x) (pipeS P _)) ([x] eq-term_).

%% PI1
- : c-strengthen ([x] [dspl] spl1-pi1 (Dspl x dspl)) Deq'
	<- c-strengthen Dspl Deq
	<- {x} eq-cong/lett (Deq x) ([y] [z] eq-term_) (Deq' x).
- : p-strengthen ([x] [dspl] spl2-pi1 (Dspl x dspl)) Deq
	<- p-strengthen Dspl Deq.

%% PI2
- : c-strengthen ([x] [dspl] spl1-pi2 (Dspl x dspl)) Deq'
	<- c-strengthen Dspl Deq
	<- {x} eq-cong/lett (Deq x) ([y] [z] eq-term_) (Deq' x).
- : p-strengthen ([x] [dspl] spl2-pi2 (Dspl x dspl)) Deq
	<- p-strengthen Dspl Deq.

%% TUP
- : c-strengthen ([x] [dspl] spl1-tup (Dspl1 x dspl) (Dspl2 x dspl)) Deq
	<- c-strengthen Dspl1 Deq1
	<- c-strengthen Dspl2 Deq2
	<- ({x}{y}{z} eq-cong/lett (Deq2 x) ([x2] [y2] eq-term_) (Deq2' x z y))
	<- {x} eq-cong/lett (Deq1 x) ([y] [z] Deq2' x z y) (Deq x).
- : p-strengthen ([x] [dspl] spl2-tup (Dspl1 x dspl) (Dspl2 x dspl)) Deq
	<- p-strengthen Dspl1 Deq1
	<- p-strengthen Dspl2 Deq2
	<- {x} eq-cong/tup (Deq1 x) (Deq2 x) (Deq x).

%% LAM
- : c-strengthen 
		([x] [dspl] spl1-lam ([y] [dsply] DsplM y dsply x dspl) : split1 (lam A _) _) 
		Deq''
	<- ({y} {dsply : split1 y (pipeM (tup y ztup) ([_] y ))}  
		c-strengthen (DsplM y dsply) (Deq y))
	<- ({x} eq-cong/lam ([y] Deq y x) unit (Deq' x))
	<- {x} eq-cong/tup (Deq' x) eq-term_ (Deq'' x).
- : p-strengthen ([x] [dsplx] spl2-lam ([y] [dsply] DsplM y dsply x dsplx) : split2 (lam A _) _) Deq
	<- ({y} {dsply} p-strengthen (DsplM y dsply) Deq).


%% APP
- : c-strengthen ([x] [dspl] spl1-app (Dspl1 x dspl) (Dspl2 x dspl)) Deq
	<- c-strengthen Dspl1 Deq1
	<- c-strengthen Dspl2 Deq2
	<- ({x}{y}{z} eq-cong/lett (Deq2 x) ([x2] [y2] eq-term_) (Deq2' x z y))
	<- {x} eq-cong/lett (Deq1 x) ([y] [z] Deq2' x z y) (Deq x).
- : p-strengthen ([x] [dspl] spl2-app (Dspl1 x dspl) (Dspl2 x dspl)) Deq
	<- p-strengthen Dspl1 Deq1
	<- p-strengthen Dspl2 Deq2
	<- {x} eq-cong/tup (Deq1 x) (Deq2 x) (Deq x).

%% NEXT
- : c-strengthen ([x] [dspl] spl1-next (Dspl x dspl)) Deq'
	<- p-strengthen Dspl Deq
	<- {x} eq-cong/tup eq-term_ (Deq x) (Deq' x).

%% PREV
- : p-strengthen ([x] [dspl] spl2-prev (Dspl x dspl)) Deq'
	<- c-strengthen Dspl Deq
	<- {x} eq-cong/pi2 (Deq x) (Deq' x).

%% STRENGTHENING
%worlds (splitting-block) (c-strengthen _ _) (p-strengthen _ _).
%total (Dspl1 Dspl2) (c-strengthen Dspl1 _) (p-strengthen Dspl2 _).

%% SPLITTING RESPECTS IDENTITY
split2-resp : split2 E (pipeS P R) -> eq-term P P' -> split2 E (pipeS P' R) -> type.
%mode split2-resp +Dspl +Deq -Dspl'.
- : split2-resp Dspl eq-term_ Dspl.
%worlds (splitting-block) (split2-resp _ _ _).
%total (Deq) (split2-resp _ Deq _).

%% SPLITTING IS TOTAL FOR WELL-TYPED TERMS
spl1-total : of+ E A T wor1 -> split1 E _ -> type.
%mode spl1-total +Dof -Dspl.
spl2-total : of+ E A T wor2 -> split2 E _ -> type.
%mode spl2-total +Dof -Dspl.

%% BLOCKS
%block total-var1 : some {T : ty} {A : ty} block 
	{x:term} {dof : of+ x T A wor1} {dspl : split1 x (pipeM (tup x ztup) ([_] x))} {dtot : spl1-total dof dspl}.
%block total-var2 : some {T : ty} {A : ty} block 
	{x:term} {dof : of+ x T A wor2} {dspl : split2 x (pipeS ztup ([_] x))} {dtot : spl2-total dof dspl}.
%block total-block = (total-var1 | total-var2).

%% MAIN PROOF OF TOTALITY
- : spl1-total of+ztup spl1-ztup.
- : spl2-total of+ztup spl2-ztup.
- : spl1-total (of+tup Dof1 Dof2) (spl1-tup Dspl1 Dspl2)
	<- spl1-total Dof1 Dspl1
	<- spl1-total Dof2 Dspl2.
- : spl2-total (of+tup Dof1 Dof2) (spl2-tup Dspl1 Dspl2)
	<- spl2-total Dof1 Dspl1
	<- spl2-total Dof2 Dspl2.
- : spl1-total (of+pi1 Dof) (spl1-pi1 Dspl)
	<- spl1-total Dof Dspl.
- : spl2-total (of+pi1 Dof) (spl2-pi1 Dspl)
	<- spl2-total Dof Dspl.
- : spl1-total (of+pi2 Dof) (spl1-pi2 Dspl)
	<- spl1-total Dof Dspl.
- : spl2-total (of+pi2 Dof) (spl2-pi2 Dspl)
	<- spl2-total Dof Dspl.
- : spl1-total (of+lam+ Dwf Dof) (spl1-lam Dspl)
	<- ({x : term} {dof : of+ x unit A wor1} {dspl : split1 x (pipeM (tup x ztup) ([_] x))}
		spl1-total dof dspl ->
		spl1-total (Dof x dof) (Dspl x dspl)).
- : spl2-total (of+lam Dwf Dof) (spl2-lam Dspl')
	<- ({x : term} {dof : of+ x unit A wor2} {dspl : split2 x (pipeS ztup ([_] x))} 
		spl2-total dof dspl ->
		spl2-total (Dof x dof) (Dspl x dspl))
	<- p-strengthen Dspl Deq
	<- {x} {spl} split2-resp (Dspl x spl) (Deq x) (Dspl' x spl).
- : spl1-total (of+app+ Dof1 Dof2) (spl1-app Dspl1 Dspl2)
	<- spl1-total Dof1 Dspl1
	<- spl1-total Dof2 Dspl2.
- : spl2-total (of+app Dof1 Dof2) (spl2-app Dspl1 Dspl2)
	<- spl2-total Dof1 Dspl1
	<- spl2-total Dof2 Dspl2.
- : spl1-total (of+next Dof) (spl1-next Dspl)
	<- spl2-total Dof Dspl.
- : spl2-total (of+prev Dof) (spl2-prev Dspl)
	<- spl1-total Dof Dspl.
%worlds (total-block) (spl1-total _ _) (spl2-total _ _).
%total (Dspl1 Dspl2) (spl1-total Dspl1 _) (spl2-total Dspl2 _).
