%% INTERMEDIATE TYPE SYSTEM

%% TYPE WELL-FORMED
ty+wf : ty -> wor -> type.
%%mode ty+wf +T +W.
ty+wf-unit	: ty+wf unit W.
ty+wf-prod	: ty+wf (prod A B) W
				<- ty+wf B W
				<- ty+wf A W.
ty+wf-arr+	: ty+wf (arr+ A T B) wor1
				<- ty+wf B wor1
				<- ty-wf T
				<- ty+wf A wor1.
ty+wf-arr	: ty+wf (arr A B) wor2
				<- ty+wf B wor2
				<- ty+wf A wor2.
ty+wf-fut	: ty+wf (fut A) wor1
				<- ty+wf A wor2.
%worlds () (ty+wf _ _).

%% TYPING JUDGMENT
of+ : term -> ty -> ty -> wor -> type. %name of+ Dof.
of+ztup	: of+ ztup unit unit W.
of+tup	: of+ (tup E1 E2) (prod T1 T2) (prod A1 A2) W
			<- of+ E2 T2 A2 W
			<- of+ E1 T1 A1 W.
of+pi1	: of+ (pi1 E) T A W
			<- of+ E T (prod A _) W.
of+pi2	: of+ (pi2 E) T A W
			<- of+ E T (prod _ A) W.
of+lam+	: of+ (lam A ([x] M x)) unit (arr+ A T B) wor1
			<- ({x: term} of+ x unit A wor1 -> of+ (M x) T B wor1)
			<- ty+wf A wor1.
of+lam	: of+ (lam A ([x] M x)) T (arr A B) wor2
			<- ({x: term} of+ x unit A wor2 -> of+ (M x) T B wor2)
			<- ty+wf A wor2.
of+app+ : of+ (app E1 E2) (prod (prod T1 T2) T3) B wor1
			<- of+ E2 T2 A wor1
			<- of+ E1 T1 (arr+ A T3 B) wor1.
of+app  : of+ (app E1 E2) (prod T1 T2) B wor2
			<- of+ E2 T2 A wor2
			<- of+ E1 T1 (arr A B) wor2.
%{of+let  : of+ (let E ([x] M x)) B wor2
			<- of+ E A wor2
			<- ({x:term} of+ x A wor2 -> of+ (M x) B wor2). }%
of+next	: of+ (next E) T (fut A) wor1
			<- of+ E T A wor2.
%{of+letn : of+ (letn E M) B wor1
			<- of+ E (fut A) wor1
			<- ({x:term} of+ x A wor2 -> of+ (M x) B wor1).}% 
of+prev	: of+ (prev E) T A wor2
			<- of+ E T (fut A) wor1.
%{of+mono : of+ (mono E) (curr T) wor1
			<- of+ E T worM.
of+letm : of+ (letm E M) T2 wor1
			<- of+ E (curr T1) wor1
			<- ({x:term} of+ x T1 worM -> of+ (M x) T2 wor1).}%

%block var-of : some {T : ty} {A : ty} {W : wor} block {x:term} {_ : of+ x T A W}.
%worlds (var-of) (of+ _ _ _ _).

%% OUTPUTS OF TYPING ARE WELL-FORMED
of+wf : of+ E T A W -> ty-wf T -> ty+wf A W -> type.
%mode of+wf +D1 -D2 -D3. 
- : of+wf of+ztup ty-wf-unit ty+wf-unit.
- : of+wf (of+tup Dof1 Dof2) (ty-wf-prod DwfT1 DwfT2) (ty+wf-prod DwfA DwfB)
	<- of+wf Dof1 DwfT1 DwfA
	<- of+wf Dof2 DwfT2 DwfB.
- : of+wf (of+pi1 Dof) DwfT DwfA
	<- of+wf Dof DwfT (ty+wf-prod DwfA _).
- : of+wf (of+pi2 Dof) DwfT DwfB
	<- of+wf Dof DwfT (ty+wf-prod _ DwfB).
- : of+wf (of+lam+ Dwf1 DofM) ty-wf-unit (ty+wf-arr+ Dwf1 DwfT Dwf2)
	<- ({x:term} {Dof : of+ x unit A wor1} of+wf Dof ty-wf-unit Dwf1 -> of+wf (DofM x Dof) DwfT Dwf2).
- : of+wf (of+lam Dwf1 DofM) DwfT (ty+wf-arr Dwf1 Dwf2)
	<- ({x:term} {Dof : of+ x unit A wor2} of+wf Dof ty-wf-unit Dwf1 -> of+wf (DofM x Dof) DwfT Dwf2).
- : of+wf (of+app+ Dof1 Dof2) (ty-wf-prod (ty-wf-prod DwfT1 DwfT2) DwfT3) Dwf
	<- of+wf Dof1 DwfT1 (ty+wf-arr+ _ DwfT3 Dwf)
	<- of+wf Dof2 DwfT2 _.
- : of+wf (of+app Dof1 Dof2) (ty-wf-prod DwfT1 DwfT2) Dwf
	<- of+wf Dof1 DwfT1 (ty+wf-arr _ Dwf)
	<- of+wf Dof2 DwfT2 _. 
%{- : of+wf (of+let DofM DofE) Dwf2
	<- of+wf DofE Dwf1
	<- ({x:term} {Dof : of+ x A wor2} {_ : of+wf Dof Dwf1} of+wf (DofM x Dof) Dwf2).}%
- : of+wf (of+next Dof) DwfT (ty+wf-fut Dwf)
	<- of+wf Dof DwfT Dwf.
%{- : of+wf (of+letn DofM DofE) Dwf2
	<- of+wf DofE (ty+wf-fut Dwf1)
	<- ({x:term} {Dof : of+ x A wor2} {_ : of+wf Dof Dwf1} of+wf (DofM x Dof) Dwf2).}%
- : of+wf (of+prev Dof) DwfT Dwf
	<- of+wf Dof DwfT (ty+wf-fut Dwf).
%{- : of+wf (of+mono Dof) (ty+wf-curr Dwf)
	<- of+wf Dof Dwf.
- : of+wf (of+letm DofM DofE) DwfM
	<- of+wf DofE (ty+wf-curr DwfE)
	<- ({x:term} {Dof : of+ x A worM} of+wf Dof DwfE -> of+wf (DofM x Dof) DwfM).}%
%block var-of+wf : 
	some {T : ty} {A : ty} {W : wor} {DwfT : ty-wf T} {Dwf : ty+wf A W}
	block {x:term} {Dof : of+ x T A W} {_ : of+wf Dof DwfT Dwf}.
%worlds (var-of+wf) (of+wf _ _ _).
%total D (of+wf D _ _).


%% TYPES AT TWO ARE MONOTYPES
wor2+mono : ty+wf A wor2 -> ty-wf A -> type.
%mode wor2+mono +Dwf -Dwf'.
- : wor2+mono ty+wf-unit ty-wf-unit.
- : wor2+mono (ty+wf-prod Dwf1 Dwf2) (ty-wf-prod Dwf1' Dwf2')
	<- wor2+mono Dwf1 Dwf1'
	<- wor2+mono Dwf2 Dwf2'.
- : wor2+mono (ty+wf-arr Dwf1 Dwf2) (ty-wf-arr Dwf1' Dwf2')
	<- wor2+mono Dwf1 Dwf1'
	<- wor2+mono Dwf2 Dwf2'.
%worlds () (wor2+mono _ _).
%total (D) (wor2+mono D _).