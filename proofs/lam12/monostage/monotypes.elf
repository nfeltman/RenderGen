
%% TYPE WELL-FORMED
ty-wf : ty -> type.
ty-wf-unit	: ty-wf unit.
ty-wf-prod	: ty-wf (prod A B)
				<- ty-wf B
				<- ty-wf A.
ty-wf-sum	: ty-wf (sum A B)
				<- ty-wf B
				<- ty-wf A.
ty-wf-arr	: ty-wf (arr A B)
				<- ty-wf B
				<- ty-wf A.
ty-wf-rec	: ty-wf (rec F)
				<- {a} ty-wf a -> ty-wf (F a).
%block ty-wf-block : block {a : ty} {_ : ty-wf a}.
%worlds (ty-wf-block) (ty-wf _).

%% TYPING JUDGMENT
of : term L -> ty -> type. %name of Dof.
of-exv  : of (exv E) A
			<- of E A.
of-ztup	: of ztup unit.
of-tup	: of (tup E1 E2) (prod A B)
			<- of E2 B
			<- of E1 A.
of-pi1	: of (pi1 E) A
			<- of E (prod A B).
of-pi2	: of (pi2 E) B
			<- of E (prod A B).
of-inj1	: {B} of (inj1 E) (sum A B)
			<- of E A.
of-inj2	: {A} of (inj2 E) (sum A B)
			<- of E B.
of-roll	: of (roll E) (rec F)
				<- of E (F (rec F))
				<- {a} ty-wf a -> ty-wf (F a).
of-unrl	: of (unrl E) (F (rec F))
				<- of E (rec F).
of-case : of (case E M N) C
			<- ({x} of x B -> of (N x) C)
			<- ({x} of x A -> of (M x) C)
			<- of E (sum A B).
of-lam 	: of (lam M) (arr A B)
			<- ({f} of f (arr A B) -> {x} of x A -> of (M f x) B)
			<- ty-wf (arr A B).
of-app  : of (app E1 E2) B
			<- of E2 A
			<- of E1 (arr A B).
of-let  : of (let E M) B
			<- ({x} of x A -> of (M x) B)
			<- of E A.
of-lett : of (lett E M) B
			<- ({x} of x A1 -> {y} of y A2 -> of (M x y) B)
			<- of E (prod A1 A2).

%freeze of.

%% RESPECTS BLOCK
%block of-block : some {A : ty} {L : lang} {x : term L} block {Dof : of x A}.

%% OF RESPECTS EQUALITY
of-resp : of E T -> eq-ty T T' -> of E T' -> type.
%mode of-resp +Dof +Deq -Dof'.
- : of-resp Dof eq-ty_ Dof.
%worlds (of-block | term-block) (of-resp _ _ _).
%total {} (of-resp _ _ _).


of-strengthen/term : (term L -> of E A) -> of E A -> type.
%mode of-strengthen/term +Dof -Dof'.
- : of-strengthen/term DofFunc (DofFunc ztup).
%worlds (of-block | term-block) (of-strengthen/term _ _).
%total D (of-strengthen/term D _).

of-strengthen/of : ({x} of x A -> of E B) -> of E B -> type.
%mode of-strengthen/of +Dof -Dof'.
- : of-strengthen/of ([x][ofx] Dof) Dof. %% covers ztup and variable cases
- : of-strengthen/of ([x][ofx] of-exv (Dof x ofx)) (of-exv Dof')
	<- of-strengthen/of Dof Dof'.
- : of-strengthen/of ([x][ofx] of-tup (Dof1 x ofx) (Dof2 x ofx)) (of-tup Dof1' Dof2')
	<- of-strengthen/of Dof1 Dof1'
	<- of-strengthen/of Dof2 Dof2'.
- : of-strengthen/of ([x][ofx] of-pi1 (Dof x ofx)) (of-pi1 Dof')
	<- of-strengthen/of Dof Dof'.
- : of-strengthen/of ([x][ofx] of-pi2 (Dof x ofx)) (of-pi2 Dof')
	<- of-strengthen/of Dof Dof'.
- : of-strengthen/of ([x][ofx] of-roll T (Dof x ofx)) (of-roll T Dof')
	<- of-strengthen/of Dof Dof'.
- : of-strengthen/of ([x][ofx] of-unrl (Dof x ofx)) (of-unrl Dof')
	<- of-strengthen/of Dof Dof'.
- : of-strengthen/of ([x][ofx] of-inj1 T (Dof x ofx)) (of-inj1 T Dof')
	<- of-strengthen/of Dof Dof'.
- : of-strengthen/of ([x][ofx] of-inj2 T (Dof x ofx)) (of-inj2 T Dof')
	<- of-strengthen/of Dof Dof'.
- : of-strengthen/of ([x][ofx] of-case (Dof1 x ofx) (Dof2 x ofx) (Dof3 x ofx)) (of-case Dof1' Dof2' Dof3')
	<- of-strengthen/of Dof1 Dof1'
	<- ({y} {ofy : of y A} 
		of-strengthen/of ([x][ofx] Dof2 x ofx y ofy) (Dof2' y ofy))
	<- {y} {ofy : of y B} 
		of-strengthen/of ([x][ofx] Dof3 x ofx y ofy) (Dof3' y ofy).
- : of-strengthen/of ([x][ofx] of-lam Dwf (Dof x ofx)) (of-lam Dwf Dof')
	<- {f} {off}  {y} {ofy} 
		of-strengthen/of ([x][ofx] Dof x ofx f off y ofy) (Dof' f off y ofy).
- : of-strengthen/of ([x][ofx] of-app (Dof1 x ofx) (Dof2 x ofx)) (of-app Dof1' Dof2')
	<- of-strengthen/of Dof1 Dof1'
	<- of-strengthen/of Dof2 Dof2'.
- : of-strengthen/of ([x][ofx] of-let (Dof1 x ofx) (Dof2 x ofx)) (of-let Dof1' Dof2')
	<- of-strengthen/of Dof1 Dof1'
	<- {y} {ofy : of y A} 
		of-strengthen/of ([x][ofx] Dof2 x ofx y ofy) (Dof2' y ofy).
- : of-strengthen/of ([x][ofx] of-lett (Dof1 x ofx) (Dof2 x ofx)) (of-lett Dof1' Dof2')
	<- of-strengthen/of Dof1 Dof1'
	<-	{y} {ofy : of y A} 
		{z} {ofz : of z B} 
		of-strengthen/of ([x][ofx] Dof2 x ofx y ofy z ofz) (Dof2' y ofy z ofz).
 %worlds (of-block | term-block) (of-strengthen/of _ _).
 %total D (of-strengthen/of D _). 


%% NORMALITY JUDGMENT

form : term L -> normality -> type. %name form Dform.
form-ztup : form ztup norm.
form-lam  : form (lam M) norm
			<- {f} form f norm -> {x} form x norm -> form (M f x) comp.

form-tup  : form (tup E1 E2) N
			<- form E2 N
			<- form E1 N.
form-inj1 : form (inj1 E) N 
			<- form E N.
form-inj2 : form (inj2 E) N 
			<- form E N.
form-roll : form (roll E) N 
			<- form E N.

form-exv  : form (exv E) comp
			<- form E norm.
form-pi1  : form (pi1 E) comp
			<- form E comp.
form-pi2  : form (pi2 E) comp
			<- form E comp.
form-unrl  : form (unrl E) comp
			<- form E comp.
form-case : form (case E M N) comp
			<- ({x} form x norm -> form (N x) comp)
			<- ({x} form x norm -> form (M x) comp)
			<- form E comp.
form-app  : form (app E1 E2) comp
			<- form E2 comp
			<- form E1 comp.
form-let  : form (let E M) comp
			<- ({x} form x norm -> form (M x) comp)
			<- form E comp.
form-lett : form (lett E M) comp
			<- ({x} form x norm -> {y} form y norm -> form (M x y) comp)
			<- form E comp.



