%% REDUCTION JUDGMENT
mred : term L -> term L -> type. %name mred Dred.
%mode mred +E -V.
mred/case : term L -> (term L -> term L) -> (term L -> term L) -> term L -> type.
%mode mred/case +E +M +N -V. 
mred/case-inj1 : mred/case (inj1 V) M N U
				<- mred (M V) U.
mred/case-inj2 : mred/case (inj2 V) M N U
				<- mred (N V) U.

mred-exv  : mred (exv V) V.
mred-ztup : mred ztup ztup.
mred-tup  : mred (tup E1 E2) (tup V1 V2)
			<- mred E2 V2
			<- mred E1 V1.
mred-pi1  : mred (pi1 E) V
			<- mred E (tup V _).
mred-pi2  : mred (pi2 E) V
			<- mred E (tup _ V).
mred-inj1  : mred (inj1 E) (inj1 V)
			<- mred E V.
mred-inj2  : mred (inj2 E) (inj2 V)
			<- mred E V.
mred-case : mred (case E M N) V2
			<- mred E V
			<- mred/case V M N V2.
mred-roll  : mred (roll E) (roll V)
			<- mred E V.
mred-unrl  : mred (unrl E) V
			<- mred E (roll V).
mred-lam  : mred (lam M) (lam M).
%{mred-fix  : mred (fix M) (lam ([x] let (fix M) ([f] M f x))).}%
mred-app  : mred (app E1 E2) V
			<- mred E2 V2
			<- mred E1 (lam M)
			<- mred (M (lam M) V2) V.
mred-let  : mred (let E M) V2
			<- mred E V1
			<- mred (M V1) V2.
mred-lett  : mred (lett E M) V3
			<- mred E (tup V1 V2)
			<- mred (M V1 V2) V3.
%worlds (term-block) (mred _ _) (mred/case _ _ _ _).
%unique (mred +E -1V) (mred/case +E +N +M -1V).

%% PRESERVATION AND EVALUATION
mred-pres : mred E V -> 
			of E A -> form E comp -> 
			of V A -> form V norm -> type.
%mode mred-pres +D1 +D2 +D3 -D4 -D5.
mred/case-pres : 
			mred/case E M N V -> 
			of E (sum A B) -> form E norm -> 
			({x} of x A -> of (M x) C) -> ({x} form x norm -> form (M x) comp) -> 
			({x} of x B -> of (N x) C) -> ({x} form x norm -> form (N x) comp) -> 
			of V C -> form V norm -> type.
%mode mred/case-pres +D1 +D2 +D3 +D6 +D7 +D8 +D9 -D4 -D5.
- : mred-pres mred-exv (of-exv Dof) (form-exv Dval) Dof Dval.
- : mred-pres (mred-tup Dred1 Dred2) (of-tup DofE1 DofE2) (form-tup Dcomp1 Dcomp2) (of-tup DofV1 DofV2) (form-tup Dval1 Dval2)
	<- mred-pres Dred1 DofE1 Dcomp1 DofV1 Dval1
	<- mred-pres Dred2 DofE2 Dcomp2 DofV2 Dval2.
- : mred-pres (mred-pi1 Dred) (of-pi1 DofE) (form-pi1 Dcomp) DofV Dval
	<- mred-pres Dred DofE Dcomp (of-tup DofV _) (form-tup Dval _).
- : mred-pres (mred-pi2 Dred) (of-pi2 DofE) (form-pi2 Dcomp) DofV Dval
	<- mred-pres Dred DofE Dcomp (of-tup _ DofV) (form-tup _ Dval).
- : mred-pres (mred-inj1 Dred) (of-inj1 Dwf DofE) (form-inj1 Dcomp) (of-inj1 Dwf DofV) (form-inj1 Dval)
	<- mred-pres Dred DofE Dcomp DofV Dval.
- : mred-pres (mred-inj2 Dred) (of-inj2 Dwf DofE) (form-inj2 Dcomp) (of-inj2 Dwf DofV) (form-inj2 Dval)
	<- mred-pres Dred DofE Dcomp DofV Dval.
- : mred-pres (mred-roll Dred) (of-roll Dwf DofE) (form-roll Dcomp) (of-roll Dwf DofV) (form-roll Dval)
	<- mred-pres Dred DofE Dcomp DofV Dval.
- : mred-pres (mred-unrl Dred) (of-unrl DofE) (form-unrl Dcomp) DofV Dval
	<- mred-pres Dred DofE Dcomp (of-roll _ DofV) (form-roll Dval).
- : mred-pres (mred-case DredMN DredE) 
		(of-case DofE DofM DofN) 
		(form-case DcompE DcompM DcompN)
		DofV2 DvalV2
	<- mred-pres DredE DofE DcompE DofV1 DvalV1
	<- mred/case-pres DredMN DofV1 DvalV1 DofM DcompM DofN DcompN DofV2 DvalV2.
- : mred/case-pres (mred/case-inj1 (Dred : mred (M V1) V2)) 
		(of-inj1 T DofV1) (form-inj1 DvalV1) 
		([x : term L][ofx : of x A] DofM x ofx : of (M x : term L) C) DcompM _ _ 
		DofV2 DvalV2
	<- mred-pres Dred (DofM V1 DofV1) (DcompM V1 DvalV1) DofV2 DvalV2.
- : mred/case-pres (mred/case-inj2 Dred) 
		(of-inj2 T DofV1) (form-inj2 DvalV1) 
		_ _ ([x : term L][ofx : of x B] DofN x ofx : of (N x : term L) C) DcompN DofV2 DvalV2
	<- mred-pres Dred (DofN V1 DofV1) (DcompN V1 DvalV1) DofV2 DvalV2.
- : mred-pres 
		(mred-app 
			(DredM  : mred (M (lam M) V2) V3) 
			(DredE1 : mred E1 (lam M)) 
			(DredE2 : mred E2 V2)) 
		(of-app 
			(DofE1 : of E1 (arr A B))
			(DofE2 : of E2 A)) 
		(form-app Dcomp1 Dcomp2)
		DofV3
		DvalV3 
	<- mred-pres DredE1 DofE1 Dcomp1 (of-lam Dwf DofM : of (lam M) (arr A B)) (form-lam DformM)
	<- mred-pres DredE2 DofE2 Dcomp2 (DofV2 : of V2 A) (DvalV2 : form V2 norm)
	<- mred-pres DredM (DofM (lam M) (of-lam Dwf DofM) V2 DofV2) (DformM (lam M) (form-lam DformM) V2 DvalV2) DofV3 DvalV3.
- : mred-pres (mred-let DredM DredE) 
		(of-let DofE (DofM : {x:term L} of x A -> of (M x) B)) 
		(form-let DcompE DcompM)
		DofV2 DvalV2
	<- mred-pres DredE DofE DcompE DofV1 DvalV1
	<- mred-pres DredM (DofM V1 DofV1) (DcompM V1 DvalV1) DofV2 DvalV2.
- : mred-pres (mred-lett DredM DredE) 
		(of-lett DofE (DofM : {x:term L} of x A -> {y} of y B -> of (M x y) C)) 
		(form-lett DcompE DcompM)
		DofV Dval
	<- mred-pres DredE DofE DcompE (of-tup DofV1 DofV2) (form-tup DvalV1 DvalV2)
	<- mred-pres DredM (DofM V1 DofV1 V2 DofV2) (DcompM V1 DvalV1 V2 DvalV2) DofV Dval.
        
%worlds () (mred-pres _ _ _ _ _) (mred/case-pres _ _ _ _ _ _ _ _ _).
%total (Dred Dred2) (mred-pres Dred _ _ _ _) (mred/case-pres Dred2 _ _ _ _ _ _ _ _).

%% REDUCTION IS IDEMPOTENT
%{
idem : mred E V -> mred V V -> type.
%mode idem +Dred1 -Dred2.
- : idem mred-ztup mred-ztup.
- : idem (mred-tup Dred1 Dred2) (mred-tup Dself1 Dself2)
	<- idem Dred1 Dself1
	<- idem Dred2 Dself2.
- : idem (mred-pi1 Dred) Dself
	<- idem Dred (mred-tup Dself _).
- : idem (mred-pi2 Dred) Dself
	<- idem Dred (mred-tup _ Dself).
- : idem mred-lam mred-lam.
- : idem (mred-app DredM _ _) Dself
	<- idem DredM Dself.
- : idem (mred-let DredM _) Dself
	<- idem DredM Dself.
- : idem (mred-lett DredM _) Dself
	<- idem DredM Dself.
%worlds (term-block) (idem _ _).
%total Dred (idem Dred _).

%% VALUES REDUCE TO THEMSELF
val-auto : val V -> mred V V -> type.
%mode val-auto +Dred1 -Dred2.
- : val-auto val-ztup mred-ztup.
- : val-auto (val-tup Dred1 Dred2) (mred-tup Dself1 Dself2)
	<- val-auto Dred1 Dself1
	<- val-auto Dred2 Dself2.
- : val-auto val-lam mred-lam.
%worlds (term-block) (val-auto _ _).
%total Dred (val-auto Dred _).}%

%% REDUCTION RESPECTS IDENTITY
mred-resp : mred E V -> eq-term E E' -> eq-term V V' -> mred E' V' -> type.
%mode mred-resp +Dred +DeqE +Didty -Dred'.
- : mred-resp Dred eq-term_ eq-term_ Dred.
%worlds (term-block) (mred-resp _ _ _ _).
%total {} (mred-resp _ _ _ _).


%% REDUCTION IS UNIQUE
mred-unique : mred E V1 -> mred E V2 -> eq-term V1 V2 -> type.
%mode mred-unique +Dred1 +Dred2 -Deq.
- : mred-unique _ _ eq-term_.
%worlds (term-block) (mred-unique _ _ _).
%total (D) (mred-unique D _ _).

%% REDUCTION OF TUPLES VALUES CAN BE INVERTED
mred-invert/exv-tup : mred (exv (tup A B)) (tup C D) -> mred (exv A) C -> mred (exv B) D -> type.
%mode mred-invert/exv-tup +Dred -Dred1 -Dred2.
- : mred-invert/exv-tup mred-exv mred-exv mred-exv.
%worlds (term-block) (mred-invert/exv-tup _ _ _).
%total {} (mred-invert/exv-tup _ _ _).

mred-invert/exv : mred (exv A) B -> eq-term A B -> type.
%mode mred-invert/exv +Dred -Deq.
- : mred-invert/exv mred-exv eq-term_.
%worlds (term-block) (mred-invert/exv _ _).
%total {} (mred-invert/exv _ _).

