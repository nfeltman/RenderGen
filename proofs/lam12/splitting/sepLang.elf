%{ sepLang.elf }%

%% OUTPUT LANGUAGE
seperated : type. %name seperated S.
pipe : term lang1 -> (term lang2 -> term lang2) -> seperated.



%% MULTI-OUTPUT PIPELINE TYPING
tyM : type.
tyM_ : ty -> ty -> ty -> tyM.
ofM : seperated -> tyM -> type.
ofM-pipe : ofM (pipe C R) (tyM_ A T B)
	<- ({x} of x T -> of (R x) B)
	<- of C (prod A T).

tyM-wf : tyM -> type.
wf-tyM_ : tyM-wf (tyM_ A T B)
	<- ty-wf B
	<- ty-wf T
	<- ty-wf A.

%% SINGLE-OUTPUT PIPELINE TYPING
tyS : type.
ofS : seperated -> ty -> type.
ofS-pipe : ofS (pipe P R) A
	<- ({x} of x T -> of (R x) A)
	<- of P T.

%{
pval : seperatedM -> type.
pval-s	: pval (trivM I Q)
		<- mval I.

sstepM  : seperatedM -> seperatedM -> type.
sstepM-t : mstep wor1 I I' -> sstepM (trivM I Q) (trivM I' Q).
sstepM-p : mstep wor1 C C' -> sstepM (pipeM C R) (pipeM C' R).}%