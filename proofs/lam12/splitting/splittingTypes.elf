%% TYPE SPLITTING

tysplit : tyc -> ty -> ty -> ty -> type.

spl-unit : tysplit tyc-ztup unit unit unit.
spl-fut  : tysplit tyc-ztup (fut A) unit A.
spl-curr : tysplit tyc-ztup (curr A) A unit.
spl-prod : tysplit (tyc-tup IA IB) (prod A B) (prod A1 B1) (prod A2 B2)
	<- tysplit IB B B1 B2
	<- tysplit IA A A1 A2.
spl-arr  : tysplit (tyc-tup (tyc-tup IA IB) (tyc-ty T)) (arr A B) (arr A1 (prod B1 T)) (arr (prod A2 T) B2)
	<- tysplit IB B B1 B2
	<- tysplit IA A A1 A2.
%worlds () (tysplit _ _ _ _).
%unique tysplit +T +A -1A1 -1A2.

tysplit-pres : tysplit I A A1 A2 -> ty^wf A wor1 -> ibk A K -> hk I K -> ty-wf A1 -> ty-wf A2 -> type.
%mode tysplit-pres +Dspl +Dwf +Dhk +Dibk -Dwf1 -Dwf2.
- : tysplit-pres spl-unit _ _ _ ty-wf-unit ty-wf-unit.
- : tysplit-pres (spl-prod DsplA DsplB) (ty^wf-prod DwfA DwfB) (ibk-prod DibkA DibkB) (hk-tup DhkA DhkB) (ty-wf-prod DwfA1 DwfB1) (ty-wf-prod DwfA2 DwfB2)
	<- tysplit-pres DsplA DwfA DibkA DhkA DwfA1 DwfA2
	<- tysplit-pres DsplB DwfB DibkB DhkB DwfB1 DwfB2.
- : tysplit-pres spl-fut (ty^wf-fut Dwf) _ _ ty-wf-unit Dwf'
	<- wor2+mono Dwf Dwf'.
- : tysplit-pres spl-curr (ty^wf-curr Dwf) _ _ Dwf' ty-wf-unit
	<- worG+mono Dwf Dwf'.
- : tysplit-pres (spl-arr DsplA DsplB) (ty^wf-arr DwfA DwfB) (ibk-arr DibkA DibkB) (hk-tup (hk-tup DhkA DhkB) (hk-ty DwfT))
		(ty-wf-arr DwfA1 (ty-wf-prod DwfB1 DwfT)) (ty-wf-arr (ty-wf-prod DwfA2 DwfT) DwfB2)
	<- tysplit-pres DsplA DwfA DibkA DhkA DwfA1 DwfA2
	<- tysplit-pres DsplB DwfB DibkB DhkB DwfB1 DwfB2.
%worlds () (tysplit-pres _ _ _ _ _ _).
%total (D) (tysplit-pres D _ _ _ _ _).

tysplit-tot : ty^wf A wor1 -> ibk A K -> hk I K -> tysplit I A A1 A2 -> type.
%mode tysplit-tot +Dwf +Dibk +Dhk -Dspl.
- : tysplit-tot ty^wf-unit _ _ spl-unit.
- : tysplit-tot (ty^wf-fut _) _ _ spl-fut.
- : tysplit-tot (ty^wf-curr _) _ _ spl-curr.
- : tysplit-tot (ty^wf-prod DwfA DwfB) (ibk-prod DibkA DibkB) (hk-tup DhkA DhkB) (spl-prod DsplA DsplB)
	<- tysplit-tot DwfA DibkA DhkA DsplA
	<- tysplit-tot DwfB DibkB DhkB DsplB.
- : tysplit-tot (ty^wf-arr DwfA DwfB) (ibk-arr DibkA DibkB) (hk-tup (hk-tup DhkA DhkB) (hk-ty DwfT)) (spl-arr DsplA DsplB)
	<- tysplit-tot DwfA DibkA DhkA DsplA
	<- tysplit-tot DwfB DibkB DhkB DsplB.
%worlds () (tysplit-tot _ _ _ _).
%total (D) (tysplit-tot D _ _ _).
%{
tysplit-tot-pres : ty+wf A wor1 -> tysplit A A1 A2 -> ty-wf A1 -> ty-wf A2 -> type.
%mode tysplit-tot-pres +Dwf -Dspl -Dwf1 -Dwf2.
- : tysplit-tot-pres Dwf Dspl Dwf1 Dwf2
	<- tysplit-tot Dwf Dspl
	<- tysplit-pres Dspl Dwf Dwf1 Dwf2.
%worlds () (tysplit-tot-pres _ _ _ _).
%total {} (tysplit-tot-pres _ _ _ _).

tysplit-unique : tysplit A A1 A2 -> tysplit A A1' A2' -> eq-ty A1 A1' -> eq-ty A2 A2' -> type.
%mode tysplit-unique +Dspl +Dspl' -Deq1 -Deq2.
- : tysplit-unique spl-unit spl-unit eq-ty_ eq-ty_.
- : tysplit-unique spl-fut spl-fut eq-ty_ eq-ty_.
- : tysplit-unique (spl-prod DtsplA DtsplB) (spl-prod DtsplA' DtsplB') Deq1 Deq2
	<- tysplit-unique DtsplA DtsplA' DeqA1 DeqA2
	<- tysplit-unique DtsplB DtsplB' DeqB1 DeqB2
	<- eq-ty-cong prod DeqA1 DeqB1 Deq1
	<- eq-ty-cong prod DeqA2 DeqB2 Deq2.
- : tysplit-unique (spl-arr T DtsplA DtsplB) (spl-arr T DtsplA' DtsplB') Deq1 Deq2
	<- tysplit-unique DtsplA DtsplA' DeqA1 DeqA2
	<- tysplit-unique DtsplB DtsplB' DeqB1 DeqB2
	<- eq-ty-cong ([a][b] arr a (prod b T)) DeqA1 DeqB1 Deq1
	<- eq-ty-cong ([a][b] arr (prod a T) b) DeqA2 DeqB2 Deq2.
%worlds () (tysplit-unique _ _ _ _).
%total D (tysplit-unique D _ _ _).

spl-arr-inverts : tysplit (arr+ A T B) (arr A1 (prod B1 T')) (arr (prod A2 T'') B2) -> eq-ty T T' -> eq-ty T T'' -> type.
%mode spl-arr-inverts +Dtspl -Deq1 -Deq2.
- : spl-arr-inverts (spl-arr T _ _) eq-ty_ eq-ty_.
%worlds () (spl-arr-inverts _ _ _).
%total D (spl-arr-inverts D _ _).


tysplit-resp : tysplit A A1 A2 -> eq-ty A1 A1' -> eq-ty A2 A2' -> tysplit A A1' A2' -> type.
%mode tysplit-resp +Dtspl +Deq1 +Deq2 -Dtspl'.
- : tysplit-resp Dtspl eq-ty_ eq-ty_ Dtspl.
%worlds () (tysplit-resp _ _ _ _).
%total D (tysplit-resp D _ _ _).}%