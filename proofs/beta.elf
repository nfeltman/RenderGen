
beta :  term L -> term L -> type.

beta-pi1	: beta (pi1 (exv (tup E1 E2))) (exv E1).
beta-pi2	: beta (pi2 (exv (tup E1 E2))) (exv E2).
beta-unrl	: beta (unrl (exv (roll E))) (exv E).
beta-app	: beta (app (exv (lam M)) (exv E)) (M (lam M) E).
beta-case1	: beta (case (exv (inj1 E)) M N) (M E).
beta-case2	: beta (case (exv (inj2 E)) M N) (N E).

beta-tup	: beta (tup (exv V1) (exv V2)) (exv (tup V1 V2)).
beta-inj1	: beta (inj1 (exv V)) (exv (inj1 V)).
beta-inj2	: beta (inj2 (exv V)) (exv (inj2 V)).
beta-roll	: beta (roll (exv V)) (exv (roll V)).

%worlds (term-block) (beta _ _).
%unique beta +E -1E'.

excl-exv-beta : beta (exv E) E' -> false -> type.
%mode excl-exv-beta +Dstep -Dfalse.
%worlds () (excl-exv-beta _ _).
%total (Dstep) (excl-exv-beta Dstep _).


beta/unique : beta E E1 -> beta E E2 -> eq-term E1 E2 -> type.
%mode beta/unique +Dstep1 +Dstep2 -Deq.
- : beta/unique _ _ eq-term_.
%worlds (term-block) (beta/unique _ _ _).
%total D (beta/unique D _ _).


cont 	: (term L -> term L) -> type.
cont-pi1 : cont pi1.
cont-pi2 : cont pi2.
cont-inj1 : cont inj1.
cont-inj2 : cont inj2.
cont-roll : cont roll.
cont-unrl : cont unrl.


excl-exv-cont : cont F -> eq-term (exv E') (F E) -> false -> type.
%mode excl-exv-cont +Dcont +Deq -Dfalse.
%worlds () (excl-exv-cont _ _ _).
%total (Dstep) (excl-exv-cont Dstep _ _).
%{
excl-exv-cont : cont ([x] exv (F x)) -> false -> type.
%mode excl-exv-cont +Dcont -Dfalse.
%worlds () (excl-exv-cont _ _).
%total (Dstep) (excl-exv-cont Dstep _).}%