%% REDUCTION JUDGMENT
red : term -> term -> type. %name red Dred.
%mode red +E -V.
red-ztup : red ztup ztup.
red-lam  : red (lam A M) (lam A M).
red-app  : red (app E1 E2) V
        <- red E2 V2
        <- red E1 (lam A ([x] M x))
        <- red (M V2) V.
red-next  : red (next E) (next V)
        <- red E V.
red-prev  : red (prev E) V
        <- red E (next V).

%% VALUE JUDGMENT
pval : term -> type. %name pval Dpval.
pval-ztup	: pval ztup.
pval-lam	: pval (lam _ _).
pval-next	: pval (next E)
				<- pval E.

%% PRESERVATION AND EVALUATION
pres : red E V -> of E A W -> pval V -> of V A W -> type.
- : pres red-ztup of-ztup pval-ztup of-ztup.
- : pres red-lam (of-lam DofM Dwf) pval-lam (of-lam DofM Dwf).        
- : pres 
			(red-app 
				(DredM : red (M V2) V3) 
				(DredE1 : red E1 (lam A M)) 
				(DredE2 : red E2 V2)) 
			(of-app 
				(DofE1 : of E1 (arr A' B) W)
				(DofE2 : of E2 A' W)) 
			DvalV3 
			DofV3
        <- pres DredE1 DofE1 _ (DofLam' : of (lam A M) (arr A' B) W)						%% \x:A.M : A'->B
        <- lam-inverts DofLam' (DidtyA : idty A A')											%% A = A'
        <- idty-sym DidtyA (DidtyA' : idty A' A)											%% A' = A
        <- idty-cong-arr DidtyA' idty/refl (DidtyArr : idty (arr A' B) (arr A B))			%% A'->B = A->B
        <- of-resp DofLam' DidtyArr (of-lam _ ([x] [d:of x A W] DofM x d : of (M x) B W))	%% \A.M : A->B
        <- pres DredE2 DofE2 _ (DofV2' : of V2 A' W)										%% V2 : A'
        <- of-resp DofV2' DidtyA' (DofV2 : of V2 A W)										%% V2 : A
        <- pres DredM (DofM V2 DofV2) DvalV3 DofV3.
- : pres (red-next Dred) (of-next DofE) (pval-next DvalV) (of-next DofV) 
        <- pres Dred DofE DvalV DofV.
- : pres (red-prev Dred) (of-prev DofE) DvalV DofV 
		<- pres Dred DofE (pval-next DvalV) (of-next DofV).
        
%worlds () (pres _ _ _ _).
%total Dred (pres Dred _ _ _).