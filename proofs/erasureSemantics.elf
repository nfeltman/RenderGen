%% REDUCTION JUDGMENT
ered : term -> term -> type. %name ered Dred.
%mode ered +E -V.
ered-ztup : ered ztup ztup.
ered-tup  : ered (tup E1 E2) (tup V1 V2)
			<- ered E2 V2
			<- ered E1 V1.
ered-pi1  : ered (pi1 E) V
			<- ered E (tup V _).
ered-pi2  : ered (pi2 E) V
			<- ered E (tup _ V).
ered-lam  : ered (lam A M) (lam A M).
ered-app  : ered (app E1 E2) V
			<- ered E2 V2
			<- ered E1 (lam A ([x] M x))
			<- ered (M V2) V.
ered-let  : ered (let E M) V2
			<- ered E V1
			<- ered (M V1) V2.
ered-lett  : ered (lett E M) V3
			<- ered E (tup V1 V2)
			<- ered (M V1 V2) V3.
ered-next : ered (next E) (next V)
			<- ered E V.
ered-letn : ered (letn E M) V2
			<- ered E (next V1)
			<- ered (M V1) V2.
ered-prev : ered (prev E) V
			<- ered E (next V).

%% VALUE JUDGMENT
pval : term -> type. %name pval Dpval.
pval-ztup	: pval ztup.
pval-tup	: pval (tup E1 E2)
				<- pval E2
				<- pval E1.
pval-lam	: pval (lam _ _).
pval-next	: pval (next E)
				<- pval E.

%% PRESERVATION AND EVALUATION
pres : ered E V -> of E A W -> pval V -> of V A W -> type.
%mode pres +D1 +D2 -D3 -D4.
- : pres ered-ztup of-ztup pval-ztup of-ztup.
- : pres (ered-tup Dred1 Dred2) (of-tup DofE1 DofE2) (pval-tup Dval1 Dval2) (of-tup DofV1 DofV2)
		<- pres Dred1 DofE1 Dval1 DofV1
		<- pres Dred2 DofE2 Dval2 DofV2.
- : pres (ered-pi1 Dred) (of-pi1 DofE) Dval DofV
		<- pres Dred DofE (pval-tup Dval _) (of-tup DofV _).
- : pres (ered-pi2 Dred) (of-pi2 DofE) Dval DofV
		<- pres Dred DofE (pval-tup _ Dval) (of-tup _ DofV).
- : pres ered-lam (of-lam DofM Dwf) pval-lam (of-lam DofM Dwf).        
- : pres 
			(ered-app 
				(DredM : ered (M V2) V3) 
				(DredE1 : ered E1 (lam A M)) 
				(DredE2 : ered E2 V2)) 
			(of-app 
				(DofE1 : of E1 (arr A' B) W)
				(DofE2 : of E2 A' W)) 
			DvalV3 
			DofV3
        <- pres DredE1 DofE1 _ (DofLam' : of (lam A M) (arr A' B) W)						%% \A.M : A'->B
        <- pres DredE2 DofE2 _ (DofV2' : of V2 A' W)										%% V2 : A'
        <- lam-annot DofLam' DofV2' (of-lam _ ([x] [d] DofM x d : of (M x) B W)) DofV2		%% \A.M : A->B; V2 : A
        <- pres DredM (DofM V2 DofV2) DvalV3 DofV3.
- : pres 	(ered-let Dred2 Dred1) 
			(of-let (DofE2 : {x:term} of x A W -> of (E2 x) B W) DofE1) 
			Dval DofV2
		<- pres Dred1 DofE1 _ DofV1
		<- pres Dred2 (DofE2 V1 DofV1) Dval DofV2.
- : pres (ered-next Dred) (of-next DofE) (pval-next DvalV) (of-next DofV) 
        <- pres Dred DofE DvalV DofV.
- : pres (ered-letn Dred2 Dred1) (of-letn DofE2 DofE1) Dval DofV2
		<- pres Dred1 DofE1 _ (of-next DofV1)
		<- pres Dred2 (DofE2 V1 DofV1) Dval DofV2.
- : pres (ered-prev Dred) (of-prev DofE) DvalV DofV 
		<- pres Dred DofE (pval-next DvalV) (of-next DofV).
        
%worlds () (pres _ _ _ _).
%total Dred (pres Dred _ _ _).

%% REDUCTION IS IDEMPOTENT
idem : ered E V -> ered V V -> type.
%mode idem +Dred1 -Dred2.
- : idem ered-ztup ered-ztup.
- : idem (ered-tup Dred1 Dred2) (ered-tup Dself1 Dself2)
	<- idem Dred1 Dself1
	<- idem Dred2 Dself2.
- : idem (ered-pi1 Dred) Dself
	<- idem Dred (ered-tup Dself _).
- : idem (ered-pi2 Dred) Dself
	<- idem Dred (ered-tup _ Dself).
- : idem ered-lam ered-lam.
- : idem (ered-app DredM _ _) Dself
	<- idem DredM Dself.
- : idem (ered-let DredM _) Dself
	<- idem DredM Dself.
- : idem (ered-lett DredM _) Dself
	<- idem DredM Dself.
- : idem (ered-next Dred) (ered-next Dself)
	<- idem Dred Dself.
- : idem (ered-letn DredM _) Dself
	<- idem DredM Dself.
- : idem (ered-prev Dred) Dself
	<- idem Dred (ered-next Dself).
%worlds () (idem _ _).
%total Dred (idem Dred _).