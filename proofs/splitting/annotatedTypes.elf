%% KINDS
kind : type.
k-ty : kind.
k-unit : kind.
k-prod : kind -> kind -> kind.

%% CONSTRUCTORS
tyc : type.
tyc-ztup : tyc.
tyc-tup : tyc -> tyc -> tyc.
tyc-ty : ty -> tyc.

%% HAS KIND
hk : tyc -> kind -> type.
hk-ztup : hk tyc-ztup k-unit.
hk-ty : hk (tyc-ty T) k-ty
		<- ty-wf T.
hk-tup : hk (tyc-tup T1 T2) (k-prod K1 K2)
	<- hk T2 K2
	<- hk T1 K1.

%% INTERNAL BOUNDARY KIND
ibk : ty -> kind -> type.
ibk-unit : ibk unit k-unit.
ibk-fut : ibk (fut _) k-unit.
ibk-curr : ibk (curr _) k-unit.
ibk-prod : ibk (prod T1 T2) (k-prod K1 K2)
	<- ibk T2 K2
	<- ibk T1 K1.
ibk-arr : ibk (arr T1 T2) (k-prod (k-prod K1 K2) k-ty)
	<- ibk T2 K2
	<- ibk T1 K1.
%worlds () (ibk _ _).
%unique ibk +T -1K.


%% BOUNDARY TYPING JUDGMENT
hb1		: of^ E A wor1 -> ty -> tyc -> type.
hb-val 	: of^ E A wor1 -> tyc -> type.
hb2 	: of^ E A wor2 -> ty -> type.

hbv-ztup	: hb-val of^-ztup tyc-ztup.
hbv-tup		: hb-val (of^-tup Dof1 Dof2) (tyc-tup T1 T2)
			<- hb-val Dof2 T2
			<- hb-val Dof1 T1.
hbv-lam		: hb-val (of^-lam (Dwf : ty^wf A wor1) DofM) (tyc-tup (tyc-tup T1 T2) (tyc-ty A))
			<- ({x}{ofx : of^ x A wor1} hb-val ofx T1 -> hb1 (DofM x ofx) A T2)
			<- hk T1 K
			<- ibk A K.

hb1-exv : hb1 (of^-exv Dof) unit T
		<- hb-val Dof T.
hb1-tup : hb1 (of^-tup Dof1 Dof2) (prod A1 A2) (tyc-tup T1 T2)
		<- hb1 Dof2 A2 T2
		<- hb1 Dof1 A1 T1.
hb1-pi1 : hb1 (of^-pi1 Dof) A T
		<- hb1 Dof A (tyc-tup T _).
hb1-pi2 : hb1 (of^-pi2 Dof) A T
		<- hb1 Dof A (tyc-tup _ T).
hb1-app : hb1 (of^-app Dof1 Dof2) (prod (prod A1 A2) A3) T2
		<- hb1 Dof2 A2 T1
		<- hb1 Dof1 A1 (tyc-tup (tyc-tup T1 T2) (tyc-ty A3)).
hb1-next : hb1 (of^-next Dof) A tyc-ztup
		<- hb2 Dof A.

hb2-exv : hb2 (of^-exv Dof) unit.
hb2-tup : hb2 (of^-tup Dof1 Dof2) (prod A1 A2)
		<- hb2 Dof2 A2
		<- hb2 Dof1 A1.
hb2-pi1 : hb2 (of^-pi1 Dof) A
		<- hb2 Dof A.
hb2-pi2 : hb2 (of^-pi2 Dof) A
		<- hb2 Dof A.
hb2-app : hb2 (of^-app Dof1 Dof2) (prod A1 A2)
		<- hb2 Dof2 A2
		<- hb2 Dof1 A1.
hb2-prev : hb2 (of^-prev Dof) A
		<- hb1 Dof A tyc-ztup.
hb2-lam	: hb2 (of^-lam _ DofM) A
			<- ({x}{ofx : of^ x T wor2} hb2 (DofM x ofx) A).
hb2-let	: hb2 (of^-let DofE DofM) (prod A1 A2)
			<- ({x}{ofx : of^ x T wor2} hb2 (DofM x ofx) A2)
			<- hb2 DofE A1.

%% OUTPUTS OF BOUNDARY TYPING ARE WELL-FORMED
hb1-wf : form^ E comp1 wor1 -> hb1 (_ : of^ E A wor1) B T -> ty-wf B -> ibk A K -> hk T K -> type.
%mode hb1-wf +Dcomp +Dhb -Dwf -Dibk -Dhk. 
hbv-wf : form^ E norm1 wor1 -> hb-val (_ : of^ E A wor1) T -> ibk A K -> hk T K -> type.
%mode hbv-wf +Dcomp +Dhb -Dibk -Dhk. 
hb2-wf : form^ E comp1 wor2 -> hb2 (_ : of^ E A wor2) B -> ty-wf B -> type.
%mode hb2-wf +Dcomp +Dhb -Dwf. 

- : hbv-wf _ hbv-ztup ibk-unit hk-ztup.
- : hbv-wf (form^tup-n Dval1 Dval2) (hbv-tup Dhb1 Dhb2) (ibk-prod Dibk1 Dibk2) (hk-tup Dhk1 Dhk2)
	<- hbv-wf Dval1 Dhb1 Dibk1 Dhk1
	<- hbv-wf Dval2 Dhb2 Dibk2 Dhk2.
- : hbv-wf (form^lam1 Dcomp _) (hbv-lam Dibk1 Dhk1 Dhb) (ibk-arr Dibk1 Dibk2) (hk-tup (hk-tup Dhk1 Dhk2) (hk-ty Dwf))
	<- ({x}{ofx}{vx}{xb : hb-val ofx T} hbv-wf vx xb Dibk1 Dhk1 ->
		hb1-wf (Dcomp x vx) (Dhb x ofx xb) Dwf Dibk2 Dhk2).


- : hb1-wf (form^exv Dcomp) (hb1-exv Dhb) ty-wf-unit Dibk Dhk
	<- hbv-wf Dcomp Dhb Dibk Dhk.
- : hb1-wf (form^tup-c Dcomp1 Dcomp2) (hb1-tup Dhb1 Dhb2) (ty-wf-prod Dwf1 Dwf2) (ibk-prod Dibk1 Dibk2) (hk-tup Dhk1 Dhk2)
	<- hb1-wf Dcomp1 Dhb1 Dwf1 Dibk1 Dhk1
	<- hb1-wf Dcomp2 Dhb2 Dwf2 Dibk2 Dhk2.
- : hb1-wf (form^pi1-c Dcomp) (hb1-pi1 Dhb) Dwf Dibk Dhk
	<- hb1-wf Dcomp Dhb Dwf (ibk-prod Dibk _) (hk-tup Dhk _).
- : hb1-wf (form^pi2-c Dcomp) (hb1-pi2 Dhb) Dwf Dibk Dhk
	<- hb1-wf Dcomp Dhb Dwf (ibk-prod _ Dibk) (hk-tup _ Dhk).
- : hb1-wf (form^app-c Dcomp1 Dcomp2) (hb1-app Dhb1 Dhb2) (ty-wf-prod (ty-wf-prod Dwf1 Dwf2) Dwf3) Dibk2 Dhk2
	<- hb1-wf Dcomp1 Dhb1 Dwf1 (ibk-arr _ Dibk2) (hk-tup (hk-tup _ Dhk2) (hk-ty Dwf3))
	<- hb1-wf Dcomp2 Dhb2 Dwf2 _ _.
- : hb1-wf (form^next-c Dcomp) (hb1-next Dhb) Dwf ibk-fut hk-ztup
	<- hb2-wf Dcomp Dhb Dwf.

- : hb2-wf (form^exv Dcomp) hb2-exv ty-wf-unit.
- : hb2-wf (form^tup-c Dcomp1 Dcomp2) (hb2-tup Dhb1 Dhb2) (ty-wf-prod Dwf1 Dwf2)
	<- hb2-wf Dcomp1 Dhb1 Dwf1
	<- hb2-wf Dcomp2 Dhb2 Dwf2.
- : hb2-wf (form^pi1-c Dcomp) (hb2-pi1 Dhb) Dwf
	<- hb2-wf Dcomp Dhb Dwf.
- : hb2-wf (form^pi2-c Dcomp) (hb2-pi2 Dhb) Dwf
	<- hb2-wf Dcomp Dhb Dwf.
- : hb2-wf (form^app-c Dcomp1 Dcomp2) (hb2-app Dhb1 Dhb2) (ty-wf-prod Dwf1 Dwf2)
	<- hb2-wf Dcomp1 Dhb1 Dwf1
	<- hb2-wf Dcomp2 Dhb2 Dwf2.
- : hb2-wf (form^prev Dcomp) (hb2-prev Dhb) Dwf
	<- hb1-wf Dcomp Dhb Dwf _ _.
- : hb2-wf (form^lam2c Dcomp) (hb2-lam Dhb) Dwf
	<- ({x}{ofx}{vx} hb2-wf (Dcomp x vx) (Dhb x ofx) Dwf).
- : hb2-wf (form^let-c DcompE DcompM) (hb2-let DhbE DhbM) (ty-wf-prod Dwf1 Dwf2)
	<- hb2-wf DcompE DhbE Dwf1
	<- ({x}{ofx}{vx} hb2-wf (DcompM x vx) (DhbM x ofx) Dwf2).

%block hb-wf-var1 : some {L : lang} {A : ty} {K : kind} {Dibk : ibk A K} {TC : tyc} {Dhk : hk TC K}
	block {x:term L} {ofx:of^ x A wor1} {vx:form^ x norm1 wor1} 
	{xb : hb-val ofx TC} {_: hbv-wf vx xb Dibk Dhk}.
%block hb-wf-var2 : some {L : lang} {A : ty}
	block {x:term L} {ofx:of^ x A wor2} {vx:form^ x vars2 wor2}.
%worlds (hb-wf-var1 | hb-wf-var2) (hb1-wf _ _ _ _ _) (hbv-wf _ _ _ _) (hb2-wf _ _ _).
%total (D1 D2 D3) (hb1-wf D1 _ _ _ _) (hbv-wf D2 _ _ _) (hb2-wf D3 _ _).


%% TYPES AT TWO ARE MONOTYPES
wor2+mono : ty^wf A wor2 -> ty-wf A -> type.
%mode wor2+mono +Dwf -Dwf'.
- : wor2+mono ty^wf-unit ty-wf-unit.
- : wor2+mono (ty^wf-prod Dwf1 Dwf2) (ty-wf-prod Dwf1' Dwf2')
	<- wor2+mono Dwf1 Dwf1'
	<- wor2+mono Dwf2 Dwf2'.
- : wor2+mono (ty^wf-arr Dwf1 Dwf2) (ty-wf-arr Dwf1' Dwf2')
	<- wor2+mono Dwf1 Dwf1'
	<- wor2+mono Dwf2 Dwf2'.
%worlds () (wor2+mono _ _).
%total (D) (wor2+mono D _).