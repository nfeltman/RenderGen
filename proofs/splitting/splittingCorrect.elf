
%% GROUND VALUE SPLITTING PRODUCES VALUES
gval-to-val : splitGv E I -> val I -> type.
%mode gval-to-val +Dsplv -Dval.
- : gval-to-val splgv-ztup val-ztup.
- : gval-to-val (splgv-tup Dsplv1 Dsplv2) (val-tup Dval1 Dval2)
	<- gval-to-val Dsplv1 Dval1
	<- gval-to-val Dsplv2 Dval2.
- : gval-to-val (splgv-lam _) val-lam.
%worlds (term-block | any-splitres) (gval-to-val _ _).
%total (D) (gval-to-val D _).

%% VALUE SPLITTING PRODUCES VALUES
val-to-val : splitval E I Q -> val I -> type.
%mode val-to-val +Dsplv -Dval.
- : val-to-val splv-ztup val-ztup.
- : val-to-val (splv-grnd Dsplgv) Dval
	<- gval-to-val Dsplgv Dval.
- : val-to-val (splv-next _) val-ztup.
- : val-to-val (splv-tup Dsplv1 Dsplv2) (val-tup Dval1 Dval2)
	<- val-to-val Dsplv1 Dval1
	<- val-to-val Dsplv2 Dval2.
- : val-to-val (splv-lam _) val-lam.
%worlds (term-block | any-splitres) (val-to-val _ _).
%total (D) (val-to-val D _).

%block correctness-block : 
	some {A : ty}
	block {x : term lang0} {vx : variable x} {x2:term lang2} 
	{ofx : of^ x A wor2 dot-d} {splx:splitres x x2} {_ : splr-total ofx splx}.


%% GROUND SPLITTING CORRECTNESS
scG : of^ E A worG dot-t -> splitG E' I' -> mred I' V -> mstep worG E E' -> splitG E I -> mred I V -> type.
%mode scG +Dof +Dstep +Dspl' +Dred' -Dspl -Dred.
- : scG (of^-pi1 (of^-exv (of^-tup _ Dof2)) _)
	(splg-exv Dsplg1)
	Dred1
	(ms-pi1-r _)
	(splg-pi1 (splg-exv (splgv-tup Dsplg1 Dsplg2))) 
	(mred-pi1 (mred-tup Dred1 Dred2))
	<- splgv-total Dof2 Dsplg2
	<- gval-to-val Dsplg2 Dval2
	<- val-auto Dval2 Dred2.
- : scG (of^-pi2 (of^-exv (of^-tup Dof1 _)) _)
	(splg-exv Dsplg2)
	Dred2
	(ms-pi2-r _)
	(splg-pi2 (splg-exv (splgv-tup Dsplg1 Dsplg2))) 
	(mred-pi2 (mred-tup Dred1 Dred2))
	<- splgv-total Dof1 Dsplg1
	<- gval-to-val Dsplg1 Dval1
	<- val-auto Dval1 Dred1.
- : scG Dof
	(Dsplg3 : splitG (M E) I')
	(Dred3 : mred I' _)
	(ms-app-r _ : mstep worG (app (exv (lam M)) (exv E)) (M E))
	(splg-app (splg-exv (splgv-lam DsplM)) (splg-exv DsplE)) 
	(mred-app Dred3' Dred1 Dred2)
	<- splg-total Dof (splg-app 
		(splg-exv (splgv-lam (DsplM : {x}{x1} splitGv x x1 -> splitG (M x) (N x1)))) 
		(splg-exv (DsplE : splitGv E I)))
	<- splitG-unique Dsplg3 (DsplM E I DsplE : splitG (M E) (N I)) (Deq : eq-term I' (N I : term lang1))
	<- mred-resp Dred3 Deq eq-term_ Dred3'
	<- gval-to-val (splgv-lam DsplM) Dval1
	<- val-auto Dval1 Dred1
	<- gval-to-val DsplE Dval2
	<- val-auto Dval2 Dred2.
- : scG _ (splg-exv (splgv-tup Dsplg1 Dsplg2)) Dred ms-tup-d (splg-tup (splg-exv Dsplg1) (splg-exv Dsplg2)) Dred.
- : scG (of^-tup Dof _) (splg-tup Dsplg' DsplgB) (mred-tup Dred' DredB) 
		(ms-tup-s1 Dstep) (splg-tup Dsplg DsplgB) (mred-tup Dred DredB)
	<- scG Dof Dsplg' Dred' Dstep Dsplg Dred.
- : scG (of^-tup _ Dof) (splg-tup DsplgB Dsplg') (mred-tup DredB Dred') 
		(ms-tup-s2 Dstep) (splg-tup DsplgB Dsplg) (mred-tup DredB Dred)
	<- scG Dof Dsplg' Dred' Dstep Dsplg Dred.
- : scG (of^-pi1 Dof _) (splg-pi1 Dsplg') (mred-pi1 Dred') (ms-pi1-s Dstep) (splg-pi1 Dsplg) (mred-pi1 Dred)
	<- scG Dof Dsplg' Dred' Dstep Dsplg Dred.
- : scG (of^-pi2 Dof _) (splg-pi2 Dsplg') (mred-pi2 Dred') (ms-pi2-s Dstep) (splg-pi2 Dsplg) (mred-pi2 Dred)
	<- scG Dof Dsplg' Dred' Dstep Dsplg Dred.
- : scG (of^-app Dof _ _) (splg-app Dsplg' DsplgB) (mred-app DredM Dred' DredB) 
		(ms-app-s1 Dstep) (splg-app Dsplg DsplgB) (mred-app DredM Dred DredB)
	<- scG Dof Dsplg' Dred' Dstep Dsplg Dred.
- : scG (of^-app _ Dof _) (splg-app DsplgB Dsplg') (mred-app DredM DredB Dred') 
		(ms-app-s2 Dstep) (splg-app DsplgB Dsplg) (mred-app DredM DredB Dred)
	<- scG Dof Dsplg' Dred' Dstep Dsplg Dred.
%worlds (correctness-block) (scG _ _ _ _ _ _).
%total (D) (scG _ _ _ D _ _).

%% LIFTING CORRECTNESS
lc : split1 E C R -> 
	({x}{x2} splitres x x2 -> split1 (E' x) C' (R' x2)) -> 
	lstep E Q E' ->
	eq-term C C' -> type.
%mode lc +DsplE +DsplE' +Dstep -Deq.

%% LIFT RULES
- : lc (spl1-next (spl2-exv _)) ([x][x2][s] spl1-exv (splv-next _)) (ls-next-r _) eq-term_.
- : lc (spl1-tup Dspl DsplB) ([x][x2][s] spl1-tup (Dspl' x x2 s) (DsplB' x x2 s)) (ls-tup-s1 Dstep) Deq'
	<- lc Dspl Dspl' Dstep Deq
	<- split1-unique DsplB (DsplB' ztup ztup splr-ztup : split1 B _ _) DeqB _
	<- ({y}{z} eq-cong/lett DeqB ([x][y] eq-term_) (DeqB' y z))
	<- eq-cong/lett Deq DeqB' Deq'.
- : lc (spl1-tup DsplB Dspl) ([x][x2][s] spl1-tup (DsplB' x x2 s) (Dspl' x x2 s)) (ls-tup-s2 Dstep) Deq''
	<- lc Dspl Dspl' Dstep Deq
	<- split1-unique DsplB (DsplB' ztup ztup splr-ztup) DeqB _
	<- ({y}{z} eq-cong/lett Deq ([x][y] eq-term_) (Deq' y z))
	<- eq-cong/lett DeqB Deq' Deq''.
- : lc (spl1-pi1 Dspl) ([x][x2][s] spl1-pi1 (Dspl' x x2 s)) (ls-pi1-s Dstep) Deq'
	<- lc Dspl Dspl' Dstep Deq
	<- eq-cong/lett Deq ([x][y] eq-term_) Deq'.
- : lc (spl1-pi2 Dspl) ([x][x2][s] spl1-pi2 (Dspl' x x2 s)) (ls-pi2-s Dstep) Deq'
	<- lc Dspl Dspl' Dstep Deq
	<- eq-cong/lett Deq ([x][y] eq-term_) Deq'.
- : lc (spl1-app Dspl DsplB) ([x][x2][s] spl1-app (Dspl' x x2 s) (DsplB' x x2 s)) (ls-app-s1 Dstep) Deq'
	<- lc Dspl Dspl' Dstep Deq
	<- split1-unique DsplB (DsplB' ztup ztup splr-ztup : split1 B _ _) DeqB _
	<- ({y}{z} eq-cong/lett DeqB ([x][y] eq-term_) (DeqB' y z))
	<- eq-cong/lett Deq DeqB' Deq'.
- : lc (spl1-app DsplB Dspl) ([x][x2][s] spl1-app (DsplB' x x2 s) (Dspl' x x2 s)) (ls-app-s2 Dstep) Deq''
	<- lc Dspl Dspl' Dstep Deq
	<- split1-unique DsplB (DsplB' ztup ztup splr-ztup) DeqB _
	<- ({y}{z} eq-cong/lett Deq ([x][y] eq-term_) (Deq' y z))
	<- eq-cong/lett DeqB Deq' Deq''.
%worlds (correctness-block) (lc _ _ _ _).
%total (D) (lc D _ _ _).

%{
lc :  lstep E Q E' -> split1 E C R -> splitres Q Q' -> ({x}{x2} splitres x x2 -> split1 (E' x) C (R' x2)) -> type.
%mode lc +Dstep +DsplE -DsplrQ -DsplE'.
%% LIFT RULES
- : lc (ls-next-r _) (spl1-next (spl2-exv Dsplr)) Dsplr ([x][x2][s] spl1-exv (splv-next s)).
- : lc (ls-tup-s1 Dstep) (spl1-tup DsplA DsplB) Dsplr ([x][x2][s] spl1-tup (DsplA' x x2 s) DsplB)
	<- lc Dstep DsplA Dsplr DsplA'.
- : lc (ls-tup-s2 Dstep) (spl1-tup DsplA DsplB) Dsplr ([x][x2][s] spl1-tup DsplA (DsplB' x x2 s))
	<- lc Dstep DsplB Dsplr DsplB'.
- : lc (ls-pi1-s Dstep) (spl1-pi1 Dspl) Dsplr ([x][x2][s] spl1-pi1 (Dspl' x x2 s))
	<- lc Dstep Dspl Dsplr Dspl'.
- : lc (ls-pi2-s Dstep) (spl1-pi2 Dspl) Dsplr ([x][x2][s] spl1-pi2 (Dspl' x x2 s))
	<- lc Dstep Dspl Dsplr Dspl'.
- : lc (ls-app-s1 Dstep) (spl1-app DsplA DsplB) Dsplr ([x][x2][s] spl1-app (DsplA' x x2 s) DsplB)
	<- lc Dstep DsplA Dsplr DsplA'.
- : lc (ls-app-s2 Dstep) (spl1-app DsplA DsplB) Dsplr ([x][x2][s] spl1-app DsplA (DsplB' x x2 s))
	<- lc Dstep DsplB Dsplr DsplB'.
%worlds (correctness-block) (lc _ _ _ _).
%total (D) (lc D _ _ _).}%

%% USES UNIQUENESS OF SPLITTING TO SHOW REDUCTION RESPECTS IT
split-eval-resp : split1 E C _ -> split1 E C' _ -> mred C (tup I B) -> mred C' (tup I B) -> type.
%mode split-eval-resp +Dspl +Dspl' +Dred -Dred'.
- : split-eval-resp _ _ Dred Dred.
%worlds (correctness-block) (split-eval-resp _ _ _ _).
%total {} (split-eval-resp _ _ _ _).

split-eval-eq : split1 E C _ -> mred C V -> split1 E C' _  -> mred C' V' -> eq-term V V' -> type.
%mode split-eval-eq +Dspl +Dspl' +Dred +Dred' -Deq.
- : split-eval-eq _ Dred _ Dred' Deq
	<- mred-unique Dred Dred' Deq.
%worlds (correctness-block) (split-eval-eq _ _ _ _ _).
%total {} (split-eval-eq _ _ _ _ _).

strengthen-split-eval : 
	({x : term lang0}{x2 : term lang2} splitres x x2 -> split2 (E x) (P x x2) (Q x x2)) -> 
	({x : term lang0}{x2 : term lang2} mred (P x x2) (V x x2)) ->
	({x : term lang0}{x2 : term lang2} splitres x x2 -> split2 (E x) P' (Q' x2)) ->
	mred P' V' -> type.
%mode strengthen-split-eval +Dspl +Dred -Dspl' -Dred.
- : strengthen-split-eval 
		([x][x2][s] Dsplr x x2 s : split2 (E x) (P x x2) (Q x x2))
		([x][x2] Dred x x2 : mred (P x x2) (V x x2))
		Dsplr'
		(Dred' ztup ztup)
	<- ({x2} lang-indep neq-lang_01 ([x] P x x2) ([x] DeqP0 x x2 : eq-term (P x x2) (P' x2)))
	<- lang-indep neq-lang_21 P' ([x2] DeqP2 x2 : eq-term (P' x2) P'')
	<- ({x}{x2} eq-term-trans (DeqP0 x x2) (DeqP2 x2) (DeqP x x2 : eq-term (P x x2) P''))
	<- ({l}{x2} lang-indep neq-lang_02 ([x] Q x x2 l) ([x] DeqQ x x2 l))
	<- ({x}{x2}{s} split2-resp (Dsplr x x2 s) eq-term_ (DeqP x x2) (DeqQ x x2) (Dsplr' x x2 s))
	<- ({x2} lang-indep neq-lang_01 ([x] V x x2) ([x] DeqV0 x x2 : eq-term (V x x2) (V' x2)))
	<- lang-indep neq-lang_21 V' ([x2] DeqV2 x2 : eq-term (V' x2) V'')
	<- ({x}{x2} eq-term-trans (DeqV0 x x2) (DeqV2 x2) (DeqV x x2 : eq-term (V x x2) V''))
	<- ({x}{x2} mred-resp (Dred x x2) (DeqP x x2) (DeqV x x2) (Dred' x x2)).
%worlds (term-block | splitting-block) (strengthen-split-eval _ _ _ _).
%total (D) (strengthen-split-eval D _ _ _).

%% LEMMAS FOR SPLITTING CORRECTNESS
sc1/app-r : of^ (app (exv (lam M)) (exv E)) A wor1 dot-t -> 
		split1 (M E) C' _ -> 
		mred C' (tup I _) -> 
		split1 (app (exv (lam M)) (exv E)) C _ -> 
		mred C (tup I _) -> type.
%mode sc1/app-r +Dof +Dspl' +Dred' -Dspl -Dred.

- : sc1/app-r Dof Dspl Dred
	(spl1-app (spl1-exv (splv-lam DsplM)) (spl1-exv DsplV))
	(mred-lett 
		(mred-lett 
			(mred-lett 
				(mred-tup DautoI (mred-tup (mred-tup mred-ztup mred-ztup) DautoB))
				(mred-app Dred'' mred-lam DautoV)
				)
			(mred-tup DautoV mred-ztup)
			)
		(mred-tup mred-lam mred-ztup)
		)
	<- spl1-total Dof (spl1-app (spl1-exv (splv-lam DsplM)) (spl1-exv (DsplV : splitval V Vi Vq)))
	<- split-eval-resp Dspl (DsplM V Vi Vq DsplV) Dred Dred''
	<- idem Dred (mred-tup DautoI DautoB)
	<- val-to-val DsplV DvalV
	<- val-auto DvalV DautoV.
%worlds (correctness-block) (sc1/app-r _ _ _ _ _).
%total (D) (sc1/app-r D _ _ _ _).


%% SPLITTING CORRECTNESS
sc1 : of^ E A wor1 dot-t -> split1 E' C' R' -> mred C' (tup I B') -> mstep wor1 E E' -> split1 E C R -> mred C (tup I B) -> lang-convert B (B2 : term lang2) -> lang-convert B' (B2' : term lang2) -> %{reqv (R B2) (R' B2') ->}% type.
%mode sc1 +Dof +Dstep +Dspl' +Dred' -Dspl -Dred -Dconv -Dconv'.
sc2 : of^ E A wor2 dot-t -> split2 E' P' R' -> mred P' B' -> mstep wor2 E E' -> split2 E P R -> mred P B -> lang-convert B (B2 : term lang2) -> lang-convert B' (B2' : term lang2) -> type.
%mode sc2 +Dof +Dstep +Dspl' +Dred' -Dspl -Dred -Dconv -Dconv'.

%% STAGE ONE REDUCTION RULES

- : sc1 (of^-pi1 (of^-exv (of^-tup _ Dof2)) _) 
	(spl1-exv Dspl1) (mred-tup Dred1 mred-ztup)
	(ms-pi1-r _)
	(spl1-pi1 (spl1-exv (splv-tup Dspl1 Dspl2)))
	(mred-lett 
		(mred-tup (mred-pi1 (mred-tup Didem1 Didem2)) mred-ztup) 
		(mred-tup (mred-tup Dred1 Didem2) mred-ztup))
	conv-ztup
	conv-ztup
	<- idem Dred1 Didem1
	<- splv-total Dof2 Dspl2
	<- val-to-val Dspl2 Dval2
	<- val-auto Dval2 Didem2.
- : sc1 (of^-pi2 (of^-exv (of^-tup Dof1 _)) _)
	(spl1-exv Dspl2) (mred-tup Dred2 mred-ztup)
	(ms-pi2-r _)
	(spl1-pi2 (spl1-exv (splv-tup Dspl1 Dspl2)))
	(mred-lett 
		(mred-tup (mred-pi2 (mred-tup Didem1 Didem2)) mred-ztup) 
		(mred-tup (mred-tup Didem1 Dred2) mred-ztup))
	conv-ztup
	conv-ztup
	<- idem Dred2 Didem2
	<- splv-total Dof1 Dspl1
	<- val-to-val Dspl1 Dval1
	<- val-auto Dval1 Didem1.
- : sc1 Dof Dspl' Dred'
	(Dstep : mstep wor1 (app (exv (lam M)) (exv E)) V) 
	Dspl Dred Dconv Dconv'
	<- step/unique Dstep (ms-app-r fsw-wor1) (Deq : eq-term V (M E))
	<- split1-resp Dspl' Deq eq-term_ ([x] eq-term_) Dspl''
	<- sc1/app-r Dof Dspl'' Dred' Dspl Dred
	<- lang-convert_12-total _ Dconv'
	<- lang-convert_12-total _ Dconv.
- : sc2 Dof 
		(spl2-exv Dsplr : split2 (exv E) ztup _) mred-ztup
		(Dstep : mstep wor2 (prev (exv (next E))) (exv E)) 
		(spl2-prev (spl1-exv (splv-next Dsplr))) (mred-pi2 (mred-tup mred-ztup mred-ztup)) conv-ztup conv-ztup.

%% STAGE ONE DONENESS MARKING
- : sc1 (of^-tup (of^-exv Dof1) (of^-exv Dof2))
		(Dspl : split1 (exv (tup E1 E2)) C _)
		(Dred : mred C (tup I B))
		(ms-tup-d : mstep wor1 (tup (exv E1) (exv E2)) (exv (tup E1 E2)))
		(spl1-tup (spl1-exv Dsplv1) (spl1-exv Dsplv2)) 
		Dred'
		conv-tupzz
		Dconv
	<- splv-total Dof1 (Dsplv1 : splitval E1 I1 _)
	<- val-to-val Dsplv1 Dval1 
	<- val-auto Dval1 (Dauto1 : mred I1 I1)
	<- splv-total Dof2 (Dsplv2 : splitval E2 I2 _)
	<- val-to-val Dsplv2 Dval2
	<- val-auto Dval2 (Dauto2 : mred I2 I2)
	<- split-eval-eq 
		(spl1-exv (splv-tup Dsplv1 Dsplv2)) (mred-tup (mred-tup Dauto1 Dauto2) mred-ztup) 
		Dspl Dred 
		(Deq : eq-term (tup (tup I1 I2) ztup) (tup I B))
	<- eq-gnoc/tup Deq (Deq' : eq-term (tup I1 I2) I) _
	<- eq-cong2 tup Deq' eq-term_ Deq''
	<- mred-resp 
		(mred-lett 
			(mred-lett 
				(mred-tup (mred-tup Dauto1 Dauto2) (mred-tup mred-ztup mred-ztup))
				(mred-tup Dauto2 mred-ztup))
			(mred-tup Dauto1 mred-ztup))
		eq-term_ Deq'' Dred'
	<- lang-convert_12-total B Dconv.

- : sc1 (of^-next-t (of^-exv Dof))
		(Dspl' : split1 (exv (next E)) C _) (Dred' : mred C (tup I _))
		(ms-next-d _ :  mstep wor1 (next (exv E)) (exv (next E)))
		(spl1-next (spl2-exv Dsplr)) Dred Dconv Dconv
		<- splr-total Dof Dsplr
		<- split-eval-resp Dspl' (spl1-exv (splv-next Dsplr)) Dred' Dred
		<- lang-convert_12-total _ Dconv.

- : sc1 (of^-grnd (of^-exv Dof))
		(Dspl' : split1 (exv (grnd E)) C _) (Dred' : mred C (tup I _))
		(ms-grnd-d :  mstep wor1 (grnd (exv E)) (exv (grnd E)))
		(spl1-grnd (splg-exv Dsplr)) Dred Dconv Dconv'
		<- splgv-total Dof Dsplr
		<- split1-unique Dspl' (spl1-exv (splv-grnd Dsplr)) Deq _
		<- mred-resp Dred' Deq eq-term_ Dred
		<- lang-convert_12-total _ Dconv'
		<- lang-convert_12-total _ Dconv.


%% STAGE ONE SUBSTEPS

- : sc1 (of^-pi1 Dof _) (spl1-pi1 Dspl') 
		(mred-lett 
			(mred-tup (mred-pi1 (DredI' : mred I' (tup I _))) _)
			(DredC' : mred C' (tup I' _))
		)
		(ms-pi1-s Dstep)
		(spl1-pi1 Dspl) (mred-lett (mred-tup (mred-pi1 DautoII2) DautoB) DredC)
		Dconv Dconv'
	<- idem DredC' (mred-tup (DautoI' : mred I' I') _)
	<- mred-unique DautoI' DredI' (Deq : eq-term I' (tup I _))
	<- eq-cong2 tup Deq eq-term_ (Deq' : eq-term (tup I' _) (tup (tup I _) _))
	<- mred-resp DredC' eq-term_ Deq' (DredC2' : mred C' (tup (tup I _) _))
	<- sc1 Dof Dspl' DredC2' Dstep Dspl (DredC : mred C (tup (tup I _) B)) Dconv _
	<- idem DredC (mred-tup DautoII2 DautoB)
	<- lang-convert_12-total _ Dconv'.
- : sc1 (of^-pi2 Dof _) (spl1-pi2 Dspl') 
		(mred-lett 
			(mred-tup (mred-pi2 (DredI' : mred I' (tup _ I))) _)
			(DredC' : mred C' (tup I' _))
		)
		(ms-pi2-s Dstep) 
		(spl1-pi2 Dspl) (mred-lett (mred-tup (mred-pi2 DautoII2) DautoB) DredC)
		Dconv
		Dconv'
	<- idem DredC' (mred-tup (DautoI' : mred I' I') _)
	<- mred-unique DautoI' DredI' (Deq : eq-term I' (tup _ I))
	<- eq-cong2 tup Deq eq-term_ (Deq' : eq-term (tup I' _) (tup (tup _ I) _))
	<- mred-resp DredC' eq-term_ Deq' (DredC2' : mred C' (tup (tup _ I) _))
	<- sc1 Dof Dspl' DredC2' Dstep Dspl (DredC : mred C (tup (tup _ I) B)) Dconv _
	<- idem DredC (mred-tup DautoII2 DautoB)
	<- lang-convert_12-total _ Dconv'.

- : sc1 (of^-tup Dof1 _) (spl1-tup Dspl1' Dspl2) 
		(mred-lett 
			(mred-lett 
				(mred-tup (mred-tup DredI1 DredI2) (mred-tup _ DredB2))
				(DredC2 : mred C2' (tup I2' B2)))
			(DredC1' : mred C1' (tup I1 _)))
		(ms-tup-s1 Dstep)
		(spl1-tup Dspl1 Dspl2)
		(mred-lett 
			(mred-lett 
				(mred-tup (mred-tup DredI1 DredI2) (mred-tup DredB1 DredB2))
				DredC2)
			DredC1)
		Dconv
		Dconv'
	<- sc1 Dof1 Dspl1' DredC1' Dstep Dspl1 (DredC1 : mred C1 (tup I1 B1)) Dconv1 Dconv1'
	<- idem DredC1 (mred-tup _ DredB1)
	<- lang-convert_12-total _ Dconv'
	<- lang-convert_12-total _ Dconv.

- : sc1 (of^-tup _ Dof2) (spl1-tup Dspl1 Dspl2') 
		(mred-lett 
			(mred-lett 
				(mred-tup (mred-tup DredI1 DredI2) (mred-tup DredB1 _))
				DredC2')
			DredC1)
		(ms-tup-s2 Dstep)
		(spl1-tup Dspl1 Dspl2)
		(mred-lett 
			(mred-lett 
				(mred-tup (mred-tup DredI1 DredI2) (mred-tup DredB1 DredB2))
				DredC2)
			DredC1)
		Dconv
		Dconv'
	<- sc1 Dof2 Dspl2' DredC2' Dstep Dspl2 DredC2 Dconv2 Dconv2'
	<- idem DredC2 (mred-tup _ DredB2)
	<- lang-convert_12-total _ Dconv'
	<- lang-convert_12-total _ Dconv.

- : sc1 (of^-app Dof1 _ _) (spl1-app Dspl1' Dspl2) 
		(mred-lett 
			(mred-lett 
				(mred-lett 
					(mred-tup DredI3 (mred-tup (mred-tup _ DredB2) DredB3))
					(mred-app Dred3 DredI1 DredI2))
				DredC2)
			DredC1')
		(ms-app-s1 Dstep)
		(spl1-app Dspl1 Dspl2)
		(mred-lett 
			(mred-lett 
				(mred-lett 
					(mred-tup DredI3 (mred-tup (mred-tup DredB1 DredB2) DredB3))
					(mred-app Dred3 DredI1 DredI2))
				DredC2)
			DredC1)
		Dconv
		Dconv'
	<- sc1 Dof1 Dspl1' DredC1' Dstep Dspl1 DredC1 Dconv1 Dconv1'
	<- idem DredC1 (mred-tup _ DredB1)
	<- lang-convert_12-total _ Dconv'
	<- lang-convert_12-total _ Dconv.

- : sc1 (of^-app _ Dof2 _) (spl1-app Dspl1 Dspl2') 
		(mred-lett 
			(mred-lett 
				(mred-lett 
					(mred-tup DredI3 (mred-tup (mred-tup DredB1 _) DredB3))
					(mred-app Dred3 DredI1 DredI2))
				DredC2')
			DredC1)
		(ms-app-s2 Dstep)
		(spl1-app Dspl1 Dspl2)
		(mred-lett 
			(mred-lett 
				(mred-lett 
					(mred-tup DredI3 (mred-tup (mred-tup DredB1 DredB2) DredB3))
					(mred-app Dred3 DredI1 DredI2))
				DredC2)
			DredC1)
		Dconv
		Dconv'
	<- sc1 Dof2 Dspl2' DredC2' Dstep Dspl2 DredC2 Dconv2 Dconv2'
	<- idem DredC2 (mred-tup _ DredB2)
	<- lang-convert_12-total _ Dconv'
	<- lang-convert_12-total _ Dconv.


- : sc1 (of^-next-t Dof) 
		(spl1-next Dspl') (mred-tup mred-ztup Dred')
		(ms-next-s Dstep)
		(spl1-next Dspl) (mred-tup mred-ztup Dred) Dconv Dconv'
	<- sc2 Dof Dspl' Dred' Dstep Dspl Dred Dconv Dconv'.

- : sc1 (of^-grnd Dof) 
		(spl1-grnd Dspl') (mred-tup Dred' mred-ztup)
		(ms-grnd-s Dstep)
		(spl1-grnd Dspl) (mred-tup Dred mred-ztup) conv-ztup conv-ztup
	<- scG Dof Dspl' Dred' Dstep Dspl Dred.


%% STAGE TWO DONENESS MARKING
- : sc2 _ (spl2-exv (splr-tup Dsplr1 Dsplr2)) mred-ztup
		ms-tup-d
		(spl2-tup (spl2-exv Dsplr1) (spl2-exv Dsplr2)) (mred-tup mred-ztup mred-ztup) conv-tupzz conv-ztup.
- : sc2 _ (spl2-exv (splr-pi1 Dsplr)) mred-ztup
		ms-pi1-d
		(spl2-pi1 (spl2-exv Dsplr)) mred-ztup conv-ztup conv-ztup.
- : sc2 _ (spl2-exv (splr-pi2 Dsplr)) mred-ztup
		ms-pi2-d
		(spl2-pi2 (spl2-exv Dsplr)) mred-ztup conv-ztup conv-ztup.
- : sc2 _ (spl2-exv (splr-lam Dsplr)) mred-ztup
		ms-lam-d
		(spl2-lam ([x][x2][splx] spl2-exv (Dsplr x x2 splx))) mred-ztup conv-ztup conv-ztup.
- : sc2 _ (spl2-exv (splr-app Dsplr1 Dsplr2)) mred-ztup
		ms-app-d
		(spl2-app (spl2-exv Dsplr1) (spl2-exv Dsplr2)) (mred-tup mred-ztup mred-ztup) conv-tupzz conv-ztup.
- : sc2 _ (spl2-exv (splr-let DsplrE DsplrM)) mred-ztup
		ms-let-d
		(spl2-let (spl2-exv DsplrE) ([x][x2][splx] spl2-exv (DsplrM x x2 splx))) (mred-tup mred-ztup mred-ztup) conv-tupzz conv-ztup.


%% STAGE TWO SUBSTEPS
- : sc2 (of^-pi1 Dof _) (spl2-pi1 Dspl') Dred' (ms-pi1-s Dstep) (spl2-pi1 Dspl) Dred Dconv Dconv'
	<- sc2 Dof Dspl' Dred' Dstep Dspl Dred Dconv Dconv'.
- : sc2 (of^-pi2 Dof _) (spl2-pi2 Dspl') Dred' (ms-pi2-s Dstep) (spl2-pi2 Dspl) Dred Dconv Dconv'
	<- sc2 Dof Dspl' Dred' Dstep Dspl Dred Dconv Dconv'.
- : sc2 (of^-tup Dof _) (spl2-tup DsplA' DsplB) (mred-tup DredA' DredB) (ms-tup-s1 Dstep) (spl2-tup DsplA DsplB) (mred-tup DredA DredB) (conv-tup DconvA DconvB) (conv-tup DconvA' DconvB)
	<- sc2 Dof DsplA' DredA' Dstep DsplA DredA DconvA DconvA'
	<- lang-convert_12-total _ DconvB.
- : sc2 (of^-tup _ Dof) (spl2-tup DsplA DsplB') (mred-tup DredA DredB') (ms-tup-s2 Dstep) (spl2-tup DsplA DsplB) (mred-tup DredA DredB) (conv-tup DconvA DconvB) (conv-tup DconvA DconvB')
	<- sc2 Dof DsplB' DredB' Dstep DsplB DredB DconvB DconvB'
	<- lang-convert_12-total _ DconvA.
- : sc2 (of^-lam2 _ DofM) (spl2-lam DsplM') Dred' (ms-lam-s Dstep) (spl2-lam DsplM+) Dred+ Dconv Dconv'
	<- ({x}{vx}{x2}{ofx}{splx} splr-total ofx splx ->
		sc2 (DofM x vx ofx) (DsplM' x x2 splx) Dred' (Dstep x vx) (DsplM x x2 splx) (Dred x x2) (Dignore' x x2) (Dignore x x2))
	<- strengthen-split-eval DsplM Dred DsplM+ Dred+
	<- lang-convert_12-total _ Dconv'
	<- lang-convert_12-total _ Dconv.
- : sc2 (of^-app Dof _ _) (spl2-app DsplA' DsplB) (mred-tup DredA' DredB) (ms-app-s1 Dstep) (spl2-app DsplA DsplB) (mred-tup DredA DredB) (conv-tup DconvA DconvB) (conv-tup DconvA' DconvB)
	<- sc2 Dof DsplA' DredA' Dstep DsplA DredA DconvA DconvA'
	<- lang-convert_12-total _ DconvB.
- : sc2 (of^-app _ Dof _) (spl2-app DsplA DsplB') (mred-tup DredA DredB') (ms-app-s2 Dstep) (spl2-app DsplA DsplB) (mred-tup DredA DredB) (conv-tup DconvA DconvB) (conv-tup DconvA DconvB')
	<- sc2 Dof DsplB' DredB' Dstep DsplB DredB DconvB DconvB'
	<- lang-convert_12-total _ DconvA.
- : sc2 (of^-let DofE DofM) (spl2-let DsplE' DsplM) (mred-tup DredE' DredM) (ms-let-s1 Dstep) (spl2-let DsplE DsplM) (mred-tup DredE DredM) (conv-tup DconvE DconvM) (conv-tup DconvE' DconvM)
	<- sc2 DofE DsplE' DredE' Dstep DsplE DredE DconvE DconvE'
	<- lang-convert_12-total _ DconvM.
- : sc2 (of^-let DofE DofM) (spl2-let DsplE DsplM') (mred-tup DredE DredM') (ms-let-s2 Dstep) (spl2-let DsplE DsplM+) (mred-tup DredE DredM+) (conv-tup DconvE DconvM) (conv-tup DconvE DconvM')
	<- ({x}{vx}{x2}{ofx}{splx} splr-total ofx splx ->
		sc2 (DofM x vx ofx) (DsplM' x x2 splx) DredM' (Dstep x vx) (DsplM x x2 splx) (DredM x x2) (Dignroe x x2) (Dignore x x2))
	<- strengthen-split-eval DsplM DredM DsplM+ DredM+
	<- lang-convert_12-total _ DconvE
	<- lang-convert_12-total _ DconvM
	<- lang-convert_12-total _ DconvM'.
- : sc2 (of^-prev Dof) (spl2-prev Dspl') (mred-pi2 Dred') (ms-prev-s Dstep) (spl2-prev Dspl) (mred-pi2 Dred) Dconv Dconv'
	<- sc1 Dof Dspl' Dred' Dstep Dspl Dred Dconv Dconv'.
- : sc2 (of^-prev (Dof : of^ E (fut A) wor1 _)) 
		(spl2-let (spl2-exv Dsplr) ([x][x2][s] spl2-prev (Dspl' x x2 s : split1 (E' x) C' _)))
		(Dred : mred (tup ztup (pi2 C')) _)
		(ms-prev-ls Dstep : mstep wor2 (prev E) (let (exv Q) ([x] prev (E' x))))
		(spl2-prev Dspl) 
		Dred'
		Dconv Dconv'
	<- spl1-total Dof (Dspl : split1 E C _)
	<- lc Dspl Dspl' Dstep (Deq : eq-term C C')
	<- eq-term-sym Deq (Deq' : eq-term C' C)
	<- eq-cong ([x] tup ztup (pi2 x)) Deq' Deq''
	<- mred-resp Dred Deq'' eq-term_ (mred-tup _ Dred')
	<- lang-convert_12-total _ Dconv'
	<- lang-convert_12-total _ Dconv.

%worlds (correctness-block) (sc1 _ _ _ _ _ _ _ _) (sc2 _ _ _ _ _ _ _ _).
%total (D E) (sc1 _ _ _ D _ _ _ _) (sc2 _ _ _ E _ _ _ _).
