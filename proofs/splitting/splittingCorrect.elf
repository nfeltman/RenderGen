
%%weaken-split : ({x:term} splitres x x -> split wor1 E (pipe C (R x))) -> split wor1 E (pipe C R)




%% LIFTING CORRECTNESS

lc :  lstep E Q E' -> split wor1 E (pipe C R) -> splitres Q Q' -> ({x} splitres x x -> split wor1 (E' x) (pipe C (R' x))) -> type.
%mode lc +Dstep +DsplE -DsplrQ -DsplE'.
%% LIFT RULES
- : lc (ls-next-r _) (spl1-next (spl2-exv Dsplr)) Dsplr ([x][s] spl1-exv splv-next).
- : lc (ls-tup-s1 Dstep) (spl1-tup DsplA (DsplB )) Dsplr ([x][s] spl1-tup (DsplA' x s) (DsplB ))
	<- lc Dstep DsplA Dsplr DsplA'.
- : lc (ls-tup-s2 Dstep) (spl1-tup DsplA DsplB) Dsplr ([x][s] spl1-tup DsplA (DsplB' x s))
	<- lc Dstep DsplB Dsplr DsplB'.
- : lc (ls-pi1-s Dstep) (spl1-pi1 Dspl) Dsplr ([x][s] spl1-pi1 (Dspl' x s))
	<- lc Dstep Dspl Dsplr Dspl'.
- : lc (ls-pi2-s Dstep) (spl1-pi2 Dspl) Dsplr ([x][s] spl1-pi2 (Dspl' x s))
	<- lc Dstep Dspl Dsplr Dspl'.
- : lc (ls-app-s1 Dstep) (spl1-app DsplA DsplB) Dsplr ([x][s] spl1-app (DsplA' x s) DsplB)
	<- lc Dstep DsplA Dsplr DsplA'.
- : lc (ls-app-s2 Dstep) (spl1-app DsplA DsplB) Dsplr ([x][s] spl1-app DsplA (DsplB' x s))
	<- lc Dstep DsplB Dsplr DsplB'.
%worlds () (lc _ _ _ _).
%total (D) (lc D _ _ _).

%% DECONSTRUCT REDUCTION TO TUPLE
decon-red-tup : step** E (tup V1 V2) -> val (tup V1 V2) -> val V1 -> val V2 -> type.
%mode decon-red-tup +Dred -Dval12 -Dval1 -Dval2.
- : decon-red-tup (step**_ _ (val-tup Dval1 Dval2)) (val-tup Dval1 Dval2) Dval1 Dval2.
%worlds () (decon-red-tup _ _ _ _).
%total {} (decon-red-tup _ _ _ _).

%% SPLITTING CORRECTNESS
sc1 :  mstep wor1 E E' -> split wor1 E' (pipe C' _) -> mred C' (tup I _) -> split wor1 E (pipe C _) -> mred C (tup I _) -> type.
%mode sc1 +Dstep +Dspl' +Dred' -Dspl -Dred.
sc2 :  mstep wor2 E E' -> split wor2 E' (pipe P' _) -> mred P' _ -> split wor2 E (pipe P _) -> mred P _ -> type.
%mode sc1 +Dstep +Dspl' +Dred' -Dspl -Dred.

%% STAGE ONE REDUCTION RULES

%{- : sc1 ms-pi1-r 
	(spl1-exv Dspl1) (mred-tup Dred1 mred-ztup)
	(spl1-pi1 (spl1-exv (splv-tup Dspl1 Dspl2)))}%

%% STAGE ONE DONENESS MARKING
- : sc1 ms-tup-d 
		(spl1-exv (splv-tup Dsplv1 Dsplv2))	
		(mred-tup (mred-tup Dred1 Dred2) mred-ztup)
		(spl1-tup (spl1-exv Dsplv1) (spl1-exv Dsplv2)) 
		(mred-lett 
			(mred-lett 
				(mred-tup (mred-tup Didem1 Didem2) (mred-tup mred-ztup mred-ztup))
				(mred-tup Dred2 mred-ztup))
			(mred-tup Dred1 mred-ztup))
	<- idem Dred1 Didem1
	<- idem Dred2 Didem2.
%{- : sc1 (ms-next-d _)
		(spl1-exv splv-next) 
		(mred-tup mred-ztup mred-ztup)
		(spl1-next (spl2-exv Dsplr)) 
		(mred-tup mred-ztup mred-ztup).}%


%% STAGE ONE SUBSTEPS
- : sc1 (ms-pi1-s Dstep) (spl1-pi1 Dspl') 
		(mred-lett 
			(mred-tup (mred-pi1 (DredI' : mred I' (tup I _))) _)
			(DredC' : mred C' (tup I' _))
		)
		(spl1-pi1 Dspl) (mred-lett (mred-tup (mred-pi1 DidemII2) DidemB) DredC)
	<- idem DredC' (mred-tup (DidemI' : mred I' I') _)
	<- mred-unique DidemI' DredI' (Deq : eq-term I' (tup I _))
	<- eq-cong2 tup Deq eq-term_ (Deq' : eq-term (tup I' _) (tup (tup I _) _))
	<- mred-resp DredC' eq-term_ Deq' (DredC2' : mred C' (tup (tup I _) _))
	<- sc1 Dstep Dspl' DredC2' Dspl (DredC : mred C (tup (tup I _) B))
	<- idem DredC (mred-tup DidemII2 DidemB).
- : sc1 (ms-pi2-s Dstep) (spl1-pi2 Dspl') 
		(mred-lett 
			(mred-tup (mred-pi2 (DredI' : mred I' (tup _ I))) _)
			(DredC' : mred C' (tup I' _))
		)
		(spl1-pi2 Dspl) (mred-lett (mred-tup (mred-pi2 DidemII2) DidemB) DredC)
	<- idem DredC' (mred-tup (DidemI' : mred I' I') _)
	<- mred-unique DidemI' DredI' (Deq : eq-term I' (tup _ I))
	<- eq-cong2 tup Deq eq-term_ (Deq' : eq-term (tup I' _) (tup (tup _ I) _))
	<- mred-resp DredC' eq-term_ Deq' (DredC2' : mred C' (tup (tup _ I) _))
	<- sc1 Dstep Dspl' DredC2' Dspl (DredC : mred C (tup (tup _ I) B))
	<- idem DredC (mred-tup DidemII2 DidemB).

%% STAGE TWO DONENESS MARKING
- : sc2 ms-tup-d 
		(spl2-exv (splr-tup Dsplr1 Dsplr2)) mred-ztup
		(spl2-tup (spl2-exv Dsplr1) (spl2-exv Dsplr2)) (mred-tup mred-ztup mred-ztup).
- : sc2 ms-pi1-d 
		(spl2-exv (splr-pi1 Dsplr)) mred-ztup
		(spl2-pi1 (spl2-exv Dsplr)) mred-ztup.
- : sc2 ms-pi2-d 
		(spl2-exv (splr-pi2 Dsplr)) mred-ztup
		(spl2-pi2 (spl2-exv Dsplr)) mred-ztup.
- : sc2 ms-lam-d 
		(spl2-exv (splr-lam Dsplr)) mred-ztup
		(spl2-lam ([x] [splx] spl2-exv (Dsplr x splx))) mred-ztup.
- : sc2 ms-app-d 
		(spl2-exv (splr-app Dsplr1 Dsplr2)) mred-ztup
		(spl2-app (spl2-exv Dsplr1) (spl2-exv Dsplr2)) (mred-tup mred-ztup mred-ztup).
- : sc2 ms-let-d 
		(spl2-exv (splr-let DsplrE DsplrM)) mred-ztup
		(spl2-let (spl2-exv DsplrE) ([x][splx] spl2-exv (Dsplr2 x splx))) (mred-tup mred-ztup mred-ztup).

%% STAGE TWO SUBSTEPS
- : sc2 (ms-pi1-s Dstep) (spl2-pi1 Dspl') Dred' (spl2-pi1 Dspl) Dred
	<- sc2 Dstep Dspl' Dred' Dspl Dred.
- : sc2 (ms-pi2-s Dstep) (spl2-pi2 Dspl') Dred' (spl2-pi2 Dspl) Dred
	<- sc2 Dstep Dspl' Dred' Dspl Dred.
- : sc2 (ms-tup-s1 Dstep) (spl2-tup DsplA' DsplB) (mred-tup DredA' DredB) (spl2-tup DsplA DsplB) (mred-tup DredA DredB)
	<- sc2 Dstep DsplA' DredA' DsplA DredA.
- : sc2 (ms-tup-s2 Dstep) (spl2-tup DsplA DsplB') (mred-tup DredA DredB') (spl2-tup DsplA DsplB) (mred-tup DredA DredB)
	<- sc2 Dstep DsplB' DredB' DsplB DredB.
- : sc2 (ms-app-s1 Dstep) (spl2-app DsplA' DsplB) (mred-tup DredA' DredB) (spl2-app DsplA DsplB) (mred-tup DredA DredB)
	<- sc2 Dstep DsplA' DredA' DsplA DredA.
- : sc2 (ms-app-s2 Dstep) (spl2-app DsplA DsplB') (mred-tup DredA DredB') (spl2-app DsplA DsplB) (mred-tup DredA DredB)
	<- sc2 Dstep DsplB' DredB' DsplB DredB.
- : sc2 (ms-prev-s Dstep) (spl2-prev Dspl') (mred-pi2 Dred') (spl2-prev Dspl) (mred-pi2 Dred)
	<- sc1 Dstep Dspl' Dred' Dspl Dred.
- : sc2 (ms-prev-ls Dstep) 
	(spl2-let (spl2-exv Dsplr) ([x][splx] spl2-prev (Dspl' x splx))) (mred-tup mred-ztup (mred-pi2 Dred')) 
	(spl2-prev Dspl) (mred-pi2 Dred) 
	<- lc Dstep Dspl' Dsplr Dred' Dspl Dred.

	%{
spl1-ztup	: split wor1 ztup (pipe (tup ztup ztup) ([_] ztup)).
spl1-tup	: split wor1 (tup E1 E2) 
				(pipe 
					(lett C1 ([y1] [z1] lett C2 ([y2] [z2] tup (tup y1 y2) (tup z1 z2)))) 
					([l] lett l ([l1] [l2] tup (R1 l1) (R2 l2)))
				)
			<- split wor1 E2 (pipe C2 R2)
			<- split wor1 E1 (pipe C1 R1).
spl1-pi1	: split wor1 (pi1 E) (pipe (lett C ([y] [z] tup (pi1 y) z)) ([l] pi1 (R l)))
			<- split wor1 E (pipe C R).
spl1-pi2	: split wor1 (pi2 E) (pipe (lett C ([y] [z] tup (pi2 y) z)) ([l] pi2 (R l)))
			<- split wor1 E (pipe C R).
spl1-lam	: split wor1 (lam M) (pipe (tup (lam C) ztup) ([_] lam ([xl] lett xl R)))
			<- {x}{x1}{x2} split wor1 x (pipe (tup x1 ztup) ([l] x2)) -> split wor1 (M x) (pipe (C x1) ([l:term] R x2 l)). 
spl1-app	: split wor1 (app E1 E2) 
				(pipe
					(lett C1 ([y1] [z1] lett C2 ([y2] [z2] lett (app y1 y2) ([y3] [z3] tup (y3) (tup (tup z1 z2) z3)))))
					([l] lett l ([l12] [l3] lett l12 ([l1] [l2] app (R1 l1) (tup (R2 l2) l3))))
				)
			<- split wor1 E2 (pipe C2 R2)
			<- split wor1 E1 (pipe C1 R1).
spl1-next	: split wor1 (next E) (pipe (tup ztup P) R)
			<- split wor2 E (pipe P R).

spl2-ztup	: split wor2 ztup (pipe ztup ([_] ztup)). 
spl2-tup	: split wor2 (tup E1 E2) (pipe (tup P1 P2) ([l] lett l ([l1] [l2] tup (R1 l1) (R2 l2))))
			<- split wor2 E2 (pipe P2 R2)
			<- split wor2 E1 (pipe P1 R1).
spl2-pi1	: split wor2 (pi1 E) (pipe P ([l] pi1 (R l)))
			<- split wor2 E (pipe P R).
spl2-pi2	: split wor2 (pi2 E) (pipe P ([l] pi2 (R l)))
			<- split wor2 E (pipe P R).
spl2-lam	: split wor2 (lam M) (pipe P ([l] lam ([x] R x l)))
			<- {x : term} split wor2 x (pipe ztup ([_] x)) -> split wor2 (M x) (pipe P ([l] R x l)).
spl2-app	: split wor2 (app E1 E2) (pipe (tup P1 P2) ([l] lett l ([l1] [l2] app (R1 l1) (R2 l2))))
			<- split wor2 E2 (pipe P2 R2)
			<- split wor2 E1 (pipe P1 R1).
spl2-prev 	: split wor2 (prev E) (pipe (pi2 C) R)
			<- split wor1 E (pipe C R).



	}%