
%block correctness-block : 
	some {A : ty}
	block {x : term lang0}  {x2:term lang2} 
	{ofx : of^ x A wor2} {vx : form^ x vars2 wor2} 
	{splx:splitvar2 x x2} {_ : splvar2-total ofx vx splx}.


%% GROUND SPLITTING CORRECTNESS
scG : of^ E A worG -> form^ E comp1 worG -> splitG E' I' -> mred I' V -> mstep worG E E' -> splitG E I -> mred I V -> type.
%mode scG +Dof +Dcomp +Dstep +Dspl' +Dred' -Dspl -Dred.
- : scG (of^-pi1 (of^-exv (of^-tup _ Dof2))) (form^pi1-c (form^exv (form^tup-n _ Dval2)))
	(splg-exv Dsplg1)
	Dred1
	(ms-pi1-r _)
	(splg-pi1 (splg-exv (splgv-tup Dsplg1 Dsplg2))) 
	(mred-pi1 mred-exv)
	<- splgv-total Dof2 Dval2 Dsplg2.
- : scG (of^-pi2 (of^-exv (of^-tup Dof1 _))) (form^pi2-c (form^exv (form^tup-n Dval1 _)))
	(splg-exv Dsplg2)
	Dred2
	(ms-pi2-r _)
	(splg-pi2 (splg-exv (splgv-tup Dsplg1 Dsplg2))) 
	(mred-pi2 mred-exv)
	<- splgv-total Dof1 Dval1 Dsplg1.
- : scG Dof Dcomp
	(Dsplg3 : splitG (M E) I')
	(Dred3 : mred I' _)
	(ms-app-r _ : mstep worG (app (exv (lam M)) (exv E)) (M E))
	(splg-app (splg-exv (splgv-lam DsplM)) (splg-exv DsplE)) 
	(mred-app Dred3' mred-exv mred-exv)
	<- splg-total Dof Dcomp (splg-app 
		(splg-exv (splgv-lam (DsplM : {x}{x1} splitGv x x1 -> splitG (M x) (N x1)))) 
		(splg-exv (DsplE : splitGv E I)))
	<- splitG-unique Dsplg3 (DsplM E I DsplE : splitG (M E) (N I)) (Deq : eq-term I' (N I : term lang1))
	<- mred-resp Dred3 Deq eq-term_ Dred3'.
- : scG _ _
	(splg-exv (splgv-tup Dsplg1 Dsplg2)) mred-exv 
	ms-tup-d 
	(splg-tup (splg-exv Dsplg1) (splg-exv Dsplg2)) (mred-tup mred-exv mred-exv).
- : scG (of^-tup Dof _) (form^tup-c Dcomp _)
		(splg-tup Dsplg' DsplgB) (mred-tup Dred' DredB) 
		(ms-tup-s1 Dstep) 
		(splg-tup Dsplg DsplgB) (mred-tup Dred DredB)
	<- scG Dof Dcomp Dsplg' Dred' Dstep Dsplg Dred.
- : scG (of^-tup _ Dof) (form^tup-c _ Dcomp)
		(splg-tup DsplgB Dsplg') (mred-tup DredB Dred') 
		(ms-tup-s2 Dstep) 
		(splg-tup DsplgB Dsplg) (mred-tup DredB Dred)
	<- scG Dof Dcomp Dsplg' Dred' Dstep Dsplg Dred.
- : scG (of^-pi1 Dof) (form^pi1-c Dcomp) 
		(splg-pi1 Dsplg') (mred-pi1 Dred') 
		(ms-pi1-s Dstep) 
		(splg-pi1 Dsplg) (mred-pi1 Dred)
	<- scG Dof Dcomp Dsplg' Dred' Dstep Dsplg Dred.
- : scG (of^-pi2 Dof) (form^pi2-c Dcomp) 
		(splg-pi2 Dsplg') (mred-pi2 Dred') 
		(ms-pi2-s Dstep) 
		(splg-pi2 Dsplg) (mred-pi2 Dred)
	<- scG Dof Dcomp Dsplg' Dred' Dstep Dsplg Dred.
- : scG (of^-app Dof _) (form^app-c Dcomp _) 
		(splg-app Dsplg' DsplgB) (mred-app DredM Dred' DredB) 
		(ms-app-s1 Dstep) 
		(splg-app Dsplg DsplgB) (mred-app DredM Dred DredB)
	<- scG Dof Dcomp Dsplg' Dred' Dstep Dsplg Dred.
- : scG (of^-app _ Dof) (form^app-c _ Dcomp) 
		(splg-app DsplgB Dsplg') (mred-app DredM DredB Dred')
		(ms-app-s2 Dstep) 
		(splg-app DsplgB Dsplg) (mred-app DredM DredB Dred)
	<- scG Dof Dcomp Dsplg' Dred' Dstep Dsplg Dred.
%worlds (correctness-block) (scG _ _ _ _ _ _ _).
%total (D) (scG _ _ _ _ D _ _).

split1-unique/strengthen : 
	split1 E C R -> 
	({x}{x2} splitvar2 x x2 -> split1 E C' ([l] R' l x2)) -> 
	eq-term C C' -> 
	({x2}{l} eq-term (R l) (R' l x2)) -> type.
%mode split1-unique/strengthen +DsplE +DsplE' -Deq1 -Deq2.
- : split1-unique/strengthen Dspl Dspl' (DeqC ztup ztup) (DeqR ztup)
	<- ({x}{x2}{s} split1-unique Dspl (Dspl' x x2 s) (DeqC x x2) ([l] DeqR x x2 l)).
%worlds (correctness-block) (split1-unique/strengthen _ _ _ _).
%total {} (split1-unique/strengthen _ _ _ _).


%% LIFTING CORRECTNESS
lc : split1 E C R -> 
	({x}{x2} splitvar2 x x2 -> split1 (E' x) C' (R' x2)) -> 
	lstep E Q E' ->
	eq-term C C' -> type.
%mode lc +DsplE +DsplE' +Dstep -Deq.

%% LIFT RULES
- : lc (spl1-next (spl2-exv _)) ([x][x2][s] spl1-next (spl2-exv _)) (ls-next-r _) eq-term_.
- : lc (spl1-tup Dspl DsplB) ([x][x2][s] spl1-tup (Dspl' x x2 s) (DsplB' x x2 s)) (ls-tup-s1 Dstep) Deq'
	<- lc Dspl Dspl' Dstep Deq
	<- (split1-unique/strengthen DsplB DsplB' DeqB _)
	<- ({y}{z} eq-cong/lett DeqB ([x][y] eq-term_) (DeqB' y z))
	<- eq-cong/lett Deq DeqB' Deq'.
- : lc (spl1-tup DsplB Dspl) ([x][x2][s] spl1-tup (DsplB' x x2 s) (Dspl' x x2 s)) (ls-tup-s2 Dstep) Deq''
	<- lc Dspl Dspl' Dstep Deq
	<- split1-unique/strengthen DsplB DsplB' DeqB _
	<- ({y}{z} eq-cong/lett Deq ([x][y] eq-term_) (Deq' y z))
	<- eq-cong/lett DeqB Deq' Deq''.
- : lc (spl1-pi1 Dspl) ([x][x2][s] spl1-pi1 (Dspl' x x2 s)) (ls-pi1-s Dstep) Deq'
	<- lc Dspl Dspl' Dstep Deq
	<- eq-cong/lett Deq ([x][y] eq-term_) Deq'.
- : lc (spl1-pi2 Dspl) ([x][x2][s] spl1-pi2 (Dspl' x x2 s)) (ls-pi2-s Dstep) Deq'
	<- lc Dspl Dspl' Dstep Deq
	<- eq-cong/lett Deq ([x][y] eq-term_) Deq'.
- : lc (spl1-app Dspl DsplB) ([x][x2][s] spl1-app (Dspl' x x2 s) (DsplB' x x2 s)) (ls-app-s1 Dstep) Deq'
	<- lc Dspl Dspl' Dstep Deq
	<- split1-unique/strengthen DsplB DsplB' DeqB _
	<- ({y}{z} eq-cong/lett DeqB ([x][y] eq-term_) (DeqB' y z))
	<- eq-cong/lett Deq DeqB' Deq'.
- : lc (spl1-app DsplB Dspl) ([x][x2][s] spl1-app (DsplB' x x2 s) (Dspl' x x2 s)) (ls-app-s2 Dstep) Deq''
	<- lc Dspl Dspl' Dstep Deq
	<- split1-unique/strengthen DsplB DsplB' DeqB _
	<- ({y}{z} eq-cong/lett Deq ([x][y] eq-term_) (Deq' y z))
	<- eq-cong/lett DeqB Deq' Deq''.
%worlds (correctness-block) (lc _ _ _ _).
%total (D) (lc D _ _ _).

%{
lc :  lstep E Q E' -> split1 E C R -> splitres Q Q' -> ({x}{x2} splitres x x2 -> split1 (E' x) C (R' x2)) -> type.
%mode lc +Dstep +DsplE -DsplrQ -DsplE'.
%% LIFT RULES
- : lc (ls-next-r _) (spl1-next (spl2-exv Dsplr)) Dsplr ([x][x2][s] spl1-exv (splv-next s)).
- : lc (ls-tup-s1 Dstep) (spl1-tup DsplA DsplB) Dsplr ([x][x2][s] spl1-tup (DsplA' x x2 s) DsplB)
	<- lc Dstep DsplA Dsplr DsplA'.
- : lc (ls-tup-s2 Dstep) (spl1-tup DsplA DsplB) Dsplr ([x][x2][s] spl1-tup DsplA (DsplB' x x2 s))
	<- lc Dstep DsplB Dsplr DsplB'.
- : lc (ls-pi1-s Dstep) (spl1-pi1 Dspl) Dsplr ([x][x2][s] spl1-pi1 (Dspl' x x2 s))
	<- lc Dstep Dspl Dsplr Dspl'.
- : lc (ls-pi2-s Dstep) (spl1-pi2 Dspl) Dsplr ([x][x2][s] spl1-pi2 (Dspl' x x2 s))
	<- lc Dstep Dspl Dsplr Dspl'.
- : lc (ls-app-s1 Dstep) (spl1-app DsplA DsplB) Dsplr ([x][x2][s] spl1-app (DsplA' x x2 s) DsplB)
	<- lc Dstep DsplA Dsplr DsplA'.
- : lc (ls-app-s2 Dstep) (spl1-app DsplA DsplB) Dsplr ([x][x2][s] spl1-app DsplA (DsplB' x x2 s))
	<- lc Dstep DsplB Dsplr DsplB'.
%worlds (correctness-block) (lc _ _ _ _).
%total (D) (lc D _ _ _).}%

%% USES UNIQUENESS OF SPLITTING TO SHOW REDUCTION RESPECTS IT
split-eval-resp : split1 E C R -> split1 E C' R' -> mred C (tup I B) -> mred C' (tup I B) -> ({x} eq-term (R x) (R' x)) -> type.
%mode split-eval-resp +Dspl +Dspl' +Dred -Dred' -Deq.
- : split-eval-resp _ _ Dred Dred ([x] eq-term_).
%worlds (correctness-block) (split-eval-resp _ _ _ _ _).
%total {} (split-eval-resp _ _ _ _ _).

split-eval-eq : split1 E C _ -> mred C V -> split1 E C' _  -> mred C' V' -> eq-term V V' -> type.
%mode split-eval-eq +Dspl +Dspl' +Dred +Dred' -Deq.
- : split-eval-eq _ Dred _ Dred' Deq
	<- mred-unique Dred Dred' Deq.
%worlds (correctness-block) (split-eval-eq _ _ _ _ _).
%total {} (split-eval-eq _ _ _ _ _).

strengthen-split-eval : 
	({x : term lang0}{x2 : term lang2} splitvar2 x x2 -> split2 (E x) (P x x2) (Q x x2)) -> 
	({x : term lang0}{x2 : term lang2} mred (P x x2) (B x x2)) ->
	({x : term lang0}{x2 : term lang2} lang-convert (B x x2) (BB x x2)) ->
	({x : term lang0}{x2 : term lang2} splitvar2 x x2 -> split2 (E x) P' (Q' x2)) ->
	mred P' B' -> 
	lang-convert B' BB' -> 
	({x}{y} eq-term BB' (BB x y)) -> type.
%mode strengthen-split-eval +Dspl +Dred +Dconv -Dspl' -Dred -Dconv -Deq.
- : strengthen-split-eval 
		([x][x2][s] Dsplr x x2 s : split2 (E x) (P x x2) (Q x x2))
		([x][x2] Dred x x2 : mred (P x x2) (V x x2))
		Dconv
		Dsplr'
		(Dred' ztup ztup)
		Dconv'
	<- ({x2} lang-indep neq-lang_01 ([x] P x x2) ([x] DeqP0 x x2 : eq-term (P x x2) (P' x2)))
	<- lang-indep neq-lang_21 P' ([x2] DeqP2 x2 : eq-term (P' x2) P'')
	<- ({x}{x2} eq-term-trans (DeqP0 x x2) (DeqP2 x2) (DeqP x x2 : eq-term (P x x2) P''))
	<- ({l}{x2} lang-indep neq-lang_02 ([x] Q x x2 l) ([x] DeqQ x x2 l))
	<- ({x}{x2}{s} split2-resp (Dsplr x x2 s) eq-term_ (DeqP x x2) (DeqQ x x2) (Dsplr' x x2 s))
	<- ({x2} lang-indep neq-lang_01 ([x] V x x2) ([x] DeqV0 x x2 : eq-term (V x x2) (V' x2)))
	<- lang-indep neq-lang_21 V' ([x2] DeqV2 x2 : eq-term (V' x2) V'')
	<- ({x}{x2} eq-term-trans (DeqV0 x x2) (DeqV2 x2) (DeqV x x2 : eq-term (V x x2) V''))
	<- ({x}{x2} mred-resp (Dred x x2) (DeqP x x2) (DeqV x x2) (Dred' x x2))
	<- conv-resp (Dconv ztup ztup) (DeqV ztup ztup) eq-term_ Dconv'.
%worlds (term-block | splitting-block) (strengthen-split-eval _ _ _ _ _ _).
%total (D) (strengthen-split-eval D _ _ _ _ _).

%% LEMMAS FOR SPLITTING CORRECTNESS
sc1/app-r : of^ (app (exv (lam M)) (exv E)) A wor1 -> 
		form^ (app (exv (lam M)) (exv E)) comp1 wor1 ->
		split1 (M E) C' R' -> 
		mred C' (tup I B0) -> 
		split1 (app (exv (lam M)) (exv E)) C R -> 
		mred C (tup I (tup (tup ztup ztup) B0)) -> 
		lang-convert B0 B ->
		reqv (R (tup (tup ztup ztup) B)) (R' B) ->
		type.
%mode sc1/app-r +Dof +Dcomp +Dspl' +Dred' -Dspl -Dred -Dconv -Dreqv.

- : sc1/app-r Dof Dcomp Dspl (Dred : mred C' (tup I B0))
	(spl1-app (spl1-exv (splv-lam DsplM)) (spl1-exv DsplV))
	(mred-lett 
		(mred-lett 
			(mred-lett 
				mred-exv
				(mred-app Dred'' mred-exv mred-exv)
				)
			mred-exv
			)
		mred-exv
		)
	Dconv Deqv
	<- spl1-total Dof Dcomp (spl1-app 
		(spl1-exv (splv-lam ([x][x1][x2][s] DsplM x x1 x2 s : split1 (M x) (C x1) (R x2) )))
		(spl1-exv (DsplV : splitval V Vi Vq)))
	<- split-eval-resp Dspl (DsplM V Vi Vq DsplV) Dred Dred'' ([l] Deq l : eq-term (R' l) (R Vq l))
	<- lang-convert_12-total B0 (Dconv : lang-convert B0 B)
	<- eq-term-sym (Deq B) (Deq' : eq-term (R Vq B) (R' B))
	<- reqv-resp 
		((reqv-trans5
			reqv-lett
			reqv-lett
			(reqv-app-s2 reqv-tup-d) 
			reqv-app  								
			reqv-lett
			)
		: reqv 
			(lett (exv (tup (tup ztup ztup) B)) ([l12] [l3] lett (exv l12) ([l1] [l2] app (exv (lam ([xl] lett (exv xl) R))) (tup (exv Vq) (exv l3)))))
			(R Vq B))
		eq-term_ Deq' Deqv.
%worlds (correctness-block) (sc1/app-r _ _ _ _ _ _ _ _).
%total (D) (sc1/app-r D _ _ _ _ _ _ _).

%% SPLITTING CORRECTNESS
sc1 : of^ E A wor1 -> form^ E comp1 wor1 -> 
	split1 E' C' R' -> mred C' (tup I B') -> 
	mstep wor1 E E' -> 
	split1 E C R -> mred C (tup I B) -> 
	lang-convert B B2 -> lang-convert B' B2' -> 
	reqv (R B2) (R' B2') -> type.
%mode sc1 +Dof +Dcomp +Dspl' +Dred' +Dstep -Dspl -Dred -Dconv -Dconv' -Deqv.
sc2 : of^ E A wor2 -> form^ E comp1 wor2 -> 
	split2 E' P' R' -> mred P' B' -> 
	mstep wor2 E E' -> 
	split2 E P R -> mred P B -> 
	lang-convert B B2 -> lang-convert B' B2' -> 
	reqv (R B2) (R' B2') -> type.
%mode sc2 +Dof +Dcomp +Dspl' +Dred' +Dstep -Dspl -Dred -Dconv -Dconv' -Deqv.
%{
sc1+ : of^ E A wor1 -> split1 E' C' R' -> mred C' (tup I B') -> mstep wor1 E E' -> split1 E C R -> mred C (tup I B) -> lang-convert B (B2 : term lang2) -> lang-convert B' (B2' : term lang2) -> reqv (R B2) (R' B2') -> type.
%mode sc1+ +Dof +Dstep +Dspl' +Dred' -Dspl -Dred -Dconv +Dconv'.

%% POLARITY CONVERSION
- : sc1+ Dof Dspl' DredC' Dstep Dspl DredC Dconv Dconv'
	<- sc1 Dof Dspl' DredC' Dstep Dspl DredC Dconv _.}%


%% STAGE ONE REDUCTION RULES

- : sc1 (of^-pi1 (of^-exv (of^-tup _ Dof2))) (form^pi1-c (form^exv (form^tup-n _ Dcomp2)))
	(spl1-exv Dspl1) (mred-exv)
	(ms-pi1-r _)
	(spl1-pi1 (spl1-exv (splv-tup Dspl1 Dspl2)))
	(mred-lett 
		(mred-tup (mred-pi1 mred-exv) mred-exv) 
		mred-exv)
	conv-ztup conv-ztup
	reqv-pi1
	<- splv-total Dof2 Dcomp2 Dspl2.

- : sc1 (of^-pi2 (of^-exv (of^-tup Dof1 _))) (form^pi2-c (form^exv (form^tup-n Dcomp1 _)))
	(spl1-exv Dspl2) (mred-exv)
	(ms-pi2-r _)
	(spl1-pi2 (spl1-exv (splv-tup Dspl1 Dspl2)))
	(mred-lett 
		(mred-tup (mred-pi2 mred-exv) mred-exv) 
		mred-exv)
	conv-ztup conv-ztup
	reqv-pi2
	<- splv-total Dof1 Dcomp1 Dspl1.

- : sc1 Dof Dcomp Dspl' Dred'
	(Dstep : mstep wor1 (app (exv (lam M)) (exv E)) V) 
	Dspl Dred 
	(conv-tup conv-tupzz Dconv) Dconv
	Deqv
	<- step/unique Dstep (ms-app-r fsw-wor1) (Deq : eq-term V (M E))
	<- split1-resp Dspl' Deq eq-term_ ([x] eq-term_) Dspl''
	<- sc1/app-r Dof Dcomp Dspl'' Dred' Dspl Dred Dconv Deqv.

- : sc2 Dof Dcomp
		(spl2-exv (splr-var Dsplr)) mred-exv
		(ms-prev-r : mstep wor2 (prev (exv (next E))) (exv (exv E))) 
		(spl2-prev (spl1-exv (splv-next Dsplr))) (mred-pi2 mred-exv) 
		conv-ztup conv-ztup reqv-id.

%% STAGE ONE DONENESS MARKING

- : sc1 (of^-tup (of^-exv Dof1) (of^-exv Dof2)) (form^tup-c (form^exv Dcomp1) (form^exv Dcomp2))
		(spl1-exv (splv-tup (Dsplv1 : splitval V1 I1 Q1) (Dsplv2 : splitval V2 I2 Q2)))
		(Dred' : mred (exv (tup (tup I1 I2) ztup)) (tup I B'))
		(ms-tup-d : mstep wor1 (tup (exv V1) (exv V2)) (exv (tup V1 V2)))
		(spl1-tup (spl1-exv Dsplv1) (spl1-exv Dsplv2))
		(mred-lett (mred-lett DredM mred-exv) mred-exv : mred _ (tup I (tup ztup ztup)))
		conv-tupzz Dconv'
		(reqv-trans reqv-lett reqv-tup-d : reqv 
			(lett (exv (tup ztup ztup)) ([l1] [l2] tup (exv Q1) (exv Q2))) 
			(exv (tup Q1 Q2))
		)
		<- mred-invert/exv-tup Dred' (DredI : mred (exv (tup I1 I2)) I) _
		<- mred-invert/exv DredI (Deq : eq-term (tup I1 I2) I)
		<- eq-cong2 tup Deq (eq-term_ : eq-term (tup ztup ztup) _) Deq'
		<- mred-resp mred-exv eq-term_ Deq' DredM
		<- lang-convert_12-total B' Dconv'.



- : sc1 (of^-next (of^-exv (of^-exv Dof))) (form^next-c (form^exv (form^var2 Dres)))
		(Dspl' : split1 (exv (next E)) C' R') (Dred' : mred C' (tup I B0))
		(ms-next-d :  mstep wor1 (next (exv (exv E))) (exv (next E)))
		(spl1-next (spl2-exv (splr-var Dsplr))) (mred-tup Dred1 Dred2) 
		Dconv Dconv
		Deqv
		<- splvar2-total Dof Dres (Dsplr : splitvar2 E Q)
		<- split-eval-resp Dspl' (spl1-exv (splv-next Dsplr)) Dred' Dred ([x] Deq x : eq-term (R' x) (exv Q))
		<- mred-invert/exv-tup Dred Dred1 Dred2
		<- lang-convert_12-total B0 (Dconv : lang-convert B0 B)
		<- reqv-resp (reqv-id : reqv (R' B) (R' B)) (Deq B) eq-term_  (Deqv : reqv (exv Q) (R' B)).

- : sc1 (of^-grnd (of^-exv Dof)) (form^grnd (form^exv Dval))
		(Dspl' : split1 (exv (grnd E)) C' R') (Dred' : mred C' (tup I B0))
		(ms-grnd-d :  mstep wor1 (grnd (exv E)) (exv (grnd E)))
		(spl1-grnd (splg-exv Dsplr)) (mred-tup Dred1 Dred2) 
		Dconv Dconv
		Deqv
		<- splgv-total Dof Dval Dsplr
		<- split1-unique Dspl' (spl1-exv (splv-grnd Dsplr)) Deq ([x] DeqR x : eq-term (R' x) (exv ztup))
		<- mred-resp Dred' Deq eq-term_ Dred
		<- mred-invert/exv-tup Dred Dred1 Dred2
		<- lang-convert_12-total B0 (Dconv : lang-convert B0 B)
		<- reqv-resp (reqv-id : reqv (R' B) (R' B)) (DeqR B) eq-term_  (Deqv : reqv (exv ztup) (R' B)).

%% STAGE ONE SUBSTEPS

invert/exv--resp/tup : 
		mred (exv V1) V2 -> 
		mred C (tup V1 B) -> 
		mred C (tup V2 B) -> type.
%mode invert/exv--resp/tup +Dspl' +Dred' -Dred.
- : invert/exv--resp/tup DredV DredC' DredC
	<- mred-invert/exv DredV (Deq : eq-term V1 V2)
	<- eq-cong2 tup Deq eq-term_ Deq'
	<- mred-resp DredC' eq-term_ Deq' DredC.
%worlds (correctness-block) (invert/exv--resp/tup _ _ _).
%total (D) (invert/exv--resp/tup D _ _).

- : sc1 (of^-pi1 Dof) (form^pi1-c Dcomp)
		(spl1-pi1 (Dspl' : split1 E' C' R')) 
		(mred-lett 
			(mred-tup (mred-pi1 (DredV : mred (exv V') (tup V1 V2))) (DredB : mred (exv B0') B1'))
			(DredC' : mred C' (tup V' B0'))
		)
		(ms-pi1-s Dstep)
		(spl1-pi1 Dspl) (mred-lett (mred-tup (mred-pi1 mred-exv) mred-exv) DredC)
		Dconv Dconv''
		(reqv-pi1-s Deqv : reqv (pi1 (R B)) (pi1 (R' B')))
	<- invert/exv--resp/tup DredV DredC' (DredC'' : mred C' (tup (tup V1 V2) B0'))
	<- sc1 Dof Dcomp Dspl' DredC'' Dstep 
		(Dspl : split1 E C R) (DredC : mred C (tup _ B0)) 
		(Dconv : lang-convert B0 B) (Dconv' : lang-convert B0' B') 
		(Deqv : reqv (R B) (R' B'))
	<- mred-invert/exv DredB (DeqB : eq-term B0' B1')
	<- conv-resp Dconv' DeqB eq-term_ Dconv''.

- : sc1 (of^-pi2 Dof) (form^pi2-c Dcomp)
		(spl1-pi2 (Dspl' : split1 E' C' R')) 
		(mred-lett 
			(mred-tup (mred-pi2 (DredV : mred (exv V') (tup V1 V2))) (DredB : mred (exv B0') B1'))
			(DredC' : mred C' (tup V' B0'))
		)
		(ms-pi2-s Dstep)
		(spl1-pi2 Dspl) (mred-lett (mred-tup (mred-pi2 mred-exv) mred-exv) DredC)
		Dconv Dconv''
		(reqv-pi2-s Deqv : reqv (pi2 (R B)) (pi2 (R' B')))
	<- invert/exv--resp/tup DredV DredC' (DredC'' : mred C' (tup (tup V1 V2) B0'))
	<- sc1 Dof Dcomp Dspl' DredC'' Dstep 
		(Dspl : split1 E C R) (DredC : mred C (tup _ B0)) 
		(Dconv : lang-convert B0 B) (Dconv' : lang-convert B0' B') 
		(Deqv : reqv (R B) (R' B'))
	<- mred-invert/exv DredB (DeqB : eq-term B0' B1')
	<- conv-resp Dconv' DeqB eq-term_ Dconv''.

- : sc1 (of^-tup Dof1 _) (form^tup-c Dcomp1 _)
		(spl1-tup (Dspl1' : split1 E1' C1' R1') (Dspl2 : split1 E2 C2 R2)) 
		(mred-lett 
			(mred-lett _ (DredC2 : mred C2 (tup I2' B2)))
			(DredC1' : mred C1' (tup I1 _)))
		(ms-tup-s1 Dstep)
		(spl1-tup Dspl1 Dspl2)
		(mred-lett (mred-lett mred-exv DredC2) DredC1)
		(conv-tup Dconv1 Dconv2) (conv-tup Dconv1' Dconv2)
		(reqv-lett-p (reqv-tup-s Deqv reqv-id) : reqv 
			(lett (exv (tup BB1  BB2)) ([l1][l2] tup (R1  l1) (R2 l2)))
			(lett (exv (tup BB1' BB2)) ([l1][l2] tup (R1' l1) (R2 l2))))
	<- sc1 Dof1 Dcomp1 Dspl1' DredC1' Dstep 
		(Dspl1 : split1 _ C1 R1) 
		(DredC1 : mred C1 (tup I1 B1)) 
		(Dconv1 : lang-convert B1 BB1) (Dconv1' : lang-convert B1' BB1')
		(Deqv : reqv (R1 BB1) (R1' BB1'))
	<- lang-convert_12-total B2 (Dconv2 : lang-convert B2 BB2).

- : sc1 (of^-tup _ Dof2) (form^tup-c _ Dcomp2)
		(spl1-tup Dspl1 (Dspl2' : split1 E2' C2' R2')) 
		(mred-lett (mred-lett _ DredC2') (DredC1 : mred C1 (tup I1' B1)))
		(ms-tup-s2 Dstep)
		(spl1-tup Dspl1 Dspl2)
		(mred-lett (mred-lett mred-exv DredC2) DredC1)
		(conv-tup Dconv1 Dconv2) (conv-tup Dconv1 Dconv2')
		(reqv-lett-p (reqv-tup-s reqv-id Deqv) : reqv 
			(lett (exv (tup BB1 BB2 )) ([x][y] tup (R1 x) (R2  y)))
			(lett (exv (tup BB1 BB2')) ([x][y] tup (R1 x) (R2' y))))
	<- sc1 Dof2 Dcomp2 Dspl2' DredC2' Dstep 
		(Dspl2 : split1 _ C2 R2) 
		(DredC2 : mred C2 (tup I2 B2)) 
		(Dconv2 : lang-convert B2 BB2) (Dconv2' : lang-convert B2' BB2')
		(Deqv : reqv (R2 BB2) (R2' BB2'))
	<- lang-convert_12-total B1 (Dconv1 : lang-convert B1 BB1).

- : sc1 (of^-app Dof1 _) (form^app-c Dcomp1 _)
		(spl1-app (Dspl1' : split1 E1' C1' R1') (Dspl2 : split1 E2 C2 R2)) 
		(mred-lett 
			(mred-lett 
				(mred-lett 
					(DredCore : mred (exv (tup I3 (tup (tup B1' B2) B3))) (tup I B)) 
					(mred-app (Dred3 : mred (M V2) (tup I3 B3)) 
						(Dred1 : mred (exv I1) (lam M)) 
						(Dred2 : mred (exv I2) V2)))
				(DredC2 : mred C2 (tup I2 B2)))
			(DredC1' : mred C1' (tup I1 B1')))
		(ms-app-s1 Dstep)
		(spl1-app Dspl1 Dspl2)
		(mred-lett 
			(mred-lett 
				(mred-lett mred-exv (mred-app Dred3' Dred1 Dred2 : mred _ (tup I B3)))
				DredC2)
			DredC1)
		(conv-tup (conv-tup Dconv1 Dconv2) Dconv3) Dconv'
		(reqv-lett-p (reqv-lett-p (reqv-app-s Deqv reqv-id)) : reqv 
			(lett (exv (tup (tup BB1  BB2) BB3)) ([l12][l3] lett (exv l12) ([l1][l2] app (R1  l1) (tup (R2 l2) (exv l3)))))
			(lett (exv (tup (tup BB1' BB2) BB3)) ([l12][l3] lett (exv l12) ([l1][l2] app (R1' l1) (tup (R2 l2) (exv l3))))))
	<- sc1 Dof1 Dcomp1 Dspl1' DredC1' Dstep 
		(Dspl1 : split1 _ C1 R1) 
		(DredC1 : mred C1 (tup I1 B1)) 
		(Dconv1 : lang-convert B1 BB1) (Dconv1' : lang-convert B1' BB1')
		(Deqv : reqv (R1 BB1) (R1' BB1'))
	<- lang-convert_12-total B2 (Dconv2 : lang-convert B2 BB2)
	<- lang-convert_12-total B3 (Dconv3 : lang-convert B3 BB3)
	<- mred-invert/exv-tup DredCore (DredI : mred (exv I3) I) (DredB : mred (exv (tup (tup B1' B2) B3)) B)
	<- mred-invert/exv DredB (DeqB : eq-term (tup (tup B1' B2) B3) B)
	<- conv-resp (conv-tup (conv-tup Dconv1' Dconv2) Dconv3) DeqB eq-term_ Dconv'
	<- invert/exv--resp/tup DredI Dred3 Dred3'.


- : sc1 (of^-app _ Dof2) (form^app-c _ Dcomp2)
		(spl1-app (Dspl1 : split1 (exv E1) C1 R1) (Dspl2' : split1 E2' C2' R2')) 
		(mred-lett 
			(mred-lett 
				(mred-lett 
					(DredCore : mred (exv (tup I3 (tup (tup B1 B2') B3))) (tup I B)) 
					(mred-app (Dred3 : mred (M V2) (tup I3 B3)) 
						(Dred1 : mred (exv I1) (lam M)) 
						(Dred2 : mred (exv I2) V2)))
				DredC2')
			DredC1)
		(ms-app-s2 Dstep)
		(spl1-app Dspl1 Dspl2)
		(mred-lett 
			(mred-lett 
				(mred-lett mred-exv (mred-app Dred3' Dred1 Dred2))
				DredC2)
			DredC1)
		(conv-tup (conv-tup Dconv1 Dconv2) Dconv3) Dconv'
		(reqv-lett-p (reqv-lett-p (reqv-app-s reqv-id (reqv-tup-s Deqv reqv-id))) : reqv 
			(lett (exv (tup (tup BB1 BB2 ) BB3)) ([l12][l3] lett (exv l12) ([l1][l2] app (R1 l1) (tup (R2  l2) (exv l3)))))
			(lett (exv (tup (tup BB1 BB2') BB3)) ([l12][l3] lett (exv l12) ([l1][l2] app (R1 l1) (tup (R2' l2) (exv l3))))))
	<- sc1 Dof2 Dcomp2 Dspl2' DredC2' Dstep 
		(Dspl2 : split1 E2 C2 R2) 
		(DredC2 : mred C2 (tup I2 B2)) 
		(Dconv2 : lang-convert B2 BB2) (Dconv2' : lang-convert B2' BB2')
		(Deqv : reqv (R2 BB2) (R2' BB2'))
	<- lang-convert_12-total B1 (Dconv1 : lang-convert B1 BB1)
	<- lang-convert_12-total B3 (Dconv3 : lang-convert B3 BB3)
	<- mred-invert/exv-tup DredCore (DredI : mred (exv I3) I) (DredB : mred (exv (tup (tup B1 B2') B3)) B)
	<- mred-invert/exv DredB (DeqB : eq-term (tup (tup B1 B2') B3) B)
	<- conv-resp (conv-tup (conv-tup Dconv1 Dconv2') Dconv3) DeqB eq-term_ Dconv'
	<- invert/exv--resp/tup DredI Dred3 Dred3'.


- : sc1 (of^-next Dof) (form^next-c Dcomp)
		(spl1-next Dspl') (mred-tup mred-exv Dred')
		(ms-next-s Dstep)
		(spl1-next Dspl) (mred-tup mred-exv Dred) Dconv Dconv' Dreqv
	<- sc2 Dof Dcomp Dspl' Dred' Dstep Dspl Dred Dconv Dconv' Dreqv.

- : sc1 (of^-grnd Dof) (form^grnd Dcomp)
		(spl1-grnd Dspl') (mred-tup Dred' mred-exv)
		(ms-grnd-s Dstep)
		(spl1-grnd Dspl) (mred-tup Dred mred-exv) 
		conv-ztup conv-ztup reqv-id
	<- scG Dof Dcomp Dspl' Dred' Dstep Dspl Dred.


%% STAGE TWO DONENESS MARKING
- : sc2 _ _ (spl2-exv (splr-tup Dsplr1 Dsplr2)) mred-exv
		ms-tup-d
		(spl2-tup (spl2-exv Dsplr1) (spl2-exv Dsplr2)) (mred-tup mred-exv mred-exv) 
		conv-tupzz conv-ztup reqv-lett.
- : sc2 _ _ (spl2-exv (splr-pi1 Dsplr)) mred-exv
		ms-pi1-d
		(spl2-pi1 (spl2-exv Dsplr)) mred-exv conv-ztup conv-ztup reqv-id.
- : sc2 _ _ (spl2-exv (splr-pi2 Dsplr)) mred-exv
		ms-pi2-d
		(spl2-pi2 (spl2-exv Dsplr)) mred-exv conv-ztup conv-ztup reqv-id.
- : sc2 _ _ (spl2-exv (splr-lam Dsplr)) mred-exv
		ms-lam-d
		(spl2-lam ([x][x2][splx] spl2-exv (Dsplr x x2 splx))) mred-exv conv-ztup conv-ztup reqv-id.
- : sc2 _ _ (spl2-exv (splr-app Dsplr1 Dsplr2)) mred-exv
		ms-app-d
		(spl2-app (spl2-exv Dsplr1) (spl2-exv Dsplr2)) (mred-tup mred-exv mred-exv) 
		conv-tupzz conv-ztup reqv-lett.
- : sc2 _ _ (spl2-exv (splr-let DsplrE DsplrM)) mred-exv
		ms-let-d
		(spl2-let (spl2-exv DsplrE) ([x][x2][splx] spl2-exv (DsplrM x x2 splx))) (mred-tup mred-exv mred-exv) 
		conv-tupzz conv-ztup reqv-lett.


%% STAGE TWO SUBSTEPS
- : sc2 (of^-pi1 Dof) (form^pi1-c Dcomp) (spl2-pi1 Dspl') Dred' (ms-pi1-s Dstep) 
		(spl2-pi1 Dspl) Dred Dconv Dconv' (reqv-pi1-s Deqv)
	<- sc2 Dof Dcomp Dspl' Dred' Dstep Dspl Dred Dconv Dconv' Deqv.
- : sc2 (of^-pi2 Dof) (form^pi2-c Dcomp) (spl2-pi2 Dspl') Dred' (ms-pi2-s Dstep) 
		(spl2-pi2 Dspl) Dred Dconv Dconv' (reqv-pi2-s Deqv)
	<- sc2 Dof Dcomp Dspl' Dred' Dstep Dspl Dred Dconv Dconv' Deqv.
- : sc2 (of^-tup Dof _) (form^tup-c Dcomp _) (spl2-tup DsplA' DsplB) (mred-tup DredA' DredB) (ms-tup-s1 Dstep) 
		(spl2-tup DsplA DsplB) (mred-tup DredA DredB) 
		(conv-tup DconvA DconvB) (conv-tup DconvA' DconvB)
		(reqv-lett-p (reqv-tup-s Deqv reqv-id))
	<- sc2 Dof Dcomp DsplA' DredA' Dstep DsplA DredA DconvA DconvA' Deqv
	<- lang-convert_12-total _ DconvB.
- : sc2 (of^-tup _ Dof) (form^tup-c _ Dcomp) (spl2-tup DsplA DsplB') (mred-tup DredA DredB') (ms-tup-s2 Dstep) 
		(spl2-tup DsplA DsplB) (mred-tup DredA DredB) 
		(conv-tup DconvA DconvB) (conv-tup DconvA DconvB')
		(reqv-lett-p (reqv-tup-s reqv-id Deqv))
	<- sc2 Dof Dcomp DsplB' DredB' Dstep DsplB DredB DconvB DconvB' Deqv
	<- lang-convert_12-total _ DconvA.
- : sc2 (of^-lam _ DofM) (form^lam2c Dcomp) 
		(spl2-lam ([x][x2][s] DsplM' x x2 s : split2 (M' x) P' (Q' x2))) 
		(Dred' : mred P' B')
		(ms-lam-s Dstep) 
		(spl2-lam DsplM+) Dred+ 
		(Dconv+) (Dconv' ztup ztup) _
	<- ({x}{x2}{ofx}{vx}{splx} splvar2-total ofx vx splx ->
		sc2 (DofM x ofx) (Dcomp x vx) (DsplM' x x2 splx) Dred' (Dstep x) 
			(DsplM x x2 splx : split2 (M x) (P x x2) (R x x2)) (Dred x x2)
			(Dconv x x2 : lang-convert (B x x2) (BB x x2)) (Dconv' x x2 : lang-convert B' (BB' x x2)) 
			(Deqv x2 : reqv (R x x2 B) ()))
	<- strengthen-split-eval DsplM Dred Dconv DsplM+ Dred+ Dconv+.
- : sc2 (of^-app Dof _) (form^app-c Dcomp _) (spl2-app DsplA' DsplB) (mred-tup DredA' DredB) (ms-app-s1 Dstep) 
		(spl2-app DsplA DsplB) (mred-tup DredA DredB) 
		(conv-tup DconvA DconvB) (conv-tup DconvA' DconvB)
		(reqv-lett-p (reqv-app-s Deqv reqv-id))
	<- sc2 Dof Dcomp DsplA' DredA' Dstep DsplA DredA DconvA DconvA' Deqv
	<- lang-convert_12-total _ DconvB.
- : sc2 (of^-app _ Dof) (form^app-c _ Dcomp) (spl2-app DsplA DsplB') (mred-tup DredA DredB') (ms-app-s2 Dstep) 
		(spl2-app DsplA DsplB) (mred-tup DredA DredB) 
		(conv-tup DconvA DconvB) (conv-tup DconvA DconvB')
		(reqv-lett-p (reqv-app-s reqv-id Deqv))
	<- sc2 Dof Dcomp DsplB' DredB' Dstep DsplB DredB DconvB DconvB' Deqv
	<- lang-convert_12-total _ DconvA.
- : sc2 (of^-let DofE DofM) (form^let-c DcompE _) (spl2-let DsplE' DsplM) (mred-tup DredE' DredM) (ms-let-s1 Dstep) 
		(spl2-let DsplE DsplM) (mred-tup DredE DredM) 
		(conv-tup DconvE DconvM) (conv-tup DconvE' DconvM)
		(reqv-lett-p (reqv-let-s1 Deqv))
	<- sc2 DofE DcompE DsplE' DredE' Dstep DsplE DredE DconvE DconvE' Deqv
	<- lang-convert_12-total _ DconvM.
%{- : sc2 (of^-let DofE DofM) (form^let-c _ DcompM) (spl2-let DsplE DsplM') (mred-tup DredE DredM') (ms-let-s2 Dstep) (spl2-let DsplE DsplM+) (mred-tup DredE DredM+) (conv-tup DconvE DconvM) (conv-tup DconvE DconvM')
	<- ({x}{x2}{ofx}{vx}{splx} splvar2-total ofx vx splx ->
		sc2 (DofM x ofx) (DcompM x vx) (DsplM' x x2 splx) DredM' (Dstep x) (DsplM x x2 splx) (DredM x x2) (Dignroe x x2) (Dignore x x2))
	<- strengthen-split-eval DsplM DredM DsplM+ DredM+
	<- lang-convert_12-total _ DconvE
	<- lang-convert_12-total _ DconvM
	<- lang-convert_12-total _ DconvM'.}%
- : sc2 (of^-prev Dof) (form^prev Dcomp) (spl2-prev Dspl') (mred-pi2 Dred') (ms-prev-s Dstep) 
		(spl2-prev Dspl) (mred-pi2 Dred) Dconv Dconv' Deqv
	<- sc1 Dof Dcomp Dspl' Dred' Dstep Dspl Dred Dconv Dconv' Deqv.
%{- : sc2 (of^-prev (Dof : of^ E (fut A) wor1)) (form^prev Dcomp)
		(spl2-let (spl2-exv Dsplr) ([x][x2][s] spl2-prev (Dspl' x x2 s : split1 (E' x) C' _)))
		(Dred : mred (tup (exv ztup) (pi2 C')) _)
		(ms-prev-ls Dstep : mstep wor2 (prev E) (let (exv Q) ([x] prev (E' x))))
		(spl2-prev Dspl) 
		Dred'
		Dconv Dconv'
	<- spl1-total Dof Dcomp (Dspl : split1 E C _)
	<- lc Dspl Dspl' Dstep (Deq : eq-term C C')
	<- eq-term-sym Deq (Deq' : eq-term C' C)
	<- eq-cong ([x] tup (exv ztup) (pi2 x)) Deq' Deq''
	<- mred-resp Dred Deq'' eq-term_ (mred-tup _ Dred')
	<- lang-convert_12-total _ Dconv'
	<- lang-convert_12-total _ Dconv.}%

%worlds (correctness-block) (sc1 _ _ _ _ _ _ _ _ _ _) (sc2 _ _ _ _ _ _ _ _ _ _).
%total (D1 E) (sc1 _ _ _ _ D1 _ _ _ _ _) (sc2 _ _ _ _ E _ _ _ _ _).
