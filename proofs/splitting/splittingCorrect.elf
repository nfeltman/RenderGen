
%block correctness-block : 
	some {A : ty}
	block {x : term lang0}  {x2:term lang2} 
	{ofx : of^ x A wor2} {vx : form^ x vars2 wor2} 
	{splx:splitvar2 x x2} {_ : splvar2-total ofx vx splx}.


splitG-eval-resp : splitG E C -> splitG E C' -> mred C V -> mred C' V -> type.
%mode splitG-eval-resp +Dspl +Dspl' +Dred -Dred'.
- : splitG-eval-resp _ _ Dred Dred.
%worlds (correctness-block) (splitG-eval-resp _ _ _ _).
%total {} (splitG-eval-resp _ _ _ _).

%% GROUND SPLITTING CORRECTNESS
scG : of^ E A worG -> form^ E comp1 worG -> splitG E' I' -> mred I' V -> mstep worG E E' -> splitG E I -> mred I V -> type.
%mode scG +Dof +Dcomp +Dstep +Dspl' +Dred' -Dspl -Dred.

- : scG (of^-pi1 (of^-exv (of^-tup _ Dof2))) (form^pi1-c (form^exv (form^tup-n _ Dval2)))
	(splg-exv Dsplg1) _
	(ms-beta beta-pi1 _)
	(splg-pi1 (splg-exv (splgv-tup Dsplg1 Dsplg2))) 
	(mred-pi1 mred-exv)
	<- splgv-total Dof2 Dval2 Dsplg2.
- : scG (of^-pi2 (of^-exv (of^-tup Dof1 _))) (form^pi2-c (form^exv (form^tup-n Dval1 _)))
	(splg-exv Dsplg2) _
	(ms-beta beta-pi2 _)
	(splg-pi2 (splg-exv (splgv-tup Dsplg1 Dsplg2))) 
	(mred-pi2 mred-exv)
	<- splgv-total Dof1 Dval1 Dsplg1.
- : scG (of^-app (of^-exv (of^-lam _ DofM)) (of^-exv DofE)) (form^app-c (form^exv (form^lam1 DcompM _)) (form^exv DvalE))
	(Dsplg3 : splitG (M _ E) I')
	(Dred3 : mred I' _)
	(ms-beta beta-app _ : mstep worG (app (exv (lam M)) (exv E)) (M _ E))
	(splg-app (splg-exv (splgv-lam DsplM)) (splg-exv DsplE)) 
	(mred-app Dred3' mred-exv mred-exv)
	<- splgv-total DofE DvalE (DsplE : splitGv E I)
	<- splg-total/branch2 DofM DcompM (DsplM : {f}{f1} splitGv f f1 -> {x}{x1} splitGv x x1 -> splitG (M f x) (N f1 x1))
	<- splitG-eval-resp Dsplg3 (DsplM _ _ (splgv-lam DsplM) E I DsplE : splitG (M _ E) (N _ I)) Dred3 Dred3'.
- : scG (of^-unrl (of^-exv (of^-roll _ Dof))) (form^unrl-c (form^exv (form^roll-n Dval)))
	(splg-exv Dsplg) _
	(ms-beta beta-unrl _)
	(splg-unrl (splg-exv (splgv-roll Dsplg))) 
	(mred-unrl mred-exv).

- : scG (of^-case (of^-exv (of^-inj1 _ DofE)) DofM DofN _) (form^case-cG (form^exv (form^inj1-n DvalE)) DcompM DcompN)
	Dsplg3 Dred3 (ms-beta beta-case1 _)
	(splg-case (splg-exv (splgv-inj1 DsplE)) DsplM DsplN) 
	(mred-case (mred/case-inj1 Dred3') mred-exv)
	<- splgv-total DofE DvalE DsplE
	<- splg-total/branch DofM DcompM DsplM
	<- splg-total/branch DofN DcompN DsplN
	<- splitG-eval-resp Dsplg3 (DsplM E I DsplE) Dred3 Dred3'.

- : scG (of^-case (of^-exv (of^-inj2 _ DofE)) DofM DofN _) (form^case-cG (form^exv (form^inj2-n DvalE)) DcompM DcompN)
	Dsplg3 Dred3 (ms-beta beta-case2 _)
	(splg-case (splg-exv (splgv-inj2 DsplE)) DsplM DsplN) 
	(mred-case (mred/case-inj2 Dred3') mred-exv)
	<- splgv-total DofE DvalE DsplE
	<- splg-total/branch DofM DcompM DsplM
	<- splg-total/branch DofN DcompN DsplN
	<- splitG-eval-resp Dsplg3 (DsplN E I DsplE) Dred3 Dred3'.

- : scG _ _	(splg-exv (splgv-tup Dsplg1 Dsplg2)) mred-exv 
	(ms-beta beta-tup fsw-worG)	(splg-tup (splg-exv Dsplg1) (splg-exv Dsplg2)) (mred-tup mred-exv mred-exv).
- : scG _ _ (splg-exv (splgv-inj1 Dsplg)) mred-exv (ms-beta beta-inj1 fsw-worG) (splg-inj1 (splg-exv Dsplg)) (mred-inj1 mred-exv).
- : scG _ _ (splg-exv (splgv-inj2 Dsplg)) mred-exv (ms-beta beta-inj2 fsw-worG) (splg-inj2 (splg-exv Dsplg)) (mred-inj2 mred-exv).
- : scG _ _ (splg-exv (splgv-roll Dsplg)) mred-exv (ms-beta beta-roll fsw-worG) (splg-roll (splg-exv Dsplg)) (mred-roll mred-exv).
- : scG (of^-tup Dof _) (form^tup-c Dcomp _)
		(splg-tup Dsplg' DsplgB) (mred-tup Dred' DredB) 
		(ms-tup-s1 Dstep) 
		(splg-tup Dsplg DsplgB) (mred-tup Dred DredB)
	<- scG Dof Dcomp Dsplg' Dred' Dstep Dsplg Dred.
- : scG (of^-tup _ Dof) (form^tup-c _ Dcomp)
		(splg-tup DsplgB Dsplg') (mred-tup DredB Dred') 
		(ms-tup-s2 Dstep) 
		(splg-tup DsplgB Dsplg) (mred-tup DredB Dred)
	<- scG Dof Dcomp Dsplg' Dred' Dstep Dsplg Dred.
- : scG (of^-pi1 Dof) (form^pi1-c Dcomp) 
		(splg-pi1 Dsplg') (mred-pi1 Dred') 
		(ms-pi1-s Dstep) 
		(splg-pi1 Dsplg) (mred-pi1 Dred)
	<- scG Dof Dcomp Dsplg' Dred' Dstep Dsplg Dred.
- : scG (of^-pi2 Dof) (form^pi2-c Dcomp) 
		(splg-pi2 Dsplg') (mred-pi2 Dred') 
		(ms-pi2-s Dstep) 
		(splg-pi2 Dsplg) (mred-pi2 Dred)
	<- scG Dof Dcomp Dsplg' Dred' Dstep Dsplg Dred.
- : scG (of^-inj1 Dwf Dof) (form^inj1-c Dcomp) 
		(splg-inj1 Dsplg') (mred-inj1 Dred') 
		(ms-inj1-s Dstep) 
		(splg-inj1 Dsplg) (mred-inj1 Dred)
	<- scG Dof Dcomp Dsplg' Dred' Dstep Dsplg Dred.
- : scG (of^-inj2 Dwf Dof) (form^inj2-c Dcomp) 
		(splg-inj2 Dsplg') (mred-inj2 Dred') 
		(ms-inj2-s Dstep) 
		(splg-inj2 Dsplg) (mred-inj2 Dred)
	<- scG Dof Dcomp Dsplg' Dred' Dstep Dsplg Dred.
- : scG (of^-case Dof _ _ _) (form^case-cG Dcomp _ _) 
		(splg-case Dsplg' DsplgM DsplgN) (mred-case DredMN Dred') 
		(ms-case-s1 Dstep) 
		(splg-case Dsplg DsplgM DsplgN) (mred-case DredMN Dred)
	<- scG Dof Dcomp Dsplg' Dred' Dstep Dsplg Dred.
- : scG (of^-roll _ Dof) (form^roll-c Dcomp) 
		(splg-roll Dsplg') (mred-roll Dred') 
		(ms-roll-s Dstep) 
		(splg-roll Dsplg) (mred-roll Dred)
	<- scG Dof Dcomp Dsplg' Dred' Dstep Dsplg Dred.
- : scG (of^-unrl Dof) (form^unrl-c Dcomp) 
		(splg-unrl Dsplg') (mred-unrl Dred') 
		(ms-unrl-s Dstep) 
		(splg-unrl Dsplg) (mred-unrl Dred)
	<- scG Dof Dcomp Dsplg' Dred' Dstep Dsplg Dred.
- : scG (of^-app Dof _) (form^app-c Dcomp _) 
		(splg-app Dsplg' DsplgB) (mred-app DredM Dred' DredB) 
		(ms-app-s1 Dstep) 
		(splg-app Dsplg DsplgB) (mred-app DredM Dred DredB)
	<- scG Dof Dcomp Dsplg' Dred' Dstep Dsplg Dred.
- : scG (of^-app _ Dof) (form^app-c _ Dcomp) 
		(splg-app DsplgB Dsplg') (mred-app DredM DredB Dred')
		(ms-app-s2 Dstep) 
		(splg-app DsplgB Dsplg) (mred-app DredM DredB Dred)
	<- scG Dof Dcomp Dsplg' Dred' Dstep Dsplg Dred.
%worlds (correctness-block) (scG _ _ _ _ _ _ _).
%total (D) (scG _ _ _ _ D _ _).

split1-unique/strengthen : 
	split1 E C R -> 
	({x}{x2} splitvar2 x x2 -> split1 E C' ([l] R' l x2)) -> 
	eq-term C C' -> 
	({l}{x2} eq-term (R l) (R' l x2)) -> type.
%mode split1-unique/strengthen +DsplE +DsplE' -Deq1 -Deq2.
- : split1-unique/strengthen Dspl Dspl' (DeqC ztup ztup) (DeqR ztup)
	<- ({x}{x2}{s} split1-unique Dspl (Dspl' x x2 s) (DeqC x x2) ([l] DeqR x l x2)).
%worlds (splitting-block) (split1-unique/strengthen _ _ _ _).
%total {} (split1-unique/strengthen _ _ _ _).

split1-unique/strengthen/branchG : 
	({y}{y1} splitGv y y1 -> split1 (E y) (C y1) R) -> 
	({x}{x2} splitvar2 x x2 -> {y}{y1} splitGv y y1 -> split1 (E y) (C' y1) ([l] R' l x2)) -> 
	({y1} eq-term (C y1) (C' y1)) -> 
	({l}{x2} eq-term (R l) (R' l x2)) -> type.
%mode split1-unique/strengthen/branchG +DsplE +DsplE' -Deq1 -Deq2.
- : split1-unique/strengthen/branchG Dspl Dspl' (DeqC ztup ztup ztup) (DeqR ztup ztup ztup)
	<- ({x}{x2}{s}{y}{y1}{ys} split1-unique (Dspl y y1 ys) (Dspl' x x2 s y y1 ys) (DeqC x x2 y y1) ([l] DeqR x y y1 l x2)).
%worlds (splitting-block) (split1-unique/strengthen/branchG _ _ _ _).
%total {} (split1-unique/strengthen/branchG _ _ _ _).

%% LIFTING CORRECTNESS
lc : split1 E C R -> 
	splitres Q Q' -> 
	({x}{x2} splitvar2 x x2 -> split1 (E' x) C' (R' x2)) -> 
	lstep E Q E' ->
	eq-term C C' -> 
	({l} reqv (R l) (let Q' ([y] R' y l))) -> type.
%mode lc +DsplE +Dsplres +DsplE' +Dstep -Deq -Deqv.

%% LIFT RULES
- : lc (spl1-next (spl2-exv _)) _ ([x][x2][s] spl1-next (spl2-exv _)) (ls-next-r _ : lstep (next (exv E)) E ([x] next (exv (exv x)))) eq-term_ ([l] reqv-lift-base).
- : lc (spl1-tup Dspl DsplB) DsplQ ([x][x2][s] spl1-tup (Dspl' x x2 s) (DsplB' x x2 s)) (ls-tup-s1 Dstep) 
		Deq' ([l] reqv-lift-in-lett ([l1][l2] reqv-tup-s (Deqv l1) reqv-id ;; reqv-lift-tup1 (DeqR l2)))
	<- lc Dspl DsplQ Dspl' Dstep Deq Deqv
	<- split1-unique/strengthen DsplB DsplB' DeqB DeqR
	<- ({y}{z} eq-cong/lett DeqB ([x][y] eq-term_) (DeqB' y z))
	<- eq-cong/lett Deq DeqB' Deq'.
- : lc (spl1-tup DsplB Dspl) DsplQ ([x][x2][s] spl1-tup (DsplB' x x2 s) (Dspl' x x2 s)) (ls-tup-s2 Dstep) 
		Deq'' ([l] reqv-lift-in-lett ([l1][l2] reqv-tup-s reqv-id (Deqv l2) ;; reqv-lift-tup2 (DeqR l1)))
	<- lc Dspl DsplQ Dspl' Dstep Deq Deqv
	<- split1-unique/strengthen DsplB DsplB' DeqB DeqR
	<- ({y}{z} eq-cong/lett Deq ([x][y] eq-term_) (Deq' y z))
	<- eq-cong/lett DeqB Deq' Deq''.
- : lc (spl1-pi1 Dspl) DsplQ  ([x][x2][s] spl1-pi1 (Dspl' x x2 s)) (ls-pi1-s Dstep) Deq' ([l] reqv-pi1-s (Deqv l) ;; reqv-lift-pi1)
	<- lc Dspl DsplQ Dspl' Dstep Deq Deqv
	<- eq-cong/lett Deq ([x][y] eq-term_) Deq'.
- : lc (spl1-pi2 Dspl) DsplQ ([x][x2][s] spl1-pi2 (Dspl' x x2 s)) (ls-pi2-s Dstep) Deq' ([l] reqv-pi2-s (Deqv l) ;; reqv-lift-pi2)
	<- lc Dspl DsplQ Dspl' Dstep Deq Deqv
	<- eq-cong/lett Deq ([x][y] eq-term_) Deq'.
- : lc (spl1-inj1 Dspl) DsplQ  ([x][x2][s] spl1-inj1 (Dspl' x x2 s)) (ls-inj1-s Dstep) Deq' Deqv
	<- lc Dspl DsplQ Dspl' Dstep Deq Deqv
	<- eq-cong/lett Deq ([x][y] eq-term_) Deq'.
- : lc (spl1-inj2 Dspl) DsplQ  ([x][x2][s] spl1-inj2 (Dspl' x x2 s)) (ls-inj2-s Dstep) Deq' Deqv
	<- lc Dspl DsplQ Dspl' Dstep Deq Deqv
	<- eq-cong/lett Deq ([x][y] eq-term_) Deq'.
- : lc (spl1-roll Dspl) DsplQ  ([x][x2][s] spl1-roll (Dspl' x x2 s)) (ls-roll-s Dstep) Deq' Deqv
	<- lc Dspl DsplQ Dspl' Dstep Deq Deqv
	<- eq-cong/lett Deq ([x][y] eq-term_) Deq'.
- : lc (spl1-unrl Dspl) DsplQ ([x][x2][s] spl1-unrl (Dspl' x x2 s)) (ls-unrl-s Dstep) Deq' Deqv
	<- lc Dspl DsplQ Dspl' Dstep Deq Deqv
	<- eq-cong/lett Deq ([x][y] eq-term_) Deq'.
- : lc (spl1-app Dspl DsplB) DsplQ ([x][x2][s] spl1-app (Dspl' x x2 s) (DsplB' x x2 s)) (ls-app-s1 Dstep) 
		Deq' ([l] reqv-lift-in-lett ([l12][l3] reqv-lift-in-lett ([l1][l2] 
				reqv-app-s (Deqv l1) reqv-id ;; reqv-lift-app1 (DeqR' l2 l3))))
	<- lc Dspl DsplQ Dspl' Dstep Deq Deqv
	<- split1-unique/strengthen DsplB DsplB' DeqB DeqR
	<- ({y}{z} eq-cong/lett DeqB ([x][y] eq-term_) (DeqB' y z))
	<- eq-cong/lett Deq DeqB' Deq'
	<- ({y}{l2}{l3} eq-cong2 tup (DeqR l2 y) eq-term_ (DeqR' l2 l3 y)).
- : lc (spl1-app DsplB Dspl) DsplQ ([x][x2][s] spl1-app (DsplB' x x2 s) (Dspl' x x2 s)) (ls-app-s2 Dstep) 
		Deq'' ([l] reqv-lift-in-lett ([l12][l3] reqv-lift-in-lett ([l1][l2] 
				reqv-app-s reqv-id (reqv-tup-s (Deqv l2) reqv-id ;; reqv-lift-tup1 ([l] eq-term_)) ;; reqv-lift-app2 (DeqR l1))))
	<- lc Dspl DsplQ Dspl' Dstep Deq Deqv
	<- split1-unique/strengthen DsplB DsplB' DeqB DeqR
	<- ({y}{z} eq-cong/lett Deq ([x][y] eq-term_) (Deq' y z))
	<- eq-cong/lett DeqB Deq' Deq''.
- : lc (spl1-letg Dspl DsplM) DsplQ 
		([x][x2][s] spl1-letg (Dspl' x x2 s) (DsplM' x x2 s)) 
		(ls-letg-s1 Dstep) 
		Deq' 
		([l] reqv-lift-in-lett ([l1][l2] reqv-let-s (Deqv l1) ([_] reqv-id) ;; reqv-lift-chain (DeqR l2)))
	<- lc Dspl DsplQ Dspl' Dstep Deq Deqv
	<- split1-unique/strengthen/branchG DsplM DsplM' DeqM DeqR
	<- ({y}{z1} eq-cong/lett (DeqM y) ([_][_] eq-term_) (DeqM' y z1))
	<- eq-cong/lett Deq DeqM' Deq'.
- : lc (spl1-caseg Dspl DsplM DsplN) DsplQ 
		([x][x2][s] spl1-caseg (Dspl' x x2 s) (DsplM' x x2 s) (DsplN' x x2 s)) 
		(ls-caseg-s1 Dstep) 
		Deq' 
		([l] reqv-lift-in-lett ([l1][l23] reqv-case-s (reqv-let-s (Deqv l1) ([_] reqv-id) ;; reqv-lift-chain ([_] eq-term_)) ([_]reqv-id) ([_]reqv-id) ;; reqv-lift-case DeqvM DeqvN))
	<- lc Dspl DsplQ Dspl' Dstep Deq Deqv
	<- split1-unique/strengthen/branchG DsplM DsplM' DeqM DeqvM
	<- split1-unique/strengthen/branchG DsplN DsplN' DeqN DeqvN
	<- ({z}{x} eq-cong/lett (DeqM x) ([_][_] eq-term_) (DeqM' z x))
	<- ({z}{x} eq-cong/lett (DeqN x) ([_][_] eq-term_) (DeqN' z x))
	<- ({x}{z} eq-cong/case eq-term_ (DeqM' z) (DeqN' z) (DeqMN x z))
	<- eq-cong/lett Deq DeqMN Deq'.
%worlds (correctness-block) (lc _ _ _ _ _ _).
%total (D) (lc D _ _ _ _ _).

%% USES UNIQUENESS OF SPLITTING TO SHOW REDUCTION RESPECTS IT
split-eval-resp : split1 E C R -> split1 E C' R' -> mred C (tup I B) -> mred C' (tup I B) -> ({x} eq-term (R x) (R' x)) -> type.
%mode split-eval-resp +Dspl +Dspl' +Dred -Dred' -Deq.
- : split-eval-resp _ _ Dred Dred ([x] eq-term_).
%worlds (correctness-block) (split-eval-resp _ _ _ _ _).
%total {} (split-eval-resp _ _ _ _ _).

split-eval-eq : split1 E C _ -> mred C V -> split1 E C' _  -> mred C' V' -> eq-term V V' -> type.
%mode split-eval-eq +Dspl +Dspl' +Dred +Dred' -Deq.
- : split-eval-eq _ Dred _ Dred' Deq
	<- mred-unique Dred Dred' Deq.
%worlds (correctness-block) (split-eval-eq _ _ _ _ _).
%total {} (split-eval-eq _ _ _ _ _).


%% LEMMAS FOR SPLITTING CORRECTNESS
sc1/app-r : of^ (app (exv (lam M)) (exv E)) A wor1 -> 
		form^ (app (exv (lam M)) (exv E)) comp1 wor1 ->
		split1 (M (lam M) E) C' R' -> 
		mred C' (tup I B0) -> 
		split1 (app (exv (lam M)) (exv E)) C R -> 
		mred C (tup I (tup (tup ztup ztup) (roll B0))) -> 
		lang-convert B0 lang2 B ->
		reqv (R (tup (tup ztup ztup) (roll B))) (R' B) ->
		type.
%mode sc1/app-r +Dof +Dcomp +Dspl' +Dred' -Dspl -Dred -Dconv -Dreqv.

- : sc1/app-r Dof Dcomp Dspl (Dred : mred C' (tup I B0))
	(spl1-app (spl1-exv (splv-lam DsplM)) (spl1-exv DsplV))
	(mred-lett 
		(mred-lett 
			(mred-lett 
				mred-exv
				(mred-app (mred-lett mred-exv Dred'') mred-exv mred-exv)
				)
			mred-exv
			)
		mred-exv
		)
	Dconv Deqv
	<- spl1-total Dof Dcomp (spl1-app 
		(spl1-exv (splv-lam ([f][f1][f2][sf][x][x1][x2][sx] DsplM f f1 f2 sf x x1 x2 sx : split1 (M f x) (C f1 x1) (R f2 x2) )))
		(spl1-exv (DsplV : splitval V Vi Vq)))
	<- split-eval-resp Dspl (DsplM (lam M) _ _ (splv-lam DsplM) V Vi Vq DsplV) Dred Dred'' ([l] Deq l : eq-term (R' l) (R _ Vq l))
	<- lang-convert_12-total B0 (Dconv : lang-convert B0 lang2 B)
	<- eq-term-sym (Deq B) (Deq' : eq-term (R _ Vq B) (R' B))
	<- reqv-resp 
		((	reqv-lett-r ;;
			reqv-lett-r ;;
			(reqv-app-s reqv-id reqv-tup-d) ;;
			reqv-app-r ;;		
			reqv-lett-r ;;
			(reqv-let-s reqv-unrl-r ([_] reqv-id)) ;;
			reqv-let-r
			)
		: reqv 
			(lett (exv (tup (tup ztup ztup) (roll B))) ([l12] [l3] 
				lett (exv l12) ([l1] [l2] 
					app 
						(exv (lam ([f][xl] lett (exv xl) ([x][l] let (unrl (exv l)) ([ul] R f x ul))))) 
						(tup (exv Vq) (exv l3)))))
			(R _ Vq B))
		eq-term_ Deq' Deqv
.
%worlds (correctness-block) (sc1/app-r _ _ _ _ _ _ _ _).
%total (D) (sc1/app-r D _ _ _ _ _ _ _).

invert/exv--resp/tup : 
		mred (exv V1) V2 -> 
		mred C (tup V1 B) -> 
		mred C (tup V2 B) -> type.
%mode invert/exv--resp/tup +Dspl' +Dred' -Dred.
- : invert/exv--resp/tup DredV DredC' DredC
	<- mred-invert/exv DredV (Deq : eq-term V1 V2)
	<- eq-cong2 tup Deq eq-term_ Deq'
	<- mred-resp DredC' eq-term_ Deq' DredC.
%worlds (correctness-block) (invert/exv--resp/tup _ _ _).
%total (D) (invert/exv--resp/tup D _ _).

%% SPLITTING CORRECTNESS FOR BETA RULES
sc1/beta : of^ E A wor1 -> form^ E comp1 wor1 -> 
	split1 E' C' R' -> mred C' (tup I B') -> 
	beta E E' -> 
	split1 E C R -> mred C (tup I B) -> 
	lang-convert B lang2 B2 -> lang-convert B' lang2 B2' -> 
	reqv (R B2) (R' B2') -> type.
%mode sc1/beta +Dof +Dcomp +Dspl' +Dred' +Dstep -Dspl -Dred -Dconv -Dconv' -Deqv.

- : sc1/beta (of^-tup (of^-exv Dof1) (of^-exv Dof2)) (form^tup-c (form^exv Dcomp1) (form^exv Dcomp2))
		(spl1-exv (splv-tup (Dsplv1 : splitval V1 I1 Q1) (Dsplv2 : splitval V2 I2 Q2)))
		(Dred' : mred (exv (tup (tup I1 I2) ztup)) (tup I B'))
		(beta-tup : beta (tup (exv V1) (exv V2)) (exv (tup V1 V2)))
		(spl1-tup (spl1-exv Dsplv1) (spl1-exv Dsplv2))
		(mred-lett (mred-lett DredM mred-exv) mred-exv : mred _ (tup I (tup ztup ztup)))
		conv-tupzz Dconv'
		(reqv-lett-r ;; reqv-tup-d : reqv 
			(lett (exv (tup ztup ztup)) ([l1] [l2] tup (exv Q1) (exv Q2))) 
			(exv (tup Q1 Q2))
		)
		<- mred-invert/exv-tup Dred' (DredI : mred (exv (tup I1 I2)) I) _
		<- invert/exv--resp/tup DredI mred-exv DredM
		<- lang-convert_12-total B' Dconv'.

- : sc1/beta (of^-pi1 (of^-exv (of^-tup _ Dof2))) (form^pi1-c (form^exv (form^tup-n _ Dcomp2)))
	(spl1-exv Dspl1) (mred-exv)
	beta-pi1
	(spl1-pi1 (spl1-exv (splv-tup Dspl1 Dspl2)))
	(mred-lett 
		(mred-tup (mred-pi1 mred-exv) mred-exv) 
		mred-exv)
	conv-ztup conv-ztup
	reqv-pi1-r
	<- splv-total Dof2 Dcomp2 Dspl2.

- : sc1/beta (of^-pi2 (of^-exv (of^-tup Dof1 _))) (form^pi2-c (form^exv (form^tup-n Dcomp1 _)))
	(spl1-exv Dspl2) (mred-exv)
	beta-pi2
	(spl1-pi2 (spl1-exv (splv-tup Dspl1 Dspl2)))
	(mred-lett 
		(mred-tup (mred-pi2 mred-exv) mred-exv) 
		mred-exv)
	conv-ztup conv-ztup
	reqv-pi2-r
	<- splv-total Dof1 Dcomp1 Dspl1.

- : sc1/beta Dof Dcomp Dspl' Dred'
	(Dstep : beta (app (exv (lam M)) (exv E)) V) 
	Dspl Dred 
	(conv-tup conv-tupzz (conv-roll Dconv)) Dconv
	Deqv
	<- beta/unique Dstep beta-app (Deq : eq-term V (M (lam M) E))
	<- split1-resp Dspl' Deq eq-term_ ([x] eq-term_) Dspl''
	<- sc1/app-r Dof Dcomp Dspl'' Dred' Dspl Dred Dconv Deqv.

- : sc1/beta _ _ (spl1-exv Dspl) mred-exv
	beta-unrl
	(spl1-unrl (spl1-exv (splv-roll Dspl)))
	(mred-lett (mred-tup (mred-unrl mred-exv) mred-exv) mred-exv)
	conv-ztup conv-ztup reqv-id.


- : sc1/beta (of^-inj1 _ (of^-exv Dof)) (form^inj1-c (form^exv Dcomp))
		(spl1-exv (splv-inj1 (Dsplv : splitval V I1 Q)))
		(Dred' : mred (exv (tup (inj1 I1) ztup)) (tup I B'))
		(beta-inj1 : beta (inj1 (exv V)) (exv (inj1 V)))
		(spl1-inj1 (spl1-exv Dsplv))
		(mred-lett DredM mred-exv : mred _ (tup I ztup))
		conv-ztup Dconv'
		reqv-id
		<- mred-invert/exv-tup Dred' (DredI : mred (exv (inj1 I1)) I) _
		<- invert/exv--resp/tup DredI mred-exv DredM
		<- lang-convert_12-total B' Dconv'.

- : sc1/beta (of^-inj2 _ (of^-exv Dof)) (form^inj2-c (form^exv Dcomp))
		(spl1-exv (splv-inj2 (Dsplv : splitval V I1 Q)))
		(Dred' : mred (exv (tup (inj2 I1) ztup)) (tup I B'))
		(beta-inj2 : beta (inj2 (exv V)) (exv (inj2 V)))
		(spl1-inj2 (spl1-exv Dsplv))
		(mred-lett DredM mred-exv : mred _ (tup I ztup))
		conv-ztup Dconv'
		reqv-id
		<- mred-invert/exv-tup Dred' (DredI : mred (exv (inj2 I1)) I) _
		<- invert/exv--resp/tup DredI mred-exv DredM
		<- lang-convert_12-total B' Dconv'.

- : sc1/beta (of^-roll _ (of^-exv Dof)) (form^roll-c (form^exv Dcomp))
		(spl1-exv (splv-roll (Dsplv : splitval V I1 Q)))
		(Dred' : mred (exv (tup (roll I1) ztup)) (tup I B'))
		(beta-roll : beta (roll (exv V)) (exv (roll V)))
		(spl1-roll (spl1-exv Dsplv))
		(mred-lett DredM mred-exv : mred _ (tup I ztup))
		conv-ztup Dconv'
		reqv-id
		<- mred-invert/exv-tup Dred' (DredI : mred (exv (roll I1)) I) _
		<- invert/exv--resp/tup DredI mred-exv DredM
		<- lang-convert_12-total B' Dconv'.

%worlds (correctness-block) (sc1/beta _ _ _ _ _ _ _ _ _ _).
%total (D1) (sc1/beta _ _ _ _ D1 _ _ _ _ _).

%% SPLITTING CORRECTNESS
sc1 : of^ E A wor1 -> form^ E comp1 wor1 -> 
	split1 E' C' R' -> mred C' (tup I B') -> 
	mstep wor1 E E' -> 
	split1 E C R -> mred C (tup I B) -> 
	lang-convert B lang2 B2 -> lang-convert B' lang2 B2' -> 
	reqv (R B2) (R' B2') -> type.
%mode sc1 +Dof +Dcomp +Dspl' +Dred' +Dstep -Dspl -Dred -Dconv -Dconv' -Deqv.
sc2 : of^ E A wor2 -> form^ E comp1 wor2 -> 
	split2 E' P' R' -> mred P' B' -> 
	mstep wor2 E E' -> 
	split2 E P R -> mred P B -> 
	lang-convert B lang2 B2 -> lang-convert B' lang2 B2' -> 
	reqv (R B2) (R' B2') -> type.
%mode sc2 +Dof +Dcomp +Dspl' +Dred' +Dstep -Dspl -Dred -Dconv -Dconv' -Deqv.


%% STAGE ONE REDUCTION RULES

- : sc1 DofE DcompE DsplE' DredC' (ms-beta Dstep _) DsplE DredC DconvB DconvB' Deqv
	<- sc1/beta DofE DcompE DsplE' DredC' Dstep DsplE DredC DconvB DconvB' Deqv.

- : sc2 Dof Dcomp
		(spl2-exv (splr-var Dsplr)) mred-exv
		(ms-prev-r : mstep wor2 (prev (exv (next E))) (exv (exv E))) 
		(spl2-prev (spl1-exv (splv-next Dsplr))) (mred-pi2 mred-exv) 
		conv-ztup conv-ztup reqv-id.

- : sc1 (of^-letg (of^-exv (of^-grnd DofV)) DofM) (form^letg (form^exv (form^grnd DvalE)) DcompM)
	(Dspl : split1 _ _ R2') Dred
	ms-letg-r
	(spl1-letg (spl1-exv (splv-grnd DsplV)) DsplM)
	(mred-lett (mred-lett mred-exv Dred') mred-exv)
	(conv-tup conv-ztup Dconv) Dconv
	Deqv
	<- splgv-total DofV DvalE DsplV
	<- spl1-total/branchG DofM DcompM (DsplM : {x}{x1} splitGv x x1 -> split1 (M x) (C2 x1) R2)
	<- split-eval-resp Dspl (DsplM V V1 DsplV) Dred Dred' ([x] DeqR x : eq-term (R2' x) (R2 x))
	<- ({x} eq-term-sym (DeqR x) (DeqR' x))
	<- lang-convert_12-total _ Dconv
	<- reqv-resp (reqv-lett-r ;; reqv-let-r : reqv 
			(lett (exv (tup ztup B2)) ([l1][l2] let (exv ztup) ([_] R2 l2)))
			(R2 B2)) 
		eq-term_ (DeqR' B2) Deqv.

- : sc1 (of^-caseg (of^-exv (of^-grnd (of^-inj1 _ DofV))) DofM DofN) (form^caseg (form^exv (form^grnd (form^inj1-n DvalE))) DcompM DcompN)
	(Dspl : split1 _ _ R2') Dred
	ms-caseg-r1
	(spl1-caseg (spl1-exv (splv-grnd (splgv-inj1 DsplV))) DsplM DsplN)
	(mred-lett (mred-case (mred/case-inj1 (mred-lett mred-exv Dred')) mred-exv) mred-exv)
	(conv-tup conv-ztup (conv-inj1 Dconv)) Dconv
	Deqv
	<- splgv-total DofV DvalE DsplV
	<- spl1-total/branchG DofM DcompM (DsplM : {x}{x1} splitGv x x1 -> split1 (M x) (C2 x1) R2)
	<- spl1-total/branchG DofN DcompN DsplN
	<- split-eval-resp Dspl (DsplM V V1 DsplV) Dred Dred' ([x] DeqR x : eq-term (R2' x) (R2 x))
	<- ({x} eq-term-sym (DeqR x) (DeqR' x))
	<- lang-convert_12-total _ Dconv
	<- reqv-resp ( reqv-lett-r ;; (reqv-case-s reqv-let-r ([x] reqv-id) ([x] reqv-id)) ;; reqv-case-r1 : reqv 
			(lett (exv (tup ztup (inj1 B2))) ([l1] [l23] case (let (exv ztup) ([_] exv l23)) R2 R3))
			(R2 B2)) 
		eq-term_ (DeqR' B2) Deqv.

- : sc1 (of^-caseg (of^-exv (of^-grnd (of^-inj2 _ DofV))) DofM DofN) (form^caseg (form^exv (form^grnd (form^inj2-n DvalE))) DcompM DcompN)
	(Dspl : split1 _ _ R3') Dred
	ms-caseg-r2
	(spl1-caseg (spl1-exv (splv-grnd (splgv-inj2 DsplV))) DsplM DsplN)
	(mred-lett (mred-case (mred/case-inj2 (mred-lett mred-exv Dred')) mred-exv) mred-exv)
	(conv-tup conv-ztup (conv-inj2 Dconv)) Dconv
	Deqv
	<- splgv-total DofV DvalE DsplV
	<- spl1-total/branchG DofM DcompM DsplM
	<- spl1-total/branchG DofN DcompN (DsplN : {x}{x1} splitGv x x1 -> split1 (N x) (C3 x1) R3)
	<- split-eval-resp Dspl (DsplN V V1 DsplV) Dred Dred' ([x] DeqR x : eq-term (R3' x) (R3 x))
	<- ({x} eq-term-sym (DeqR x) (DeqR' x))
	<- lang-convert_12-total _ Dconv
	<- reqv-resp (reqv-lett-r ;; (reqv-case-s reqv-let-r ([x] reqv-id) ([x] reqv-id)) ;; reqv-case-r2 : reqv 
			(lett (exv (tup ztup (inj2 B3))) ([l1] [l23] case (let (exv ztup) ([_] exv l23)) R2 R3))
			(R3 B3)) 
		eq-term_ (DeqR' B3) Deqv.


%% STAGE ONE DONENESS MARKING

- : sc1 (of^-next (of^-exv (of^-exv Dof))) (form^next-c (form^exv (form^var2 Dres)))
		(Dspl' : split1 (exv (next E)) C' R') (Dred' : mred C' (tup I B0))
		(ms-next-d :  mstep wor1 (next (exv (exv E))) (exv (next E)))
		(spl1-next (spl2-exv (splr-var Dsplr))) (mred-tup Dred1 Dred2) 
		Dconv Dconv
		Deqv
		<- splvar2-total Dof Dres (Dsplr : splitvar2 E Q)
		<- split-eval-resp Dspl' (spl1-exv (splv-next Dsplr)) Dred' Dred ([x] Deq x : eq-term (R' x) (exv Q))
		<- mred-invert/exv-tup Dred Dred1 Dred2
		<- lang-convert_12-total B0 (Dconv : lang-convert B0 lang2 B)
		<- reqv-resp (reqv-id : reqv (R' B) (R' B)) (Deq B) eq-term_  (Deqv : reqv (exv Q) (R' B)).

- : sc1 (of^-grnd (of^-exv Dof)) (form^grnd (form^exv Dval))
		(Dspl' : split1 (exv (grnd E)) C' R') (Dred' : mred C' (tup I B0))
		(ms-grnd-d :  mstep wor1 (grnd (exv E)) (exv (grnd E)))
		(spl1-grnd (splg-exv Dsplr)) (mred-tup Dred1 Dred2) 
		Dconv Dconv
		Deqv
		<- splgv-total Dof Dval Dsplr
		<- split1-unique Dspl' (spl1-exv (splv-grnd Dsplr)) Deq ([x] DeqR x : eq-term (R' x) (exv ztup))
		<- mred-resp Dred' Deq eq-term_ Dred
		<- mred-invert/exv-tup Dred Dred1 Dred2
		<- lang-convert_12-total B0 (Dconv : lang-convert B0 lang2 B)
		<- reqv-resp (reqv-id : reqv (R' B) (R' B)) (DeqR B) eq-term_  (Deqv : reqv (exv ztup) (R' B)).

%% STAGE ONE SUBSTEPS

- : sc1 (of^-pi1 Dof) (form^pi1-c Dcomp)
		(spl1-pi1 (Dspl' : split1 E' C' R')) 
		(mred-lett 
			(mred-tup (mred-pi1 (DredV : mred (exv V') (tup V1 V2))) (DredB : mred (exv B0') B1'))
			(DredC' : mred C' (tup V' B0'))
		)
		(ms-pi1-s Dstep)
		(spl1-pi1 Dspl) (mred-lett (mred-tup (mred-pi1 mred-exv) mred-exv) DredC)
		Dconv Dconv''
		(reqv-pi1-s Deqv : reqv (pi1 (R B)) (pi1 (R' B')))
	<- invert/exv--resp/tup DredV DredC' (DredC'' : mred C' (tup (tup V1 V2) B0'))
	<- sc1 Dof Dcomp Dspl' DredC'' Dstep 
		(Dspl : split1 E C R) (DredC : mred C (tup _ B0)) 
		(Dconv : lang-convert B0 lang2 B) (Dconv' : lang-convert B0' lang2 B') 
		(Deqv : reqv (R B) (R' B'))
	<- mred-invert/exv DredB (DeqB : eq-term B0' B1')
	<- conv-resp Dconv' DeqB eq-term_ Dconv''.

- : sc1 (of^-pi2 Dof) (form^pi2-c Dcomp)
		(spl1-pi2 (Dspl' : split1 E' C' R')) 
		(mred-lett 
			(mred-tup (mred-pi2 (DredV : mred (exv V') (tup V1 V2))) (DredB : mred (exv B0') B1'))
			(DredC' : mred C' (tup V' B0'))
		)
		(ms-pi2-s Dstep)
		(spl1-pi2 Dspl) (mred-lett (mred-tup (mred-pi2 mred-exv) mred-exv) DredC)
		Dconv Dconv''
		(reqv-pi2-s Deqv : reqv (pi2 (R B)) (pi2 (R' B')))
	<- invert/exv--resp/tup DredV DredC' (DredC'' : mred C' (tup (tup V1 V2) B0'))
	<- sc1 Dof Dcomp Dspl' DredC'' Dstep 
		(Dspl : split1 E C R) (DredC : mred C (tup _ B0)) 
		(Dconv : lang-convert B0 lang2 B) (Dconv' : lang-convert B0' lang2 B') 
		(Deqv : reqv (R B) (R' B'))
	<- mred-invert/exv DredB (DeqB : eq-term B0' B1')
	<- conv-resp Dconv' DeqB eq-term_ Dconv''.

- : sc1 (of^-tup Dof1 _) (form^tup-c Dcomp1 _)
		(spl1-tup (Dspl1' : split1 E1' C1' R1') (Dspl2 : split1 E2 C2 R2)) 
		(mred-lett 
			(mred-lett _ (DredC2 : mred C2 (tup I2' B2)))
			(DredC1' : mred C1' (tup I1 _)))
		(ms-tup-s1 Dstep)
		(spl1-tup Dspl1 Dspl2)
		(mred-lett (mred-lett mred-exv DredC2) DredC1)
		(conv-tup Dconv1 Dconv2) (conv-tup Dconv1' Dconv2)
		(reqv-lett-p (reqv-tup-s Deqv reqv-id) : reqv 
			(lett (exv (tup BB1  BB2)) ([l1][l2] tup (R1  l1) (R2 l2)))
			(lett (exv (tup BB1' BB2)) ([l1][l2] tup (R1' l1) (R2 l2))))
	<- sc1 Dof1 Dcomp1 Dspl1' DredC1' Dstep 
		(Dspl1 : split1 _ C1 R1) 
		(DredC1 : mred C1 (tup I1 B1)) 
		(Dconv1 : lang-convert B1 lang2 BB1) (Dconv1' : lang-convert B1' lang2 BB1')
		(Deqv : reqv (R1 BB1) (R1' BB1'))
	<- lang-convert_12-total B2 (Dconv2 : lang-convert B2 lang2 BB2).


- : sc1 (of^-unrl Dof) (form^unrl-c Dcomp)
		(spl1-unrl (Dspl' : split1 E' C' R')) 
		(mred-lett 
			(mred-tup (mred-unrl (DredV : mred (exv V') (roll V))) (DredB : mred (exv B0') B1'))
			(DredC' : mred C' (tup V' B0'))
		)
		(ms-unrl-s Dstep)
		(spl1-unrl Dspl) (mred-lett (mred-tup (mred-unrl mred-exv) mred-exv) DredC)
		Dconv Dconv'' Deqv
	<- invert/exv--resp/tup DredV DredC' (DredC'' : mred C' (tup (roll V) B0'))
	<- sc1 Dof Dcomp Dspl' DredC'' Dstep 
		(Dspl : split1 E C R) (DredC : mred C (tup _ B0))
		(Dconv : lang-convert B0 lang2 B) (Dconv' : lang-convert B0' lang2 B') 
		(Deqv : reqv (R B) (R' B'))
	<- mred-invert/exv DredB (DeqB : eq-term B0' B1')
	<- conv-resp Dconv' DeqB eq-term_ Dconv''.

- : sc1 (of^-roll _ Dof) (form^roll-c Dcomp)
		(spl1-roll (Dspl' : split1 E' C' R')) 
		(mred-lett mred-exv (DredC' : mred C' (tup I B'))) 
		(ms-roll-s Dstep)
		(spl1-roll Dspl)
		(mred-lett mred-exv DredC)
		Dconv1 Dconv1' Deqv
	<- sc1 Dof Dcomp Dspl' DredC' Dstep 
		(Dspl : split1 E C R) 
		(DredC : mred C (tup I B)) 
		(Dconv1 : lang-convert B lang2 BB) (Dconv1' : lang-convert B' lang2 BB')
		(Deqv : reqv (R BB) (R' BB')).

- : sc1 (of^-inj1 _ Dof) (form^inj1-c Dcomp)
		(spl1-inj1 (Dspl' : split1 E' C' R')) 
		(mred-lett mred-exv (DredC' : mred C' (tup I B'))) 
		(ms-inj1-s Dstep)
		(spl1-inj1 Dspl)
		(mred-lett mred-exv DredC)
		Dconv1 Dconv1' Deqv
	<- sc1 Dof Dcomp Dspl' DredC' Dstep 
		(Dspl : split1 E C R) 
		(DredC : mred C (tup I B)) 
		(Dconv1 : lang-convert B lang2 BB) (Dconv1' : lang-convert B' lang2 BB')
		(Deqv : reqv (R BB) (R' BB')).

- : sc1 (of^-inj2 _ Dof) (form^inj2-c Dcomp)
		(spl1-inj2 (Dspl' : split1 E' C' R')) 
		(mred-lett mred-exv (DredC' : mred C' (tup I B'))) 
		(ms-inj2-s Dstep)
		(spl1-inj2 Dspl)
		(mred-lett mred-exv DredC)
		Dconv1 Dconv1' Deqv
	<- sc1 Dof Dcomp Dspl' DredC' Dstep 
		(Dspl : split1 E C R) 
		(DredC : mred C (tup I B)) 
		(Dconv1 : lang-convert B lang2 BB) (Dconv1' : lang-convert B' lang2 BB')
		(Deqv : reqv (R BB) (R' BB')).

- : sc1 (of^-tup _ Dof2) (form^tup-c _ Dcomp2)
		(spl1-tup Dspl1 (Dspl2' : split1 E2' C2' R2')) 
		(mred-lett (mred-lett _ DredC2') (DredC1 : mred C1 (tup I1' B1)))
		(ms-tup-s2 Dstep)
		(spl1-tup Dspl1 Dspl2)
		(mred-lett (mred-lett mred-exv DredC2) DredC1)
		(conv-tup Dconv1 Dconv2) (conv-tup Dconv1 Dconv2')
		(reqv-lett-p (reqv-tup-s reqv-id Deqv) : reqv 
			(lett (exv (tup BB1 BB2 )) ([x][y] tup (R1 x) (R2  y)))
			(lett (exv (tup BB1 BB2')) ([x][y] tup (R1 x) (R2' y))))
	<- sc1 Dof2 Dcomp2 Dspl2' DredC2' Dstep 
		(Dspl2 : split1 _ C2 R2) 
		(DredC2 : mred C2 (tup I2 B2)) 
		(Dconv2 : lang-convert B2 lang2 BB2) (Dconv2' : lang-convert B2' lang2 BB2')
		(Deqv : reqv (R2 BB2) (R2' BB2'))
	<- lang-convert_12-total B1 (Dconv1 : lang-convert B1 lang2 BB1).

- : sc1 (of^-app Dof1 _) (form^app-c Dcomp1 _)
		(spl1-app (Dspl1' : split1 E1' C1' R1') (Dspl2 : split1 E2 C2 R2)) 
		(mred-lett 
			(mred-lett 
				(mred-lett 
					(DredCore : mred (exv (tup I3 (tup (tup B1' B2) B3))) (tup I B)) 
					(mred-app (Dred3 : mred (M (lam M) V2) (tup I3 B3)) 
						(Dred1 : mred (exv I1) (lam M)) 
						(Dred2 : mred (exv I2) V2)))
				(DredC2 : mred C2 (tup I2 B2)))
			(DredC1' : mred C1' (tup I1 B1')))
		(ms-app-s1 Dstep)
		(spl1-app Dspl1 Dspl2)
		(mred-lett 
			(mred-lett 
				(mred-lett mred-exv (mred-app Dred3' Dred1 Dred2 : mred _ (tup I B3)))
				DredC2)
			DredC1)
		(conv-tup (conv-tup Dconv1 Dconv2) Dconv3) Dconv'
		(reqv-lett-p (reqv-lett-p (reqv-app-s Deqv reqv-id)) : reqv 
			(lett (exv (tup (tup BB1  BB2) BB3)) ([l12][l3] lett (exv l12) ([l1][l2] app (R1  l1) (tup (R2 l2) (exv l3)))))
			(lett (exv (tup (tup BB1' BB2) BB3)) ([l12][l3] lett (exv l12) ([l1][l2] app (R1' l1) (tup (R2 l2) (exv l3))))))
	<- sc1 Dof1 Dcomp1 Dspl1' DredC1' Dstep 
		(Dspl1 : split1 _ C1 R1) 
		(DredC1 : mred C1 (tup I1 B1)) 
		(Dconv1 : lang-convert B1 lang2 BB1) (Dconv1' : lang-convert B1' lang2 BB1')
		(Deqv : reqv (R1 BB1) (R1' BB1'))
	<- lang-convert_12-total B2 (Dconv2 : lang-convert B2 lang2 BB2)
	<- lang-convert_12-total B3 (Dconv3 : lang-convert B3 lang2 BB3)
	<- mred-invert/exv-tup DredCore (DredI : mred (exv I3) I) (DredB : mred (exv (tup (tup B1' B2) B3)) B)
	<- mred-invert/exv DredB (DeqB : eq-term (tup (tup B1' B2) B3) B)
	<- conv-resp (conv-tup (conv-tup Dconv1' Dconv2) Dconv3) DeqB eq-term_ Dconv'
	<- invert/exv--resp/tup DredI Dred3 Dred3'.


- : sc1 (of^-app _ Dof2) (form^app-c _ Dcomp2)
		(spl1-app (Dspl1 : split1 (exv E1) C1 R1) (Dspl2' : split1 E2' C2' R2')) 
		(mred-lett 
			(mred-lett 
				(mred-lett 
					(DredCore : mred (exv (tup I3 (tup (tup B1 B2') B3))) (tup I B)) 
					(mred-app (Dred3 : mred (M (lam M) V2) (tup I3 B3)) 
						(Dred1 : mred (exv I1) (lam M)) 
						(Dred2 : mred (exv I2) V2)))
				DredC2')
			DredC1)
		(ms-app-s2 Dstep)
		(spl1-app Dspl1 Dspl2)
		(mred-lett 
			(mred-lett 
				(mred-lett mred-exv (mred-app Dred3' Dred1 Dred2))
				DredC2)
			DredC1)
		(conv-tup (conv-tup Dconv1 Dconv2) Dconv3) Dconv'
		(reqv-lett-p (reqv-lett-p (reqv-app-s reqv-id (reqv-tup-s Deqv reqv-id))) : reqv 
			(lett (exv (tup (tup BB1 BB2 ) BB3)) ([l12][l3] lett (exv l12) ([l1][l2] app (R1 l1) (tup (R2  l2) (exv l3)))))
			(lett (exv (tup (tup BB1 BB2') BB3)) ([l12][l3] lett (exv l12) ([l1][l2] app (R1 l1) (tup (R2' l2) (exv l3))))))
	<- sc1 Dof2 Dcomp2 Dspl2' DredC2' Dstep 
		(Dspl2 : split1 E2 C2 R2) 
		(DredC2 : mred C2 (tup I2 B2)) 
		(Dconv2 : lang-convert B2 lang2 BB2) (Dconv2' : lang-convert B2' lang2 BB2')
		(Deqv : reqv (R2 BB2) (R2' BB2'))
	<- lang-convert_12-total B1 (Dconv1 : lang-convert B1 lang2 BB1)
	<- lang-convert_12-total B3 (Dconv3 : lang-convert B3 lang2 BB3)
	<- mred-invert/exv-tup DredCore (DredI : mred (exv I3) I) (DredB : mred (exv (tup (tup B1 B2') B3)) B)
	<- mred-invert/exv DredB (DeqB : eq-term (tup (tup B1 B2') B3) B)
	<- conv-resp (conv-tup (conv-tup Dconv1 Dconv2') Dconv3) DeqB eq-term_ Dconv'
	<- invert/exv--resp/tup DredI Dred3 Dred3'.


- : sc1 (of^-next Dof) (form^next-c Dcomp)
		(spl1-next Dspl') (mred-tup mred-exv Dred')
		(ms-next-s Dstep)
		(spl1-next Dspl) (mred-tup mred-exv Dred) Dconv Dconv' Dreqv
	<- sc2 Dof Dcomp Dspl' Dred' Dstep Dspl Dred Dconv Dconv' Dreqv.

- : sc1 (of^-grnd Dof) (form^grnd Dcomp)
		(spl1-grnd Dspl') (mred-tup Dred' mred-exv)
		(ms-grnd-s Dstep)
		(spl1-grnd Dspl) (mred-tup Dred mred-exv) 
		conv-ztup conv-ztup reqv-id
	<- scG Dof Dcomp Dspl' Dred' Dstep Dspl Dred.

- : sc1 (of^-letg Dof1 _) (form^letg Dcomp1 _)
		(spl1-letg (Dspl1' : split1 E' C1' R1') ([x][x1][s] Dspl2 x x1 s : split1 (M x) (C2 x1) R2))
		(mred-lett 
			(mred-lett _ (DredC2 : mred (C2 I1) (tup I2' B2)))
			(DredC1' : mred C1' (tup I1 _)))
		(ms-letg-s1 Dstep)
		(spl1-letg Dspl1 Dspl2)
		(mred-lett (mred-lett mred-exv DredC2) DredC1)
		(conv-tup Dconv1 Dconv2) (conv-tup Dconv1' Dconv2)
		(reqv-lett-p (reqv-let-s Deqv ([_] reqv-id)) : reqv 
			(lett (exv (tup BB1  BB2)) ([l1][l2] let (R1  l1) ([_] R2 l2)))
			(lett (exv (tup BB1' BB2)) ([l1][l2] let (R1' l1) ([_] R2 l2))))
	<- sc1 Dof1 Dcomp1 Dspl1' DredC1' Dstep 
		(Dspl1 : split1 _ C1 R1) 
		(DredC1 : mred C1 (tup I1 B1)) 
		(Dconv1 : lang-convert B1 lang2 BB1) (Dconv1' : lang-convert B1' lang2 BB1')
		(Deqv : reqv (R1 BB1) (R1' BB1'))
	<- lang-convert_12-total B2 (Dconv2 : lang-convert B2 lang2 BB2).

sc1/case-s : 
		mred/case V1 
			([xx] lett (C2 xx) ([y] [z2] exv (tup y (tup B1' (inj1 z2)))))
			([xx] lett (C3 xx) ([y] [z3] exv (tup y (tup B1' (inj2 z3))))) 
			(tup I' B') ->
		{B1 : term lang1}
		eq-term (tup B1' B23) B' ->
		mred/case V1 
			([xx] lett (C2 xx) ([y] [z2] exv (tup y (tup B1 (inj1 z2)))))
			([xx] lett (C3 xx) ([y] [z3] exv (tup y (tup B1 (inj2 z3))))) 
			(tup I' (tup B1 B23)) -> 
		type.
%mode sc1/case-s +Dred' +B1 -Deq -Dred.
- : sc1/case-s 
		(mred/case-inj1 (mred-lett 
			(DredBody' : mred (exv (tup I2 (tup B1' (inj1 B2)))) (tup I' B'))
			(DredC2 : mred (C2 V1) (tup I2 B2)))
		: mred/case (inj1 V1) ([xx] lett (C2 xx) _) _ (tup I' B'))
		_ Deq
		(mred/case-inj1 (mred-lett mred-exv DredC2'))
	<- mred-invert/exv-tup DredBody' (DredI2 : mred (exv I2) I') (DredB12 : mred (exv (tup B1' (inj1 B2))) B')
	<- invert/exv--resp/tup DredI2 DredC2 (DredC2' : mred (C2 V1) (tup I' B2))
	<- mred-invert/exv DredB12 (Deq : eq-term (tup B1' (inj1 B2)) B').

- : sc1/case-s 
		(mred/case-inj2 (mred-lett 
			(DredBody' : mred (exv (tup I2 (tup B1' (inj2 B2)))) (tup I' B'))
			(DredC2 : mred (C2 V1) (tup I2 B2)))
		: mred/case (inj2 V1) _ ([xx] lett (C2 xx) _) (tup I' B'))
		_ Deq
		(mred/case-inj2 (mred-lett mred-exv DredC2')) 
	<- mred-invert/exv-tup DredBody' (DredI2 : mred (exv I2) I') (DredB12 : mred (exv (tup B1' (inj2 B2))) B')
	<- invert/exv--resp/tup DredI2 DredC2 (DredC2' : mred (C2 V1) (tup I' B2))
	<- mred-invert/exv DredB12 (Deq : eq-term (tup B1' (inj2 B2)) B').
%worlds (correctness-block) (sc1/case-s _ _ _ _).
%total (D) (sc1/case-s D _ _ _).

- : sc1 (of^-caseg Dof1 _ _) (form^caseg Dcomp1 _ _)
		(spl1-caseg 
				(Dspl1' : split1 E' C1' R1') 
				([x][x1][s] Dspl2 x x1 s : split1 (M x) (C2 x1) R2) 
				([x][x1][s] Dspl3 x x1 s : split1 (N x) (C3 x1) R3))
		(mred-lett 
			(mred-case 
				(DredC23' : mred/case
					V1
					([xx] lett (C2 xx) ([y] [z2] exv (tup y (tup B1' (inj1 z2)))))
					([xx] lett (C3 xx) ([y] [z3] exv (tup y (tup B1' (inj2 z3)))))
					(tup I' B'))
				(DredI1 : mred (exv I1) V1)
			)
			(DredC1' : mred C1' (tup I1 B1')))
		(ms-caseg-s1 Dstep)
		(spl1-caseg Dspl1 Dspl2 Dspl3)
		(mred-lett (mred-case DredC23 DredI1) DredC1)
		(conv-tup Dconv1 Dconv23) Dconv'
		(reqv-lett-p (reqv-case-s (reqv-let-s Deqv ([x] reqv-id)) ([x] reqv-id)([x] reqv-id)))
	<- sc1 Dof1 Dcomp1 Dspl1' DredC1' Dstep 
		(Dspl1 : split1 _ C1 R1) 
		(DredC1 : mred C1 (tup I1 B1)) 
		(Dconv1 : lang-convert B1 lang2 BB1) (Dconv1' : lang-convert B1' lang2 BB1')
		(Deqv : reqv (R1 BB1) (R1' BB1'))
	<- sc1/case-s DredC23' _ (Deq : eq-term (tup B1' B23) B') DredC23
	<- lang-convert_12-total B23 (Dconv23 : lang-convert B23 lang2 BB23)
	<- conv-resp (conv-tup Dconv1' Dconv23) Deq eq-term_ Dconv'.

%% STAGE TWO DONENESS MARKING
- : sc2 _ _ (spl2-exv (splr-tup Dsplr1 Dsplr2)) mred-exv
		ms-tup-d
		(spl2-tup (spl2-exv Dsplr1) (spl2-exv Dsplr2)) (mred-tup mred-exv mred-exv) 
		conv-tupzz conv-ztup reqv-lett-r.
- : sc2 _ _ (spl2-exv (splr-pi1 Dsplr)) mred-exv
		ms-pi1-d
		(spl2-pi1 (spl2-exv Dsplr)) mred-exv conv-ztup conv-ztup reqv-id.
- : sc2 _ _ (spl2-exv (splr-pi2 Dsplr)) mred-exv
		ms-pi2-d
		(spl2-pi2 (spl2-exv Dsplr)) mred-exv conv-ztup conv-ztup reqv-id.
- : sc2 _ _ (spl2-exv (splr-inj1 Dsplr)) mred-exv
		ms-inj1-d
		(spl2-inj1 (spl2-exv Dsplr)) mred-exv conv-ztup conv-ztup reqv-id.
- : sc2 _ _ (spl2-exv (splr-inj2 Dsplr)) mred-exv
		ms-inj2-d
		(spl2-inj2 (spl2-exv Dsplr)) mred-exv conv-ztup conv-ztup reqv-id.
- : sc2 _ _ (spl2-exv (splr-roll Dsplr)) mred-exv
		ms-roll-d
		(spl2-roll (spl2-exv Dsplr)) mred-exv conv-ztup conv-ztup reqv-id.
- : sc2 _ _ (spl2-exv (splr-unrl Dsplr)) mred-exv
		ms-unrl-d
		(spl2-unrl (spl2-exv Dsplr)) mred-exv conv-ztup conv-ztup reqv-id.
- : sc2 _ _ (spl2-exv (splr-case DsplrE DsplrM DsplrN)) mred-exv
		ms-case-d
		(spl2-case (spl2-exv DsplrE) ([x][x2][splx] spl2-exv (DsplrM x x2 splx)) ([x][x2][splx] spl2-exv (DsplrN x x2 splx)))
		(mred-tup mred-exv (mred-tup mred-exv mred-exv)) 
		(conv-tup conv-ztup conv-tupzz) conv-ztup (reqv-lett-r ;; reqv-lett-r).
- : sc2 _ _ (spl2-exv (splr-lam Dsplr)) mred-exv
		ms-lam-d
		(spl2-lam ([f][f2][splf][x][x2][splx] spl2-exv (Dsplr f f2 splf x x2 splx))) mred-exv conv-ztup conv-ztup reqv-id.
- : sc2 _ _ (spl2-exv (splr-app Dsplr1 Dsplr2)) mred-exv
		ms-app-d
		(spl2-app (spl2-exv Dsplr1) (spl2-exv Dsplr2)) (mred-tup mred-exv mred-exv) 
		conv-tupzz conv-ztup reqv-lett-r.
- : sc2 _ _ (spl2-exv (splr-let DsplrE DsplrM)) mred-exv
		ms-let-d
		(spl2-let (spl2-exv DsplrE) ([x][x2][splx] spl2-exv (DsplrM x x2 splx))) (mred-tup mred-exv mred-exv) 
		conv-tupzz conv-ztup reqv-lett-r.


sc2/branch : 
	({x} of^ x T1 wor2 -> of^ (M x) T2 wor2) ->
	({x} form^ x vars2 wor2 -> form^ (M x) comp1 wor2) ->
	({x}{x2} splitvar2 x x2 -> split2 (M' x) P' (R' x2)) -> 
	mred P' B' -> 
	({x} mstep wor2 (M x) (M' x)) ->
	({x}{x2} splitvar2 x x2 -> split2 (M x) P (R x2)) -> 
	mred P B -> 
	lang-convert B  lang2 (BB  : term lang2) -> 
	lang-convert B' lang2 (BB' : term lang2) -> 
	({x2} reqv (R x2 BB) (R' x2 BB')) -> type.
%mode sc2/branch +Dof +Dcomp +Dspl' +Dred' +Dstep -Dspl -Dred -Dconv -Dconv' -Deqv.
- : sc2/branch Dof Dcomp 
		(Dspl' : {x}{x2} splitvar2 x x2 -> split2 (M' x) P' (R' x2)) 
		(Dred' : mred P' B')
		Dstep Dspl (Dred ztup ztup) (Dconv ztup ztup) (Dconv' ztup ztup) (Deqv ztup)
	<- ({x}{x2}{ofx}{vx}{splx} splvar2-total ofx vx splx ->
		sc2 (Dof x ofx) (Dcomp x vx) (Dspl' x x2 splx) Dred' (Dstep x)
			(Dspl_1 x x2 splx : split2 (M x) (P_2 x x2) (R_1 x x2)) 
			(Dred_1 x x2 : mred (P_2 x x2) (B_2 x x2))
			(Dconv_22 x x2 : lang-convert (B_2 x x2) lang2 (BB_2 x x2)) 
			(Dconv'_2 x x2 : lang-convert B' lang2 (BB'_2 x x2)) 
			(Deqv_1 x x2 : reqv (R_1 x x2 (BB_2 x x2)) (R' x2 (BB'_2 x x2)) )
		)
	<- lang-indep2 neq-lang_01 neq-lang_21 P_2 ([x][x2] DeqP x x2 : eq-term (P_2 x x2) P)
	<- ({l}{x2} lang-indep neq-lang_02 ([x] R_1 x x2 l) ([x] DeqR x x2 l : eq-term (R_1 x x2 l) (R x2 l)))
	<- ({x}{x2}{s} split2-resp (Dspl_1 x x2 s) eq-term_ (DeqP x x2) (DeqR x x2) (Dspl x x2 s : split2 (M x) P (R x2)))
	<- lang-indep2 neq-lang_01 neq-lang_21 B_2 ([x][x2] DeqB x x2 : eq-term (B_2 x x2) B)
	<- ({x}{x2} mred-resp (Dred_1 x x2) (DeqP x x2) (DeqB x x2) (Dred x x2))
	<- conv-2strengthen_12 Dconv'_2 ([x][x2] DeqBB' x x2 : eq-term (BB'_2 x x2) BB')
	<- ({x}{x2} conv-resp (Dconv'_2 x x2) eq-term_ (DeqBB' x x2) (Dconv' x x2 : lang-convert B' lang2 BB'))
	<- ({x}{x2} conv-resp (Dconv_22 x x2) (DeqB x x2) eq-term_ (Dconv_2 x x2 : lang-convert B lang2 (BB_2 x x2)))
	<- conv-2strengthen_12 Dconv_2 ([x][x2] DeqBB x x2 : eq-term (BB_2 x x2) BB)
	<- ({x}{x2} conv-resp (Dconv_2 x x2) eq-term_ (DeqBB x x2) (Dconv x x2 : lang-convert B lang2 BB))
	<- ({x}{x2} eq-cong-hole (DeqR x x2) (DeqBB x x2) (DeqRB x x2 : eq-term (R_1 x x2 (BB_2 x x2)) (R x2 BB)))
	<- ({x}{x2} eq-cong (R' x2) (DeqBB' x x2) (DeqRB' x x2 : eq-term (R' x2 (BB'_2 x x2)) (R' x2 BB')))
	<- ({x}{x2} reqv-resp (Deqv_1 x x2) (DeqRB x x2) (DeqRB' x x2) (Deqv x x2))
.

sc2/branch2 : 
	({f} of^ f (arr T1 T2) wor2 -> {x} of^ x T1 wor2 -> of^ (M f x) T2 wor2) ->
	({f} form^ f vars2 wor2 -> {x} form^ x vars2 wor2 -> form^ (M f x) comp1 wor2) ->
	({f}{f2} splitvar2 f f2 -> {x}{x2} splitvar2 x x2 -> split2 (M' f x) P' (R' f2 x2)) -> 
	mred P' B' -> 
	({f}{x} mstep wor2 (M f x) (M' f x)) ->
	({f}{f2} splitvar2 f f2 -> {x}{x2} splitvar2 x x2 -> split2 (M f x) P (R f2 x2)) -> 
	mred P B -> 
	lang-convert B  lang2 (BB  : term lang2) -> 
	lang-convert B' lang2 (BB' : term lang2) -> 
	({f2}{x2} reqv (R f2 x2 BB) (R' f2 x2 BB')) -> type.
%mode sc2/branch2 +Dof +Dcomp +Dspl' +Dred' +Dstep -Dspl -Dred -Dconv -Dconv' -Deqv.
- : sc2/branch2 Dof Dcomp 
		(Dspl' : {f}{f2} splitvar2 f f2 -> {x}{x2} splitvar2 x x2 -> split2 (M' f x) P' (R' f2 x2)) 
		(Dred' : mred P' B')
		Dstep Dspl (Dred ztup ztup ztup ztup) (Dconv ztup ztup ztup ztup) (Dconv' ztup ztup ztup ztup) (Deqv ztup ztup)
	<- ({f}{f2}{off}{vf}{splf} splvar2-total off vf splf ->
		{x}{x2}{ofx}{vx}{splx} splvar2-total ofx vx splx ->
		sc2 (Dof f off x ofx) (Dcomp f vf x vx) (Dspl' f f2 splf x x2 splx) Dred' (Dstep f x)
			(Dspl_1 f f2 splf x x2 splx : split2 (M f x) (P_2 f f2 x x2) (R_1 f f2 x x2)) 
			(Dred_1 f f2 x x2 : mred (P_2 f f2 x x2) (B_2 f f2 x x2))
			(Dconv_22 f f2 x x2 : lang-convert (B_2 f f2 x x2) lang2 (BB_2 f f2 x x2)) 
			(Dconv'_2 f f2 x x2 : lang-convert B' lang2 (BB'_2 f f2 x x2)) 
			(Deqv_1 f f2 x x2 : reqv (R_1 f f2 x x2 (BB_2 f f2 x x2)) (R' f2 x2 (BB'_2 f f2 x x2)))
		)
	<- lang-indep4 neq-lang_01 neq-lang_21 neq-lang_01 neq-lang_21 P_2 DeqP
	<- ({l}{f2}{x2} lang-indep2 neq-lang_02 neq-lang_02 ([f][x] R_1 f f2 x x2 l) ([f][x] DeqR f f2 x x2 l))
	<- ({f}{f2}{sf}{x}{x2}{sx} split2-resp (Dspl_1 f f2 sf x x2 sx) eq-term_ (DeqP f f2 x x2) (DeqR f f2 x x2) (Dspl f f2 sf x x2 sx))
	<- lang-indep4 neq-lang_01 neq-lang_21 neq-lang_01 neq-lang_21 B_2 DeqB
	<- ({f}{f2}{x}{x2} mred-resp (Dred_1 f f2 x x2) (DeqP f f2 x x2) (DeqB f f2 x x2) (Dred f f2 x x2))
	<- conv-2strengthen2_12 Dconv'_2 DeqBB'
	<- ({f}{f2}{x}{x2} conv-resp (Dconv'_2 f f2 x x2) eq-term_ (DeqBB' f f2 x x2) (Dconv' f f2 x x2))
	<- ({f}{f2}{x}{x2} conv-resp (Dconv_22 f f2 x x2) (DeqB f f2 x x2) eq-term_ (Dconv_2 f f2 x x2))
	<- conv-2strengthen2_12 Dconv_2 DeqBB
	<- ({f}{f2}{x}{x2} conv-resp (Dconv_2 f f2 x x2) eq-term_ (DeqBB f f2 x x2) (Dconv f f2 x x2))
	<- ({f}{f2}{x}{x2} eq-cong-hole (DeqR f f2 x x2) (DeqBB f f2 x x2) (DeqRB f f2 x x2))
	<- ({f}{f2}{x}{x2} eq-cong (R' f2 x2) (DeqBB' f f2 x x2) (DeqRB' f f2 x x2))
	<- ({f}{f2}{x}{x2} reqv-resp (Deqv_1 f f2 x x2) (DeqRB f f2 x x2) (DeqRB' f f2 x x2) (Deqv f x f2 x2))
.



%% STAGE TWO SUBSTEPS
- : sc2 (of^-tup Dof _) (form^tup-c Dcomp _) (spl2-tup DsplA' DsplB) (mred-tup DredA' DredB) (ms-tup-s1 Dstep) 
		(spl2-tup DsplA DsplB) (mred-tup DredA DredB) 
		(conv-tup DconvA DconvB) (conv-tup DconvA' DconvB)
		(reqv-lett-p (reqv-tup-s Deqv reqv-id))
	<- sc2 Dof Dcomp DsplA' DredA' Dstep DsplA DredA DconvA DconvA' Deqv
	<- lang-convert_12-total _ DconvB.
- : sc2 (of^-tup _ Dof) (form^tup-c _ Dcomp) (spl2-tup DsplA DsplB') (mred-tup DredA DredB') (ms-tup-s2 Dstep) 
		(spl2-tup DsplA DsplB) (mred-tup DredA DredB) 
		(conv-tup DconvA DconvB) (conv-tup DconvA DconvB')
		(reqv-lett-p (reqv-tup-s reqv-id Deqv))
	<- sc2 Dof Dcomp DsplB' DredB' Dstep DsplB DredB DconvB DconvB' Deqv
	<- lang-convert_12-total _ DconvA.
- : sc2 (of^-pi1 Dof) (form^pi1-c Dcomp) (spl2-pi1 Dspl') Dred' (ms-pi1-s Dstep) 
		(spl2-pi1 Dspl) Dred Dconv Dconv' (reqv-pi1-s Deqv)
	<- sc2 Dof Dcomp Dspl' Dred' Dstep Dspl Dred Dconv Dconv' Deqv.
- : sc2 (of^-pi2 Dof) (form^pi2-c Dcomp) (spl2-pi2 Dspl') Dred' (ms-pi2-s Dstep) 
		(spl2-pi2 Dspl) Dred Dconv Dconv' (reqv-pi2-s Deqv)
	<- sc2 Dof Dcomp Dspl' Dred' Dstep Dspl Dred Dconv Dconv' Deqv.
- : sc2 (of^-inj1 _ Dof) (form^inj1-c Dcomp) (spl2-inj1 Dspl') Dred' (ms-inj1-s Dstep) 
		(spl2-inj1 Dspl) Dred Dconv Dconv' (reqv-inj1-s Deqv)
	<- sc2 Dof Dcomp Dspl' Dred' Dstep Dspl Dred Dconv Dconv' Deqv.
- : sc2 (of^-inj2 _ Dof) (form^inj2-c Dcomp) (spl2-inj2 Dspl') Dred' (ms-inj2-s Dstep) 
		(spl2-inj2 Dspl) Dred Dconv Dconv' (reqv-inj2-s Deqv)
	<- sc2 Dof Dcomp Dspl' Dred' Dstep Dspl Dred Dconv Dconv' Deqv.
- : sc2 (of^-roll _ Dof) (form^roll-c Dcomp) (spl2-roll Dspl') Dred' (ms-roll-s Dstep) 
		(spl2-roll Dspl) Dred Dconv Dconv' (reqv-roll-s Deqv)
	<- sc2 Dof Dcomp Dspl' Dred' Dstep Dspl Dred Dconv Dconv' Deqv.
- : sc2 (of^-unrl Dof) (form^unrl-c Dcomp) (spl2-unrl Dspl') Dred' (ms-unrl-s Dstep) 
		(spl2-unrl Dspl) Dred Dconv Dconv' (reqv-unrl-s Deqv)
	<- sc2 Dof Dcomp Dspl' Dred' Dstep Dspl Dred Dconv Dconv' Deqv.
- : sc2 (of^-case DofE _ _ _) (form^case-c2 DcompE _ _) (spl2-case DsplE' DsplM DsplN) (mred-tup DredE' DredMN) (ms-case-s1 Dstep)
		(spl2-case DsplE DsplM DsplN) (mred-tup DredE DredMN) 
		(conv-tup DconvE (conv-tup DconvM DconvN)) (conv-tup DconvE' (conv-tup DconvM DconvN))
		(reqv-lett-p (reqv-lett-p (reqv-case-s Deqv ([x] reqv-id) ([x] reqv-id))))
	<- sc2 DofE DcompE DsplE' DredE' Dstep DsplE DredE DconvE DconvE' Deqv
	<- lang-convert_12-total _ DconvM
	<- lang-convert_12-total _ DconvN.
- : sc2 (of^-case _ DofM _ _) (form^case-c2 _ DcompM _) 
		(spl2-case DsplE DsplM' DsplN) (mred-tup DredE (mred-tup DredM' DredN)) (ms-case-s2 Dstep)
		(spl2-case DsplE DsplM  DsplN) (mred-tup DredE (mred-tup DredM  DredN)) 
		(conv-tup DconvE (conv-tup DconvM DconvN)) (conv-tup DconvE (conv-tup DconvM' DconvN))
		(reqv-lett-p (reqv-lett-p (reqv-case-s reqv-id DeqvM ([x] reqv-id))))
	<- sc2/branch DofM DcompM DsplM' DredM' Dstep DsplM DredM DconvM DconvM' DeqvM
	<- lang-convert_12-total _ DconvE
	<- lang-convert_12-total _ DconvN.
- : sc2 (of^-case _ _ DofN _) (form^case-c2 _ _ DcompN) 
		(spl2-case DsplE DsplM DsplN') (mred-tup DredE (mred-tup DredM DredN')) (ms-case-s3 Dstep)
		(spl2-case DsplE DsplM DsplN ) (mred-tup DredE (mred-tup DredM DredN )) 
		(conv-tup DconvE (conv-tup DconvM DconvN)) (conv-tup DconvE (conv-tup DconvM DconvN'))
		(reqv-lett-p (reqv-lett-p (reqv-case-s reqv-id ([x] reqv-id) DeqvN)))
	<- sc2/branch DofN DcompN DsplN' DredN' Dstep DsplN DredN DconvN DconvN' DeqvN
	<- lang-convert_12-total _ DconvE
	<- lang-convert_12-total _ DconvM.
- : sc2 (of^-lam _ DofM) (form^lam2c Dcomp) 
		(spl2-lam DsplM') Dred'
		(ms-lam-s Dstep) 
		(spl2-lam DsplM) Dred
		Dconv Dconv' (reqv-exvlam-s Deqv)
	<- sc2/branch2 DofM Dcomp DsplM' Dred' Dstep DsplM Dred Dconv Dconv' Deqv.
- : sc2 (of^-app Dof _) (form^app-c Dcomp _) (spl2-app DsplA' DsplB) (mred-tup DredA' DredB) (ms-app-s1 Dstep) 
		(spl2-app DsplA DsplB) (mred-tup DredA DredB) 
		(conv-tup DconvA DconvB) (conv-tup DconvA' DconvB)
		(reqv-lett-p (reqv-app-s Deqv reqv-id))
	<- sc2 Dof Dcomp DsplA' DredA' Dstep DsplA DredA DconvA DconvA' Deqv
	<- lang-convert_12-total _ DconvB.
- : sc2 (of^-app _ Dof) (form^app-c _ Dcomp) (spl2-app DsplA DsplB') (mred-tup DredA DredB') (ms-app-s2 Dstep) 
		(spl2-app DsplA DsplB) (mred-tup DredA DredB) 
		(conv-tup DconvA DconvB) (conv-tup DconvA DconvB')
		(reqv-lett-p (reqv-app-s reqv-id Deqv))
	<- sc2 Dof Dcomp DsplB' DredB' Dstep DsplB DredB DconvB DconvB' Deqv
	<- lang-convert_12-total _ DconvA.
- : sc2 (of^-let DofE DofM) (form^let-c DcompE _) (spl2-let DsplE' DsplM) (mred-tup DredE' DredM) (ms-let-s1 Dstep) 
		(spl2-let DsplE DsplM) (mred-tup DredE DredM) 
		(conv-tup DconvE DconvM) (conv-tup DconvE' DconvM)
		(reqv-lett-p (reqv-let-s Deqv ([x] reqv-id)))
	<- sc2 DofE DcompE DsplE' DredE' Dstep DsplE DredE DconvE DconvE' Deqv
	<- lang-convert_12-total _ DconvM.
- : sc2 (of^-let DofE DofM) (form^let-c _ DcompM) 
		(spl2-let (DsplE) DsplM') (mred-tup DredE DredM') 
		(ms-let-s2 Dstep) 
		(spl2-let DsplE DsplM) (mred-tup DredE DredM) 
		(conv-tup DconvE DconvM) (conv-tup DconvE DconvM') 
		(reqv-lett-p (reqv-let-s reqv-id DeqvM))
	<- sc2/branch DofM DcompM DsplM' DredM' Dstep DsplM DredM DconvM DconvM' DeqvM
	<- lang-convert_12-total _ (DconvE : lang-convert B1 lang2 BB1).
- : sc2 (of^-prev Dof) (form^prev Dcomp) (spl2-prev Dspl') (mred-pi2 Dred') (ms-prev-s Dstep) 
		(spl2-prev Dspl) (mred-pi2 Dred) Dconv Dconv' Deqv
	<- sc1 Dof Dcomp Dspl' Dred' Dstep Dspl Dred Dconv Dconv' Deqv.
- : sc2 (of^-prev (Dof : of^ E (fut A) wor1)) (form^prev Dcomp)
		(spl2-let (spl2-exv Dsplr) ([x][x2][s] spl2-prev (Dspl' x x2 s : split1 (E' x) C' (R' x2))))
		(Dred : mred (tup (exv ztup) (pi2 C')) (tup I B))
		(ms-prev-ls Dstep : mstep wor2 (prev E) (let (exv Q) ([x] prev (E' x))))
		(spl2-prev Dspl) 
		Dred'
		Dconv (conv-tup DconvI Dconv)
		((Deqv BB) ;; reqv-sym (reqv-lett-r))
	<- spl1-total Dof Dcomp (Dspl : split1 E C R)
	<- lc Dspl Dsplr Dspl' Dstep (Deq : eq-term C C') (Deqv : {l} reqv (R l) (let Q' ([y] R' y l)))
	<- eq-term-sym Deq (Deq' : eq-term C' C)
	<- eq-cong ([x] tup (exv ztup) (pi2 x)) Deq' (Deq'' : eq-term (tup (exv ztup) (pi2 C')) (tup (exv ztup) (pi2 C)))
	<- mred-resp Dred Deq'' eq-term_ (mred-tup (DredI : mred (exv ztup) I) Dred')
	<- lang-convert_12-total B (Dconv : lang-convert B lang2 BB)
	<- mred-invert/exv DredI (DeqI : eq-term ztup I)
	<- conv-resp conv-ztup DeqI eq-term_ (DconvI : lang-convert I lang2 ztup).

%worlds (correctness-block) 
	(sc1         _ _ _ _ _ _ _ _ _ _) 
	(sc2/branch  _ _ _ _ _ _ _ _ _ _) 
	(sc2/branch2 _ _ _ _ _ _ _ _ _ _) 
	(sc2         _ _ _ _ _ _ _ _ _ _).
%total (D1 D2 D3 D4) 
	(sc1         _ _ _ _ D1 _ _ _ _ _) 
	(sc2         _ _ _ _ D2 _ _ _ _ _)
	(sc2/branch  _ _ _ _ D3 _ _ _ _ _) 
	(sc2/branch2 _ _ _ _ D4 _ _ _ _ _) .
