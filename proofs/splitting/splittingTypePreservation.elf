hb1\tysplit : hb1 (Dof : of^ E A wor1) T I -> tysplit I A A1 A2 -> type.
%mode hb1\tysplit +Dhb -Dtspl.
- : hb1\tysplit (Dhb : hb1 Dof _ _) Dtspl
	<- of^-wf Dof Dwf
	<- hb1-wf Dhb _ Dibk Dhk
	<- tysplit-tot Dwf Dibk Dhk Dtspl.


%% SPLITTING TYPE PRESERVATION
splpres1+ : hb1 (_ : of^ E A wor1) T I -> split1 E C R -> tysplit I A A1 A2 -> of C (prod A1 T) -> ({x} of x T -> of (R x) A2) -> type.
%mode splpres1+ +Dof +Dspl +Dtspl -Dof1 -Dof2.
splpres1- : hb1 (_ : of^ E A wor1) T I -> split1 E C R -> tysplit I A A1 A2 -> of C (prod A1 T) -> ({x} of x T -> of (R x) A2) -> type.
%mode splpres1- +Dof +Dspl -Dtspl -Dof1 -Dof2.
splpres2 : hb2 (_ : of^ E A wor2) T -> split2 E P R -> of P T -> ({x} of x T -> of (R x) A) -> type.
%mode splpres2 +Dof +Dspl -Dof1 -Dof2.

%{
- : splpres1+ (Dof : of+ E T A wor1) (Dspl : split wor1 E (pipe C R)) (Dtspl : tysplit A A1 A2) Dof1' Dof2'
	<- splpres1- Dof Dspl Dtspl' (Dof1 : of C (prod A1' T)) (Dof2 : {x} of x T -> of (R x) A2')
	<- tysplit-unique Dtspl' Dtspl (Deq1 : eq-ty A1' A1) (Deq2 : eq-ty A2' A2)
	<- eq-ty-cong prod Deq1 eq-ty_ (Deq1' : eq-ty (prod A1' T) (prod A1 T))
	<- of-resp Dof1 Deq1' (Dof1' : of C (prod A1 T))
	<- {x} {ofx} of-resp (Dof2 x ofx) Deq2 (Dof2' x ofx).}%

- : splpres1- (hb1-tup DofA DofB) (spl1-tup DsplA DsplB) (spl-prod DtsplA DtsplB) 
		(of-lett DofA1 ([_][y1][_][z1] (of-lett DofB1 ([_][y2][_][z2] of-exv (of-tup (of-tup y1 y2) (of-tup z1 z2))))))
		([l][ofl] of-lett (of-exv ofl) ([l1][ofl1][l2][ofl2] of-tup (DofA2 l1 ofl1) (DofB2 l2 ofl2)))
	<- splpres1- DofA DsplA DtsplA DofA1 DofA2
	<- splpres1- DofB DsplB DtsplB DofB1 DofB2.
- : splpres1- (hb1-pi1 Dhb) (spl1-pi1 Dspl) Dtspl1 
		(of-lett Dof1 ([_][y][_][z] of-tup (of-pi1 (of-exv y)) (of-exv z)))
		([l][ofl] of-pi1 (Dof2 l ofl))
	<- hb1\tysplit Dhb (spl-prod Dtspl1 Dtspl2)
	<- splpres1+ Dhb Dspl (spl-prod Dtspl1 Dtspl2) Dof1 Dof2.
- : splpres1- (hb1-pi2 Dhb) (spl1-pi2 Dspl) Dtspl2 
		(of-lett Dof1 ([_][y][_][z] of-tup (of-pi2 (of-exv y)) (of-exv z)))
		([l][ofl] of-pi2 (Dof2 l ofl))
	<- hb1\tysplit Dhb (spl-prod Dtspl1 Dtspl2)
	<- splpres1+ Dhb Dspl (spl-prod Dtspl1 Dtspl2) Dof1 Dof2. 
- : splpres1- (hb1-app DhbAB DhbA) (spl1-app Dspl1 Dspl2) DtsplB
		(of-lett DofAB1 ([_][y1][_][z1] 
			(of-lett DofA1 ([_][y2][_][z2] 
				(of-lett (of-app (of-exv y1) (of-exv y2)) ([_][y3][_][z3] 
					of-exv (of-tup y3 (of-tup (of-tup z1 z2) z3))))))))
		([l][ofl] 
			of-lett (of-exv ofl) ([_][ofl12][_][ofl3] 
				(of-lett (of-exv ofl12) ([l1][ofl1][l2][ofl2] 
					of-app (DofAB2 l1 ofl1) (of-tup (DofA2 l2 ofl2) (of-exv ofl3))))))
	<- hb1\tysplit DhbAB (spl-arr DtsplA DtsplB)
	<- splpres1+ DhbAB Dspl1 (spl-arr DtsplA DtsplB) DofAB1 DofAB2
	<- splpres1+ DhbA Dspl2 DtsplA DofA1 DofA2.
- : splpres1- (hb1-next Dhb) (spl1-next Dspl) spl-fut (of-tup (of-exv of-ztup) Dof1) Dof2
	<- splpres2 Dhb Dspl Dof1 Dof2.
%{
- : splpres1-
		(of+lam+ DwfA Dof) 
		(spl1-lam Dspl)
		(spl-arr _ DtsplA DtsplB) 
		(of-tup (of-lam DwfA1 Dof1') of-ztup)
		([_][_] of-lam (ty-wf-prod DwfA2 DwfT) ([xl] [ofxl] of-lett ofxl Dof2'))
	<- tysplit-tot-pres DwfA DtsplA DwfA1 DwfA2
	<- ({x : term} {ofx : of+ x unit A wor1} of+wf ofx ty-wf-unit DwfA -> of+wf (Dof x ofx) DwfT DwfB)
	<- tysplit-tot DwfB DtsplB
	<- ({x : term} {x1 : term} {x2 : term}
		{ofx : of+ x unit A wor1}
		of+wf ofx ty-wf-unit DwfA -> 
		{splx : split wor1 x (pipe (tup x1 ztup) ([l] x2))}
		{ofx1 : of x1 A1} 
		{ofx2 : of x2 A2} 
		splpres1- ofx splx DtsplA (of-tup ofx1 of-ztup) ([_][_] ofx2) -> 
		splpres1+ (Dof x ofx) (Dspl x x1 x2 splx) DtsplB (Dof1 x x1 x2 ofx1 ofx2) (Dof2 x x1 x2 ofx1 ofx2))
	<- ({x1}{ofx1:of x1 A1} 
			of-strengthen/of ([x2][ofx2] Dof1 ztup x1 x2 ofx1 ofx2) (Dof1' x1 ofx1))
	<- ({x2}{ofx2:of x2 A2}{l}{ofl} 
			of-strengthen/of ([x1][ofx1] Dof2 ztup x1 x2 ofx1 ofx2 l ofl) (Dof2' x2 ofx2 l ofl)).
}%
- : splpres2 (hb2-exv : hb2 (of^-exv Dof)) (spl2-exv Dsplr) (of-exv of-ztup) ([l][ofl] Dof')
	<- splrpres Dof Dsplr Dof'.
- : splpres2 (hb2-pi1 Dhb) (spl2-pi1 Dspl) Dof1 ([l][ofl] of-pi1 (Dof2 l ofl))
	<- splpres2 Dhb Dspl Dof1 Dof2.
- : splpres2 (hb2-pi2 Dhb) (spl2-pi2 Dspl) Dof1 ([l][ofl] of-pi2 (Dof2 l ofl))
	<- splpres2 Dhb Dspl Dof1 Dof2.
- : splpres2 (hb2-tup DhbA DhbB) (spl2-tup DsplA DsplB) 
		(of-tup DofA1 DofB1) 
		([l][ofl] of-lett (of-exv ofl) ([l1][ofl1][l2][ofl2] of-tup (DofA2 l1 ofl1) (DofB2 l2 ofl2)))
	<- splpres2 DhbA DsplA DofA1 DofA2
	<- splpres2 DhbB DsplB DofB1 DofB2.
- : splpres2 (hb2-app DhbA DhbB) (spl2-app DsplA DsplB) 
		(of-tup DofA1 DofB1)
		([l][ofl] of-lett (of-exv ofl) ([l1][ofl1][l2][ofl2] of-app (DofA2 l1 ofl1) (DofB2 l2 ofl2)))
	<- splpres2 DhbA DsplA DofA1 DofA2
	<- splpres2 DhbB DsplB DofB1 DofB2.
- : splpres2 (hb2-lam DhbM : hb2 (of^-lam Dwf _) _ ) (spl2-lam DsplM) Dof1' ([l] [ofl] of-exv (of-lam Dwf' (Dof2 l ofl)))
	<- wor2+mono Dwf Dwf'
	<- ({x} {ofx} {_ : of^-wf ofx Dwf} {x2} {xspl} {ofx2}
		splpres2 (DhbM x ofx) (DsplM x x2 xspl) (Dof1 x2 ofx2) ([l] [ofl] Dof2 l ofl x2 ofx2))
	<- of-strengthen/of Dof1 Dof1'.
- : splpres2 (hb2-let (DhbE : hb2 (DofE : of^ E A wor2) _) DhbM) (spl2-let DsplE DsplM) 
		(of-tup DofE1 DofM1') 
		([l][ofl] of-lett (of-exv ofl) ([l1][ofl1][l2][ofl2] of-let (DofE2 l1 ofl1) (DofM2 l2 ofl2)))
	<- splpres2 DhbE DsplE DofE1 DofE2
	<- of^-wf DofE Dwf
	<- wor2+mono Dwf Dwf'
	<- ({x} {ofx} {_ : of^-wf ofx Dwf} {x2} {xspl} {ofx2}
		splpres2 (DhbM x ofx) (DsplM x x2 xspl) (DofM1 x2 ofx2) ([l] [ofl] DofM2 l ofl x2 ofx2))
	<- of-strengthen/of DofM1 DofM1'.
- : splpres2 (hb2-prev Dhb) (spl2-prev Dspl) (of-pi2 Dof1) Dof2
	<- splpres1+ Dhb Dspl spl-fut Dof1 Dof2.


%block var1-block : 
	some {A : ty} {DwfA : ty^wf A wor1} {K : kind} {Dibk : ibk A K} {I : tyc} {Dhk : hk I K} 
		 {A1 : ty} {A2 : ty} {dtsplA : tysplit I A A1 A2}
	block {x : term lang0} {ofx : of^ x A wor1} {_: of^-wf ofx DwfA}
		{xb : hb-val ofx I} {_: hbv-wf xb Dibk Dhk}
		{x1 : term lang1} {x2 : term lang2}
		{ofx1 : of x1 A1} {ofx2 : of x2 A2}.

%block var2-block : 
	some {A : ty} {DwfA : ty^wf A wor2}
	block {x : term lang0} {ofx : of^ x A wor2} {_: of^-wf ofx DwfA}
		{x2 : term lang2} {splx : splitvar2 x x2} {ofx2 : of x2 A}.

%worlds (var1-block | var2-block) (hb1\tysplit _ _).
%total {} (hb1\tysplit _ _).

%worlds (var1-block | var2-block) (splpres1+ _ _ _ _ _) (splpres1- _ _ _ _ _) (splpres2 _ _ _ _).
%total (D1 D2 D3) 
	(splpres2 D3 _ _ _)
	(splpres1- D1 _ _ _ _) 
	(splpres1+ D2 _ _ _ _) .