%{ splitting.elf }%




%% SPLITTING
split1 : term -> seperatedM -> type. %name split1 Dspl.
split2 : term -> seperatedS -> type. %name split2 Dspl.
%mode split1 +E -P.
%mode split2 +E -P.

appBoth : seperatedM -> (term -> term) -> seperatedM -> type.
%mode appBoth +P +F -P'.
appBoth-p : appBoth (pipeM C R) F (pipeM (lett C ([y] [z] tup (F y) z)) ([l] F (R l))).
appBoth-t : appBoth (trivM I Q) F (trivM (F I) (F Q)).

appBoth2 : seperatedM -> seperatedM -> seperatedM -> type.
%mode appBoth2 +P1 +P2 -P'.
appBoth2-pp : appBoth2 (pipeM C1 R1) (pipeM C2 R2)
				(pipeM 
					(lett C1 ([y1] [z1] lett C2 ([y2] [z2] tup (tup y1 y2) (tup z1 z2)))) 
					([l] lett l ([l1] [l2] tup (R1 l1) (R2 l2)))
				).
appBoth2-pt : appBoth2 (pipeM C1 R1) (trivM I2 Q2)
				(pipeM (lett C1 ([y1] [z1] tup y1 (tup z1 I2))) ([l] tup (R1 l) Q2)).
appBoth2-tp : appBoth2 (trivM I1 Q1) (pipeM C2 R2)
				(pipeM (lett C2 ([y2] [z2] tup y2 (tup I1 z2))) ([l] tup Q1 (R2 l))).
appBoth2-tt : appBoth2 (trivM I1 Q1) (trivM I2 Q2) (trivM (tup I1 I2) (tup Q1 Q2)).

spl1-ztup	: split1 ztup (trivM ztup ztup).
spl1-tup	: split1 (tup E1 E2) S'
			<- split1 E2 S2
			<- split1 E1 S1
			<- appBoth2 S1 S2 S'.
spl1-pi1	: split1 (pi1 E) S'
			<- split1 E S
			<- appBoth S pi1 S'.
spl1-pi2	: split1 (pi2 E) S'
			<- split1 E S
			<- appBoth S pi2 S'.
spl1-lam-t	: split1 (lam _ M) (trivM (lam unit ([x] tup (I x) ztup)) (lam unit ([xl] lett xl ([_] Q))))
			<- {x : term} split1 x (trivM x x) -> split1 (M x) (trivM (I x) (Q x)).
spl1-lam-p	: split1 (lam _ M) (trivM (lam unit C) (lam unit ([xl] lett xl R)))
			<- {x : term} split1 x (trivM x x) -> split1 (M x) (pipeM (C x) ([l:term] R x l)). 
spl1-app-tt	: split1 (app E1 E2) (pipeM (app I1 I2) ([l] app Q1 (tup Q2 l)))
			<- split1 E2 (trivM I2 Q2)
			<- split1 E1 (trivM I1 Q1).
spl1-app-tp	: split1 (app E1 E2) 
				(pipeM
					(lett C2 ([y2] [z2] lett (app I1 y2) ([y3] [z3] tup y3 (tup z2 z3))))
					([l] lett l ([l2] [l3] app Q1 (tup (R2 l2) l3)))
				)
			<- split1 E2 (pipeM C2 R2)
			<- split1 E1 (trivM I1 Q1).
spl1-app-pt	: split1 (app E1 E2) 
				(pipeM
					(lett C1 ([y1] [z1] lett (app y1 I2) ([y3] [z3] tup (y3) (tup z1 z3))))
					([l] lett l ([l1] [l3] app (R1 l1) (tup Q2 l3)))
				)
			<- split1 E2 (trivM I2 Q2)
			<- split1 E1 (pipeM C1 R1).
spl1-app-pp	: split1 (app E1 E2) 
				(pipeM
					(lett C1 ([y1] [z1] lett C2 ([y2] [z2] lett (app y1 y2) ([y3] [z3] tup (y3) (tup (tup z1 z2) z3)))))
					([l] lett l ([l12] [l3] lett l12 ([l1] [l2] app (R1 l1) (tup (R2 l2) l3))))
				)
			<- split1 E2 (pipeM C2 R2)
			<- split1 E1 (pipeM C1 R1).
spl1-next-p	: split1 (next E) (pipeM (tup ztup P) R)
			<- split2 E (pipeS P R).
spl1-next-t	: split1 (next E) (trivM ztup Q)
			<- split2 E (trivS Q). 
%{split1-letn : split1 (letn E M) 
				(lett C1 ([_] [z1] lett C2 ([y] [z2] tup y (tup z1 z2)))) 
				([l] lett l ([l1] [l2] let (R1 l1) ([x] R2 x l2)))
			<- split1 E C1 R1
			<- {x : term} split2 x ztup ([_] x) -> split1 (M x) C2 ([l] R2 x l).}%

appRes : seperatedS -> (term -> term) -> seperatedS -> type.
%mode appRes +P +F -P'.
appRes-p : appRes (pipeS P R) F (pipeS P ([l] F (R l))).
appRes-t : appRes (trivS Q) F (trivS (F Q)).

appRes2 : seperatedS -> seperatedS -> (term -> term -> term) -> seperatedS -> type.
%mode appRes2 +P1 +P2 +F -P'.
appRes2-pp : appRes2 (pipeS P1 R1) (pipeS P2 R2) F (pipeS (tup P1 P2) ([l] lett l ([l1] [l2] F (R1 l1) (R2 l2)))).
appRes2-tp : appRes2 (trivS Q1) (pipeS P2 R2) F (pipeS P2 ([l] F Q1 (R2 l))).
appRes2-pt : appRes2 (pipeS P1 R1) (trivS Q2) F (pipeS P1 ([l] F (R1 l) Q2)).
appRes2-tt : appRes2 (trivS Q1) (trivS Q2) F (trivS (F Q1 Q2)).

spl2-ztup	: split2 ztup (pipeS ztup ([_] ztup)). 
spl2-tup	: split2 (tup E1 E2) S'
			<- split2 E2 S2
			<- split2 E1 S1
			<- appRes2 S1 S2 tup S'.
spl2-pi1	: split2 (pi1 E) P'
			<- split2 E P
			<- appRes P pi1 P'.
spl2-pi2	: split2 (pi2 E) P'
			<- split2 E P
			<- appRes P pi2 P'.
spl2-lam-t	: split2 (lam _ M) (trivS (lam unit ([x] Q x)))
			<- {x : term} split2 x (trivS x) -> split2 (M x) (trivS (Q x)).
spl2-lam-p	: split2 (lam _ M) (pipeS P ([l] lam unit ([x] R x l)))
			<- {x : term} split2 x (trivS x) -> split2 (M x) (pipeS P ([l] R x l)).
spl2-app	: split2 (app E1 E2) S'
			<- split2 E2 S2
			<- split2 E1 S1
			<- appRes2 S1 S2 app S'.
spl2-prev-p	: split2 (prev E) (pipeS (pi2 C) R)
			<- split1 E (pipeM C R).
spl2-prev-t	: split2 (prev E) (trivS Q)
			<- split1 E (trivM I Q).

%{spl1-let	: split1 (let E M) 
				(pipeM
					(lett C1 ([x] [z1] lett (C2 x) ([y] [z2] tup y (tup z1 z2)))) 
					([l] lett l ([l1] [l2] let (R1 l1) ([x] R2 x l2)))
				)
			<- ({x : term} split1 x (pipeM x ([_] x)) -> split1 (M x) (pipeM (C2 x) ([l] R2 x l)))
			<- split1 E (pipeM C1 R1).}%
%{spl2-let	: split2 (let E M) (pipeS (tup P1 P2) ([l] lett l ([l1] [l2] let (R1 l1) ([x] R2 x l2))))
			<- ({x : term} split2 x (pipeS ztup ([_] x)) -> split2 (M x) (pipeS P2 ([l] R2 x l)))
			<- split2 E (pipeS P1 R1).}%
