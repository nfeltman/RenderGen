%{ splitting.elf }%


%% SPLITTING GROUND VALUES AND TERMS
splitGv : term lang0 -> term lang1 -> type. %name splitGv Dsplgv.
%mode splitGv +E -E'.
splitG : term lang0 -> term lang1 -> type. %name splitG Dsplg.
%mode splitG +E -E'.
splgv-ztup : splitGv ztup ztup.
splgv-tup : splitGv (tup E1 E2) (tup E1' E2')
			<- splitGv E2 E2'
			<- splitGv E1 E1'.
splgv-lam : splitGv (lam M) (lam M')
			<- {x}{x1} splitGv x x1 -> splitG (M x) (M' x1).

splg-pi1 : splitG (pi1 E) (pi1 E')
			<- splitG E E'.
splg-pi2 : splitG (pi2 E) (pi2 E')
			<- splitG E E'.
splg-tup : splitG (tup E1 E2) (tup E1' E2')
			<- splitG E2 E2'
			<- splitG E1 E1'.
splg-app : splitG (app E1 E2) (app E1' E2')
			<- splitG E2 E2'
			<- splitG E1 E1'.
splg-exv : splitG (exv E) (exv E')
			<- splitGv E E'.

%% SPLITTING RESIDUALS
splitres : term lang0 -> term lang2 -> type. %name splitres Dsplr.
%mode splitres +Q -Q'.

splr-ztup : splitres ztup (exv ztup).
splr-pi1 : splitres (pi1 E) (pi1 E')
			<- splitres E E'.
splr-pi2 : splitres (pi2 E) (pi2 E')
			<- splitres E E'.
splr-tup : splitres (tup E1 E2) (tup E1' E2')
			<- splitres E2 E2'
			<- splitres E1 E1'.
splr-lam : splitres (lam M) (exv (lam M'))
			<- {x}{x2} splitres x (exv x2) -> splitres (M x) (M' x2).
splr-app : splitres (app E1 E2) (app E1' E2')
			<- splitres E2 E2'
			<- splitres E1 E1'.
splr-let : splitres (let E M) (let E' M')
			<- ({x}{x2} splitres x (exv x2) -> splitres (M x) (M' x2))
			<- splitres E E'.

%% SPLITTING RESIDUALS, VALUES, AND TERMS
splitval : term lang0 -> term lang1 -> term lang2 -> type. %name splitval Dsplv.
%mode splitval +E -I -Q.
split1 : term lang0 -> term lang1 -> (term lang2 -> term lang2) -> type. %name split1 Dspl.
%mode split1 +E -P -R.
split2 : term lang0 -> term lang1 -> (term lang2 -> term lang2) -> type. %name split2 Dspl.
%mode split2 +E -P -R.


splv-ztup 	: splitval ztup ztup (exv ztup).
splv-grnd	: splitval (grnd E) E' (exv ztup)
			<- splitGv E E'.
splv-next	: splitval (next E) ztup E'
			<- splitres E E'.
splv-tup 	: splitval (tup E1 E2) (tup I1 I2) (tup Q1 Q2)
			<- splitval E2 I2 Q2
			<- splitval E1 I1 Q1.
splv-lam	: splitval (lam M) (lam C) (exv (lam ([xl] lett (exv xl) R)))
			<- {x}{x1}{x2} splitval x x1 (exv x2) -> split1 (M x) (C x1) ([l] R x2 l). 


spl1-exv	: split1 (exv V) (exv (tup I ztup)) ([_] Q)
			<- splitval V I Q.
spl1-tup	: split1 (tup E1 E2) 
					(lett C1 ([y1] [z1] lett C2 ([y2] [z2] exv (tup (tup y1 y2) (tup z1 z2))))) 
					([l] lett (exv l) ([l1] [l2] tup (R1 l1) (R2 l2)))
			<- split1 E2 C2 R2
			<- split1 E1 C1 R1.
spl1-pi1	: split1 (pi1 E) (lett C ([y] [z] tup (pi1 (exv y)) (exv z))) ([l] pi1 (R l))
			<- split1 E C R.
spl1-pi2	: split1 (pi2 E) (lett C ([y] [z] tup (pi2 (exv y)) (exv z))) ([l] pi2 (R l))
			<- split1 E C R.
spl1-app	: split1 (app E1 E2) 
					(lett C1 ([y1] [z1] lett C2 ([y2] [z2] lett (app (exv y1) (exv y2)) ([y3] [z3] 
						exv (tup y3 (tup (tup z1 z2) z3))
					))))
					([l] lett (exv l) ([l12] [l3] lett (exv l12) ([l1] [l2] app (R1 l1) (tup (R2 l2) (exv l3)))))
			<- split1 E2 C2 R2
			<- split1 E1 C1 R1.
spl1-next	: split1 (next E) (tup (exv ztup) P) R
			<- split2 E P R.
spl1-grnd	: split1 (grnd E) (tup E' (exv ztup)) ([_] (exv ztup))
			<- splitG E E'.

spl2-exv	: split2 (exv Q) (exv ztup) ([_] Q')
				<- splitres Q Q'.
%{spl2-ztup	: split2 ztup (exv ztup) ([_] ztup).}%
spl2-tup	: split2 (tup E1 E2) (tup P1 P2) ([l] lett (exv l) ([l1] [l2] tup (R1 l1) (R2 l2)))
			<- split2 E2 P2 R2
			<- split2 E1 P1 R1.
spl2-pi1	: split2 (pi1 E) P ([l] pi1 (R l))
			<- split2 E P R.
spl2-pi2	: split2 (pi2 E) P ([l] pi2 (R l))
			<- split2 E P R.
spl2-lam	: split2 (lam M) P ([l] exv (lam ([x] R x l)))
			<- {x}{x2} splitres x (exv x2) -> split2 (M x) P ([l] R x2 l).
spl2-app	: split2 (app E1 E2) (tup P1 P2) ([l] lett (exv l) ([l1] [l2] app (R1 l1) (R2 l2)))
			<- split2 E2 P2 R2
			<- split2 E1 P1 R1.
spl2-prev 	: split2 (prev E) (pi2 C) R
			<- split1 E C R.

%{spl1-let	: split1 (let E M) 
				(pipe
					(lett C1 ([x] [z1] lett (C2 x) ([y] [z2] tup y (tup z1 z2)))) 
					([l] lett l ([l1] [l2] let (R1 l1) ([x] R2 x l2)))
				)
			<- ({x : term} split1 x (pipe x ([_] x)) -> split1 (M x) (pipe (C2 x) ([l] R2 x l)))
			<- split1 E (pipe C1 R1).}%
spl2-let	: split2 (let E M) (tup P1 P2) ([l] lett (exv l) ([l1][l2] let (R1 l1) ([x] R2 x l2)))
			<- ({x}{x2} splitres x (exv x2) -> split2 (M x) P2 ([l] R2 x2 l))
			<- split2 E P1 R1.


%block splitting-varG : block {x:term lang0}{x1:term lang1} {dsplg : splitGv x x1}.
%block splitting-var1 : block {x:term lang0}{x1:term lang1}{x2:term lang2} {dspl : splitval x x1 (exv x2)}.
%block splitting-var2 : block {x:term lang0}{x2:term lang2} {dspl : splitres x (exv x2)}.
%block splitting-block = (splitting-var1 | splitting-var2 | splitting-varG).

%worlds (splitting-block) (splitG _ _) (splitGv _ _).
%unique (splitG +E -1Q) (splitGv +E -1Q).
%worlds (splitting-block) (splitres _ _).
%unique splitres +E -1Q.
%worlds (splitting-block) (splitval _ _ _) (split1 _ _ _) (split2 _ _ _).
%unique (splitval +E -1I -1Q) (split1 +E -1P -1R) (split2 +E -1P -1R).


%block any-splitG   : some {E : term lang0} {Q : term lang1} block {dsplg : splitGv E Q}.
%block any-splitres : some {E : term lang0} {Q : term lang2} block {dsplr : splitres E Q}.
%block any-splitval : some {E : term lang0} {I : term lang1} {Q : term lang2} block {dsplr : splitval E I Q}.
%block any-split = (any-splitres | any-splitval | any-splitG).

%%block any-splitting : 	some {W : wor} {E : term} {P : term} {R : term -> term}	block {dspl : split W E (pipe P R)}.


%% SPLITRES RESPECTS IDENTITY
splitres-resp : splitres E Q -> eq-term E E' -> eq-term Q Q' -> splitres E' Q' -> type.
%mode splitres-resp +Dspl +Deq1 +Deq2 -Dspl'.
- : splitres-resp Dspl eq-term_ eq-term_ Dspl.
%worlds (term-block | any-split) (splitres-resp _ _ _ _).
%total (Deq) (splitres-resp _ Deq _ _).

splitG-resp : splitG E Q -> eq-term E E' -> eq-term Q Q' -> splitG E' Q' -> type.
%mode splitG-resp +Dspl +Deq1 +Deq2 -Dspl'.
- : splitG-resp Dspl eq-term_ eq-term_ Dspl.
%worlds (term-block | any-split) (splitG-resp _ _ _ _).
%total (Deq) (splitG-resp _ Deq _ _).

splitGv-resp : splitGv E Q -> eq-term E E' -> eq-term Q Q' -> splitGv E' Q' -> type.
%mode splitGv-resp +Dspl +Deq1 +Deq2 -Dspl'.
- : splitGv-resp Dspl eq-term_ eq-term_ Dspl.
%worlds (term-block | any-split) (splitGv-resp _ _ _ _).
%total (Deq) (splitGv-resp _ Deq _ _).

%% SPLITTING RESPECTS IDENTITY
split1-resp : split1 E P R -> eq-term E E' -> eq-term P P' -> ({l} eq-term (R l) (R' l)) -> split1 E' P' R' -> type.
%mode split1-resp +Dspl +Deq1 +Deq2 +Deq3 -Dspl'.
- : split1-resp Dspl eq-term_ eq-term_ ([l] eq-term_) Dspl.
%worlds (term-block | any-split) (split1-resp _ _ _ _ _).
%total (Deq) (split1-resp _ Deq _ _ _).

split2-resp : split2 E P R -> eq-term E E' -> eq-term P P' -> ({l} eq-term (R l) (R' l)) -> split2 E' P' R' -> type.
%mode split2-resp +Dspl +Deq1 +Deq2 +Deq3 -Dspl'.
- : split2-resp Dspl eq-term_ eq-term_ ([l] eq-term_) Dspl.
%worlds (term-block | any-split) (split2-resp _ _ _ _ _).
%total (Deq) (split2-resp _ Deq _ _ _).


%% SPLITTING IS UNIQUE
splitG-unique : splitG E Q -> splitG E Q' -> eq-term Q Q' -> type.
%mode splitG-unique +Dspl +Dspl' -DeqQ.
- : splitG-unique _ _ eq-term_. 
%worlds (splitting-block) (splitG-unique _ _ _).
%total (D) (splitG-unique D _ _).

splitGv-unique : splitGv E Q -> splitGv E Q' -> eq-term Q Q' -> type.
%mode splitGv-unique +Dspl +Dspl' -DeqQ.
- : splitGv-unique _ _ eq-term_. 
%worlds (splitting-block) (splitGv-unique _ _ _).
%total (D) (splitGv-unique D _ _).

splitres-unique : splitres E Q -> splitres E Q' -> eq-term Q Q' -> type.
%mode splitres-unique +Dspl +Dspl' -DeqQ.
- : splitres-unique _ _ eq-term_. 
%worlds (splitting-block) (splitres-unique _ _ _).
%total (D) (splitres-unique D _ _).

splitval-unique : splitval E I Q -> splitval E I' Q' -> eq-term I I' -> eq-term Q Q' -> type.
%mode splitval-unique +Dspl +Dspl' -DeqI -DeqQ.
- : splitval-unique _ _ eq-term_ eq-term_. 
%worlds (splitting-block) (splitval-unique _ _ _ _).
%total (D) (splitval-unique D _ _ _).

split1-unique : split1 E P R -> split1 E P' R' -> eq-term P P' -> ({x} eq-term (R x) (R' x)) -> type.
%mode split1-unique +Dspl +Dspl' -DeqP -DeqR.
- : split1-unique _ _ eq-term_ ([x] eq-term_). 
%worlds (splitting-block) (split1-unique _ _ _ _).
%total (D) (split1-unique D _ _ _).

split2-unique : split2 E P R -> split2 E P' R' -> eq-term P P' -> ({x} eq-term (R x) (R' x)) -> type.
%mode split2-unique +Dspl +Dspl' -DeqP -DeqR.
- : split2-unique _ _ eq-term_ ([x] eq-term_). 
%worlds (splitting-block) (split2-unique _ _ _ _).
%total (D) (split2-unique D _ _ _).