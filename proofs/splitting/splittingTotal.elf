
%% SOME STRENGTHENING LEMMAS

sep-1 : ({x : term} split W1 _ (pipe A _) -> split W2 _ (pipe (P x) _)) -> ({x} eq-term (P x) P') -> type.
%mode sep-1 +Dspl -Deq'.
- : sep-1 ([x][s : split _ _ (pipe A _)] Dspl x s) ([x] eq-term_).
- : sep-1 ([x][s] spl1-pi1 (Dspl x s)) Deq'
	<- sep-1 Dspl Deq
	<- {x} eq-cong/lett (Deq x) ``eq-term_ (Deq' x).
- : sep-1 ([x][s] spl1-pi2 (Dspl x s)) Deq'
	<- sep-1 Dspl Deq
	<- {x} eq-cong/lett (Deq x) ``eq-term_ (Deq' x).
- : sep-1 ([x][s] spl1-tup (DsplA x s) (DsplB x s)) Deq'
	<- sep-1 DsplA DeqA
	<- sep-1 DsplB DeqB
	<- ({x}{y}{z} eq-cong/0/2 lett (DeqB x) ``eq-term_ (Deq x y z))
	<- {x} eq-cong/lett (DeqA x) (Deq x) (Deq' x).
- : sep-1 ([x][dspl] spl1-app (DsplA x dspl) (DsplB x dspl)) Deq1'
	<- sep-1 DsplA DeqA
	<- sep-1 DsplB DeqB
	<- ({x}{y}{z} eq-cong/lett (DeqB x) ([_][_] eq-term_) (Deq1 x y z))
	<- ({x} eq-cong/lett (DeqA x) ([y][z] Deq1 x y z) (Deq1' x)).
- : sep-1 ([x][dspl] spl1-lam ([y][y1][y2][yspl] Dspl y y1 y2 yspl x dspl)) Deq1''
	<- ({y}{y1}{y2}{yspl} sep-1 (Dspl y y1 y2 yspl) ([x] Deq1 x y1))
	<- ({x} eq-cong/1 lam ([y1] Deq1 x y1) (Deq1' x))
	<- ({x} eq-cong2 tup (Deq1' x) eq-term_ (Deq1'' x)).
- : sep-1 ([x][dspl] spl1-next (Dspl x dspl)) Deq1'
	<- sep-1 Dspl Deq1
	<- ({x} eq-cong2 tup eq-term_ (Deq1 x) (Deq1' x)).
- : sep-1 ([x][dspl] spl2-tup (DsplA x dspl) (DsplB x dspl)) Deq1
	<- sep-1 DsplA DeqA1
	<- sep-1 DsplB DeqB1
	<- ({x} eq-cong2 tup (DeqA1 x) (DeqB1 x) (Deq1 x)).
- : sep-1 ([x][dspl] spl2-pi1 (Dspl x dspl)) Deq1
	<- sep-1 Dspl Deq1.
- : sep-1 ([x][dspl] spl2-pi2 (Dspl x dspl)) Deq1
	<- sep-1 Dspl Deq1.
- : sep-1 ([x][dspl] spl2-lam (Dspl x dspl)) Deq1
	<- {y}{yspl} sep-1 ([x][dspl] Dspl x dspl y yspl) Deq1.
- : sep-1 ([x][dspl] spl2-app (DsplA x dspl) (DsplB x dspl)) Deq1
	<- sep-1 DsplA DeqA1
	<- sep-1 DsplB DeqB1
	<- ({x} eq-cong2 tup (DeqA1 x) (DeqB1 x) (Deq1 x)).
- : sep-1 ([x][dspl] spl2-prev (Dspl x dspl)) Deq1'
	<- sep-1 Dspl Deq1
	<- ({x} eq-cong pi2 (Deq1 x) (Deq1' x)).
- : sep-1 ([x][dspl] spl2-let _ (DsplM x dspl)) Deq1
	<- {y}{yspl} sep-1 ([x][dspl] DsplM x dspl y yspl) Deq1.
%worlds (splitting-block | term-block) (sep-1 _ _).
%total (D) (sep-1 D _).

eq\splres : ({x:term} split W1 _ (pipe _ A) -> splitres _ (Q x)) -> ({x} eq-term (Q x) Q') -> type.
%mode eq\splres +Dspl -Deq.
sep-2 : ({x : term} split W1 _ (pipe _ A) -> split W2 _ (pipe _ ([l] R x l))) -> ({l:term}{x} eq-term (R x l) (R' l)) -> type.
%mode sep-2 +Dspl -Deq.

- : eq\splres ([x] E) `eq-term_.
- : eq\splres ([x][s] splr-simple (Dspl x s)) (Deq ztup)
	<- sep-2 Dspl Deq.
- : eq\splres ([x][s] splr-pi1 (E x s)) Deq'
	<- eq\splres E Deq
	<- {x} eq-cong pi1 (Deq x) (Deq' x).
- : eq\splres ([x][s] splr-pi2 (E x s)) Deq'
	<- eq\splres E Deq
	<- {x} eq-cong pi2 (Deq x) (Deq' x).
- : eq\splres ([x][s] splr-tup (E1 x s) (E2 x s)) Deq'
	<- eq\splres E1 Deq1
	<- eq\splres E2 Deq2
	<- ({x} eq-cong2 tup (Deq1 x) (Deq2 x) (Deq' x)).
- : eq\splres ([x][xs] splr-lam ([y][ys] DsplrM y ys x xs)) Deq'
	<- ({y}{s} eq\splres (DsplrM y s) ([x] Deq x y))
	<- ({x:term} eq-cong/lam (Deq x) (Deq' x)).
- : eq\splres ([x][s] splr-app (E1 x s) (E2 x s)) Deq'
	<- eq\splres E1 Deq1
	<- eq\splres E2 Deq2
	<- ({x} eq-cong2 app (Deq1 x) (Deq2 x) (Deq' x)).
- : eq\splres ([x][xs] splr-let (DsplrE x xs) ([y][ys] DsplrM y ys x xs)) Deq'
	<- eq\splres DsplrE DeqE
	<- ({y}{s} eq\splres (DsplrM y s) ([x] DeqM x y))
	<- ({x:term} eq-cong/let (DeqE x) (DeqM x) (Deq' x)).


- : sep-2 ([x][s : split _ _ (pipe _ A)] Dspl x s) ([x][l:term] eq-term_).
- : sep-2 ([x][dspl] spl1-pi1 (Dspl x dspl)) Deq2'
	<- sep-2 Dspl Deq2
	<- ({l}{x} eq-cong pi1 (Deq2 l x) (Deq2' l x)).
- : sep-2 ([x][dspl] spl1-pi2 (Dspl x dspl)) Deq2'
	<- sep-2 Dspl Deq2
	<- ({l}{x} eq-cong pi2 (Deq2 l x) (Deq2' l x)).
- : sep-2 ([x][dspl] spl1-tup (DsplA x dspl) (DsplB x dspl)) Deq2'
	<- sep-2 DsplA DeqA2
	<- sep-2 DsplB DeqB2
	<- ({l1}{l2}{x} eq-cong2 tup (DeqA2 l1 x) (DeqB2 l2 x) (Deq2 l1 l2 x))
	<- ({l}{x} eq-cong/lett eq-term_ ([l1][l2] Deq2 l1 l2 x) (Deq2' l x)).
- : sep-2 ([x][dspl] spl1-app (DsplA x dspl) (DsplB x dspl)) Deq2''
	<- sep-2 DsplA DeqA2
	<- sep-2 DsplB DeqB2
	<- ({l1}{l2}{l3}{x} eq-cong2 ([a][b] app a (tup b l3)) (DeqA2 l1 x) (DeqB2 l2 x) (Deq2 l1 l2 l3 x))
	<- ({l12}{l3}{x} eq-cong/lett eq-term_ ([l1][l2] Deq2 l1 l2 l3 x) (Deq2' l12 l3 x))
	<- ({l}{x} eq-cong/lett eq-term_ ([l12][l3] Deq2' l12 l3 x) (Deq2'' l x)).
- : sep-2 ([x][dspl] spl1-lam ([y][y1][y2][yspl] Dspl y y1 y2 yspl x dspl))  ([_] Deq2'')
	<- ({y}{y1}{y2}{yspl} sep-2 (Dspl y y1 y2 yspl) ([l][x] Deq2 x y2 l))
	<- ({xl}{x} eq-cong/lett eq-term_ (Deq2 x) (Deq2' x xl))
	<- ({x} eq-cong/1 lam (Deq2' x) (Deq2'' x)).
- : sep-2 ([x][dspl] spl1-next (Dspl x dspl)) Deq2
	<- sep-2 Dspl Deq2.
- : sep-2 ([x][dspl] spl2-tup (DsplA x dspl) (DsplB x dspl)) Deq2'
	<- sep-2 DsplA DeqA2
	<- sep-2 DsplB DeqB2
	<- ({l1}{l2}{x} eq-cong2 tup (DeqA2 l1 x) (DeqB2 l2 x) (Deq2 l1 l2 x))
	<- ({l}{x} eq-cong/lett eq-term_ ([l1][l2] Deq2 l1 l2 x) (Deq2' l x)).
- : sep-2 ([x][dspl] spl2-pi1 (Dspl x dspl)) Deq2'
	<- sep-2 Dspl Deq2
	<- ({l}{x} eq-cong pi1 (Deq2 l x) (Deq2' l x)).
- : sep-2 ([x][dspl] spl2-pi2 (Dspl x dspl)) Deq2'
	<- sep-2 Dspl Deq2
	<- ({l}{x} eq-cong pi2 (Deq2 l x) (Deq2' l x)).
- : sep-2 ([x][dspl] spl2-lam (Dspl x dspl)) Deq2'
	<- ({y}{yspl} sep-2 ([x][dspl] Dspl x dspl y yspl) ([l][x] Deq2 x l y))
	<- ({l}{x} eq-cong/1 lam (Deq2 x l) (Deq2' l x)).
- : sep-2 ([x][dspl] spl2-app (DsplA x dspl) (DsplB x dspl)) Deq2'
	<- sep-2 DsplA DeqA2
	<- sep-2 DsplB DeqB2
	<- ({l1}{l2}{x} eq-cong2 app (DeqA2 l1 x) (DeqB2 l2 x) (Deq2 l1 l2 x))
	<- ({l}{x} eq-cong/lett eq-term_ ([l1][l2] Deq2 l1 l2 x) (Deq2' l x)).
- : sep-2 ([x][dspl] spl2-prev (Dspl x dspl)) Deq2
	<- sep-2 Dspl Deq2.
- : sep-2 ([x][dspl] spl2-let (DsplE x dspl) (DsplM x dspl)) Deq2'
	<- sep-2 DsplE DeqE
	<- ({y}{yspl} sep-2 ([x][dspl] DsplM x dspl y yspl) ([l][x] Deq2 l x y))
	<- ({l}{x} eq-cong/let (DeqE l x) (Deq2 l x) (Deq2' l x)).
- : sep-2 ([x][s] spl2-exv (Dsplr x s)) ([l] Deq)
	<- eq\splres Dsplr Deq.
%worlds (splitting-block | term-block) (sep-2 _ _) (eq\splres _ _).
%total (D1 D2) (sep-2 D1 _) (eq\splres D2 _).


%% SPLITTING RESPECTS IDENTITY
split-resp : split W E (pipe P R) -> eq-term P P' -> ({l} eq-term (R l) (R' l)) -> split W E (pipe P' R') -> type.
%mode split-resp +Dspl +Deq1 +Deq2 -Dspl'.
- : split-resp Dspl eq-term_ ([l] eq-term_) Dspl.
%worlds (any-splitting | term-block) (split-resp _ _ _ _).
%total (Deq) (split-resp _ Deq _ _).


%% SOME SORT OF SEPERATION PROPERTY
separation : ({x : term}{x1 : term}{x2 : term}
				split W1 x (pipe (VC x1) (VR x2)) -> split W2 (E x) (pipe (C x x1 x2) ([l] R l x x1 x2))) 
			-> ({x : term}{x1 : term}{x2 : term} 
				split W1 x (pipe (VC x1) (VR x2)) -> split W2 (E x) (pipe (C' x1) ([l] R' l x2))) 
			-> type.
%mode separation +Dspl -Dspl'.
- : separation Dspl Dspl''
	<- ({x1}{x2} sep-1 ([x][sx] Dspl x x1 x2 sx) ([x] Deq1 x x1 x2 : eq-term (C x x1 x2) (C' x1 x2)))
	<- ({x1}{x2} sep-2 ([x][sx] Dspl x x1 x2 sx) ([l][x] Deq2 l x x1 x2 : eq-term (R l x x1 x2) (R' l x1 x2)))
	<- ({x}{x1}{x2}{dspl} split-resp (Dspl x x1 x2 dspl) (Deq1 x x1 x2) ([l] Deq2 l x x1 x2) (Dspl' x x1 x2 dspl))
	<- ({x}{x1} sep-1 ([x2][sx] Dspl' x x1 x2 sx) ([x2] Deq1' x x1 x2 : eq-term (C' x1 x2) (C'' x1)))
	<- ({x}{x2} sep-2 ([x1][sx] Dspl' x x1 x2 sx) ([l][x1] Deq2' l x x1 x2 : eq-term (R' l x1 x2) (R'' l x2)))
	<- {x}{x1}{x2}{dspl} split-resp (Dspl' x x1 x2 dspl) (Deq1' x x1 x2) ([l] Deq2' l x x1 x2) (Dspl'' x x1 x2 dspl).
%worlds (splitting-block) (separation _ _).
%total (D) (separation D _).

%% SPLITTING IS TOTAL FOR WELL-TYPED TERMS
spl1-total : of^ E A wor1 -> split wor1 E _ -> type.
%mode spl1-total +Dof -Dspl.
spl2-total : of^ E A wor2 -> split wor2 E _ -> type.
%mode spl2-total +Dof -Dspl.
splr-total : of^ E A wor2 -> splitres E _ -> type.
%mode splr-total +Dof -Dspl.

%% BLOCKS
%block total-var1 : some {A : ty} block 
	{x:term} {x1:term} {x2:term} {dof : of^ x A wor1} {dspl : split wor1 x (pipe (tup x1 ztup) ([_] x2))} {dtot : spl1-total dof dspl}.
%block total-var2 : some {A : ty} block 
	{x:term} {dof : of^ x A wor2} {dspl : split wor2 x (pipe ztup ([_] x))} {dtot : spl2-total dof dspl}.
%block total-block = (total-var1 | total-var2).

%% SPLITTING RESIDUALS
%%- : splr-total of^ztup splr- .

%% MAIN PROOF OF TOTALITY
- : spl1-total of^-ztup spl1-ztup.
- : spl2-total of^-ztup spl2-ztup.
- : spl1-total (of^-tup Dof1 Dof2) (spl1-tup Dspl1 Dspl2)
	<- spl1-total Dof1 Dspl1
	<- spl1-total Dof2 Dspl2.
- : spl2-total (of^-tup Dof1 Dof2) (spl2-tup Dspl1 Dspl2)
	<- spl2-total Dof1 Dspl1
	<- spl2-total Dof2 Dspl2.
- : spl1-total (of^-pi1 Dof) (spl1-pi1 Dspl)
	<- spl1-total Dof Dspl.
- : spl2-total (of^-pi1 Dof) (spl2-pi1 Dspl)
	<- spl2-total Dof Dspl.
- : spl1-total (of^-pi2 Dof) (spl1-pi2 Dspl)
	<- spl1-total Dof Dspl.
- : spl2-total (of^-pi2 Dof) (spl2-pi2 Dspl)
	<- spl2-total Dof Dspl.
- : spl1-total (of^-lam Dwf Dof) (spl1-lam Dspl')
	<- ({x : term} {x1}{x2} {dx : done wor2 x} {ofx : of^ x A wor1} {dspl : split wor1 x (pipe (tup x1 ztup) ([_] x2))}
		spl1-total ofx dspl ->
		spl1-total (Dof x dx ofx) (Dspl x x1 x2 dspl))
	<- separation Dspl Dspl'.
- : spl2-total (of^-lam Dwf Dof) (spl2-lam Dspl')
	<- ({x : term} {dx : done wor2 x} {ofx : of^ x A wor2} {dspl : split wor2 x (pipe ztup ([_] x))}
		spl2-total ofx dspl ->
		spl2-total (Dof x dx ofx) (Dspl x dspl))
	<- sep-1 Dspl Deq
	<- {x} {spl} split-resp (Dspl x spl) (Deq x) ([_] eq-term_) (Dspl' x spl).
- : spl1-total (of^-app Dof1 Dof2) (spl1-app Dspl1 Dspl2)
	<- spl1-total Dof1 Dspl1
	<- spl1-total Dof2 Dspl2.
- : spl2-total (of^-app Dof1 Dof2) (spl2-app Dspl1 Dspl2)
	<- spl2-total Dof1 Dspl1
	<- spl2-total Dof2 Dspl2.
- : spl2-total (of^-let DofE DofM) (spl2-let (spl2-exv DsplrE) DsplM')
	<- splr-total DofE DsplrE
	<- ({x : term} {dof : of^ x A wor2} {dspl : split wor2 x (pipe ztup ([_] x))}
		spl2-total dof dspl ->
		spl2-total (DofM x dof) (DsplM x dspl))
	<- sep-1 DsplM Deq
	<- {x} {spl} split-resp (DsplM x spl) (Deq x) ([_] eq-term_) (DsplM' x spl).
- : spl1-total (of^-next Dof) (spl1-next Dspl)
	<- spl2-total Dof Dspl.
- : spl2-total (of^-prev Dof) (spl2-prev Dspl)
	<- spl1-total Dof Dspl.
%worlds (total-block) (spl1-total _ _) (spl2-total _ _) (splr-total _ _).
%total (Dspl1 Dspl2 Dsplr) (spl1-total Dspl1 _) (spl2-total Dspl2 _) (splr-total Dsplr _).