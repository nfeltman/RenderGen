%{ monostage.elf }%


%% STEP
step : term L -> term L -> type. %name step Dstep.

ss-beta 	: beta E E' -> step E E'.
ss-cont-s	: step E0 (F E')
			<- eq-term E0 (F E)
			<- step E E'
			<- cont F.
			
%% PRESERVATION
ss-pres-ty : of E T -> step E E' -> of E' T -> type.
%mode ss-pres-ty +Dstep +Dof -Dof'.
- : ss-pres-ty (of-pi1 (of-exv (of-tup Dof _))) (ss-beta beta-pi1) (of-exv Dof).
- : ss-pres-ty (of-pi2 (of-exv (of-tup _ Dof))) (ss-beta beta-pi2) (of-exv Dof).
- : ss-pres-ty (of-unrl (of-exv (of-roll _ Dof))) (ss-beta beta-unrl) (of-exv Dof).
- : ss-pres-ty (of-case (of-exv (of-inj1 _ DofV)) DofM _) (ss-beta beta-case1) (DofM V DofV).
- : ss-pres-ty (of-case (of-exv (of-inj2 _ DofV)) _ DofN) (ss-beta beta-case2) (DofN V DofV).
- : ss-pres-ty (of-app (of-exv (of-lam Dwf DofM)) (of-exv DofE)) (ss-beta beta-app) (DofM (lam M) (of-lam Dwf DofM) E DofE).
- : ss-pres-ty (of-let (of-exv DofE) DofM) (ss-beta beta-let) (DofM E DofE).
- : ss-pres-ty (of-lett (of-exv (of-tup DofE1 DofE2)) DofM) (ss-beta beta-lett) (DofM E1 DofE1 E2 DofE2).
- : ss-pres-ty (of-tup (of-exv Dof1) (of-exv Dof2)) (ss-beta beta-tup) (of-exv (of-tup Dof1 Dof2)).
- : ss-pres-ty (of-inj1 T (of-exv Dof)) (ss-beta beta-inj1) (of-exv (of-inj1 T Dof)).
- : ss-pres-ty (of-inj2 T (of-exv Dof)) (ss-beta beta-inj2) (of-exv (of-inj2 T Dof)).
- : ss-pres-ty (of-roll T (of-exv Dof)) (ss-beta beta-roll) (of-exv (of-roll T Dof)).
- : ss-pres-ty (of-tup Dof1 Dof2) (ss-cont-s (cont-tup1 _) Dstep _) (of-tup Dof1' Dof2)
	<- ss-pres-ty Dof1 Dstep Dof1'.
- : ss-pres-ty (of-tup Dof1 Dof2) (ss-cont-s (cont-tup2 _) Dstep _) (of-tup Dof1 Dof2')
	<- ss-pres-ty Dof2 Dstep Dof2'. 
- : ss-pres-ty (of-pi1 Dof) (ss-cont-s cont-pi1 Dstep _) (of-pi1 Dof')
	<- ss-pres-ty Dof Dstep Dof'.
- : ss-pres-ty (of-pi2 Dof) (ss-cont-s cont-pi2 Dstep _) (of-pi2 Dof')
	<- ss-pres-ty Dof Dstep Dof'.
- : ss-pres-ty (of-roll T Dof) (ss-cont-s cont-roll Dstep _) (of-roll T Dof')
	<- ss-pres-ty Dof Dstep Dof'.
- : ss-pres-ty (of-unrl Dof) (ss-cont-s cont-unrl Dstep _) (of-unrl Dof')
	<- ss-pres-ty Dof Dstep Dof'.
- : ss-pres-ty (of-inj1 T Dof) (ss-cont-s cont-inj1 Dstep _) (of-inj1 T Dof')
	<- ss-pres-ty Dof Dstep Dof'.
- : ss-pres-ty (of-inj2 T Dof) (ss-cont-s cont-inj2 Dstep _) (of-inj2 T Dof')
	<- ss-pres-ty Dof Dstep Dof'.
- : ss-pres-ty (of-case DofE DofM DofN) (ss-cont-s cont-case Dstep _) (of-case DofE' DofM DofN) 
	<- ss-pres-ty DofE Dstep DofE'.
- : ss-pres-ty (of-app Dof1 Dof2) (ss-cont-s (cont-app1 _) Dstep _) (of-app Dof1' Dof2)
	<- ss-pres-ty Dof1 Dstep Dof1'.
- : ss-pres-ty (of-app Dof1 Dof2) (ss-cont-s (cont-app2 _) Dstep _) (of-app Dof1 Dof2')
	<- ss-pres-ty Dof2 Dstep Dof2'.
- : ss-pres-ty (of-let DofE DofM) (ss-cont-s cont-let Dstep _) (of-let DofE' DofM) 
	<- ss-pres-ty DofE Dstep DofE'.
- : ss-pres-ty (of-lett DofE DofM) (ss-cont-s cont-lett Dstep _) (of-lett DofE' DofM) 
	<- ss-pres-ty DofE Dstep DofE'.
%worlds () (ss-pres-ty _ _ _).
%total (Dstep) (ss-pres-ty Dstep _ _).

ss-pres-norm : form E comp -> step E E' -> form E' comp -> type.
%mode ss-pres-norm +Dof +Dstep -Dof'.
- : ss-pres-norm (form-pi1 (form-exv (form-tup Dval _))) (ss-beta beta-pi1) (form-exv Dval).
- : ss-pres-norm (form-pi2 (form-exv (form-tup _ Dval))) (ss-beta beta-pi2) (form-exv Dval).
- : ss-pres-norm (form-unrl (form-exv (form-roll Dval))) (ss-beta beta-unrl) (form-exv Dval).
- : ss-pres-norm (form-case (form-exv (form-inj1 DvalV)) DcompM _) (ss-beta beta-case1) (DcompM V DvalV).
- : ss-pres-norm (form-case (form-exv (form-inj2 DvalV)) _ DcompN) (ss-beta beta-case2) (DcompN V DvalV).
- : ss-pres-norm (form-app (form-exv (form-lam DcompM)) (form-exv DvalE)) (ss-beta beta-app) (DcompM (lam M) (form-lam DcompM) E DvalE).
- : ss-pres-norm (form-let (form-exv DvalE) DcompM) (ss-beta beta-let) (DcompM E DvalE).
- : ss-pres-norm (form-lett (form-exv (form-tup DcompE1 DcompE2)) DcompM) (ss-beta beta-lett) (DcompM E1 DcompE1 E2 DcompE2).

- : ss-pres-norm (form-tup (form-exv Dval1) (form-exv Dval2)) (ss-beta beta-tup) (form-exv (form-tup Dval1 Dval2)).
- : ss-pres-norm (form-inj1 (form-exv Dval)) (ss-beta beta-inj1) (form-exv (form-inj1 Dval)).
- : ss-pres-norm (form-inj2 (form-exv Dval)) (ss-beta beta-inj2) (form-exv (form-inj2 Dval)).
- : ss-pres-norm (form-roll (form-exv Dval)) (ss-beta beta-roll) (form-exv (form-roll Dval)).

- : ss-pres-norm (form-tup Dcomp1 Dcomp2) (ss-cont-s (cont-tup1 _) Dstep _) (form-tup Dcomp1' Dcomp2)
	<- ss-pres-norm Dcomp1 Dstep Dcomp1'.
- : ss-pres-norm (form-tup Dcomp1 Dcomp2) (ss-cont-s (cont-tup2 _) Dstep _) (form-tup Dcomp1 Dcomp2')
	<- ss-pres-norm Dcomp2 Dstep Dcomp2'. 
- : ss-pres-norm (form-pi1 Dcomp) (ss-cont-s cont-pi1 Dstep _) (form-pi1 Dcomp')
	<- ss-pres-norm Dcomp Dstep Dcomp'.
- : ss-pres-norm (form-pi2 Dcomp) (ss-cont-s cont-pi2 Dstep _) (form-pi2 Dcomp')
	<- ss-pres-norm Dcomp Dstep Dcomp'.
- : ss-pres-norm (form-roll Dcomp) (ss-cont-s cont-roll Dstep _) (form-roll Dcomp')
	<- ss-pres-norm Dcomp Dstep Dcomp'.
- : ss-pres-norm (form-unrl Dcomp) (ss-cont-s cont-unrl Dstep _) (form-unrl Dcomp')
	<- ss-pres-norm Dcomp Dstep Dcomp'.
- : ss-pres-norm (form-inj1 Dcomp) (ss-cont-s cont-inj1 Dstep _) (form-inj1 Dcomp')
	<- ss-pres-norm Dcomp Dstep Dcomp'.
- : ss-pres-norm (form-inj2 Dcomp) (ss-cont-s cont-inj2 Dstep _) (form-inj2 Dcomp')
	<- ss-pres-norm Dcomp Dstep Dcomp'.
- : ss-pres-norm (form-case DcompE DcompM DcompN) (ss-cont-s cont-case Dstep _) (form-case DcompE' DcompM DcompN) 
	<- ss-pres-norm DcompE Dstep DcompE'.
- : ss-pres-norm (form-app Dcomp1 Dcomp2) (ss-cont-s (cont-app1 _) Dstep _) (form-app Dcomp1' Dcomp2)
	<- ss-pres-norm Dcomp1 Dstep Dcomp1'.
- : ss-pres-norm (form-app Dcomp1 Dcomp2) (ss-cont-s (cont-app2 _) Dstep _) (form-app Dcomp1 Dcomp2')
	<- ss-pres-norm Dcomp2 Dstep Dcomp2'.
- : ss-pres-norm (form-let DcompE DcompM) (ss-cont-s cont-let Dstep _) (form-let DcompE' DcompM) 
	<- ss-pres-norm DcompE Dstep DcompE'.
- : ss-pres-norm (form-lett DcompE DcompM) (ss-cont-s cont-lett Dstep _) (form-lett DcompE' DcompM) 
	<- ss-pres-norm DcompE Dstep DcompE'.
%worlds () (ss-pres-norm _ _ _).
%total (Dstep) (ss-pres-norm Dstep _ _).

%% VALUE-OR-STEP JUDGEMENT
vos : term L -> type.
vos-val : vos (exv E).
vos-step : step E E' -> vos E.

%% PROGRESS LEMMAS
ss-prog/tup : vos E1 -> vos E2 -> step (tup E1 E2) _ -> type.
%mode ss-prog/tup +Dvos1 +Dvos2 -Dvos.
- : ss-prog/tup (vos-step Dstep) _ (ss-cont-s (cont-tup1 E2) Dstep eq-term_).
- : ss-prog/tup vos-val (vos-step Dstep) (ss-cont-s (cont-tup2 E1) Dstep eq-term_).
- : ss-prog/tup vos-val vos-val (ss-beta beta-tup).
%worlds () (ss-prog/tup _ _ _).
%total (Dvos) (ss-prog/tup Dvos _ _).

ss-prog/pi1 : vos E -> of E (prod T1 T2) -> form E comp -> step (pi1 E) _ -> type.
%mode ss-prog/pi1 +Dvos +Dof +Dform -Dvos'.
- : ss-prog/pi1 (vos-step Dstep) _ _ (ss-cont-s cont-pi1 Dstep eq-term_).
- : ss-prog/pi1 vos-val (of-exv _) (form-exv _) (ss-beta beta-pi1).
%worlds () (ss-prog/pi1 _ _ _ _).
%total (Dvos) (ss-prog/pi1 Dvos _ _ _).

ss-prog/pi2 : vos E -> of E (prod T1 T2) -> form E comp -> step (pi2 E) _ -> type.
%mode ss-prog/pi2 +Dvos +Dof +Dform -Dvos'.
- : ss-prog/pi2 (vos-step Dstep) _ _ (ss-cont-s cont-pi2 Dstep eq-term_).
- : ss-prog/pi2 vos-val (of-exv _) (form-exv _) (ss-beta beta-pi2).
%worlds () (ss-prog/pi2 _ _ _ _).
%total (Dvos) (ss-prog/pi2 Dvos _ _ _).

ss-prog/roll : vos E -> step (roll E) _ -> type.
%mode ss-prog/roll +Dvos -Dvos'.
- : ss-prog/roll (vos-step Dstep) (ss-cont-s cont-roll Dstep eq-term_).
- : ss-prog/roll vos-val (ss-beta beta-roll).
%worlds () (ss-prog/roll _ _).
%total (Dvos) (ss-prog/roll Dvos _).

ss-prog/unrl : vos E -> of E (rec F) -> form E comp -> step (unrl E) _ -> type.
%mode ss-prog/unrl +Dvos +Dof +Dform -Dvos'.
- : ss-prog/unrl (vos-step Dstep) _ _ (ss-cont-s cont-unrl Dstep eq-term_).
- : ss-prog/unrl vos-val (of-exv _) (form-exv _) (ss-beta beta-unrl).
%worlds () (ss-prog/unrl _ _ _ _).
%total (Dvos) (ss-prog/unrl Dvos _ _ _).

ss-prog/inj1 : vos E -> step (inj1 E) _ -> type.
%mode ss-prog/inj1 +Dvos -Dvos'.
- : ss-prog/inj1 (vos-step Dstep) (ss-cont-s cont-inj1 Dstep eq-term_).
- : ss-prog/inj1 vos-val (ss-beta beta-inj1).
%worlds () (ss-prog/inj1 _ _).
%total (Dvos) (ss-prog/inj1 Dvos _).

ss-prog/inj2 : vos E -> step (inj2 E) _ -> type.
%mode ss-prog/inj2 +Dvos -Dvos'.
- : ss-prog/inj2 (vos-step Dstep) (ss-cont-s cont-inj2 Dstep eq-term_).
- : ss-prog/inj2 vos-val (ss-beta beta-inj2).
%worlds () (ss-prog/inj2 _ _).
%total (Dvos) (ss-prog/inj2 Dvos _).

ss-prog/app : vos E1 -> vos E2 -> of E1 (arr T1 T2) -> form E1 comp -> step (app E1 E2) _ -> type.
%mode ss-prog/app +Dvos1 +Dvos2 +Dof +Dform -Dvos.
- : ss-prog/app (vos-step Dstep) _ _ _ (ss-cont-s (cont-app1 _) Dstep eq-term_).
- : ss-prog/app vos-val (vos-step Dstep) _ _ (ss-cont-s (cont-app2 _) Dstep eq-term_).
- : ss-prog/app vos-val vos-val (of-exv _) (form-exv _) (ss-beta beta-app).
%worlds () (ss-prog/app _ _ _ _ _).
%total (Dvos) (ss-prog/app Dvos _ _ _ _).

ss-prog/let : vos E -> ({x} of x A -> of (M x) T) -> step (let E M) _ -> type.
%mode ss-prog/let +Dvos +Dof -Dvos'.
- : ss-prog/let (vos-step Dstep) _ (ss-cont-s cont-let Dstep eq-term_).
- : ss-prog/let vos-val _ (ss-beta beta-let).
%worlds () (ss-prog/let _ _ _).
%total (Dvos) (ss-prog/let Dvos _ _).

ss-prog/case : vos E -> of (case E M N) _ -> form E comp -> step (case E M N) _ -> type.
%mode ss-prog/case +Dvos +Dof +Dform -Dvos'.
- : ss-prog/case (vos-step Dstep) _ _ (ss-cont-s cont-case Dstep eq-term_).
- : ss-prog/case (vos-val) (of-case (of-exv (of-inj1 _ _)) _ _) (form-exv _) (ss-beta beta-case1).
- : ss-prog/case (vos-val) (of-case (of-exv (of-inj2 _ _)) _ _) (form-exv _) (ss-beta beta-case2).
%worlds () (ss-prog/case _ _ _ _).
%total (Dvos) (ss-prog/case Dvos _ _ _).

ss-prog/lett : vos E -> of (lett E M) T -> form E comp -> step (lett E M) _ -> type.
%mode ss-prog/lett +Dvos +Dof +Dform -Dvos'.
- : ss-prog/lett (vos-step Dstep) _ _ (ss-cont-s cont-lett Dstep eq-term_).
- : ss-prog/lett vos-val (of-lett (of-exv _) _) (form-exv _) (ss-beta beta-lett).
%worlds () (ss-prog/lett _ _ _ _).
%total (Dvos) (ss-prog/lett Dvos _ _ _).

%% PROGRESS
prog : of E T -> form E comp -> vos E -> type.
%mode prog +Dof +Dform -Dvos.
- : prog _ _ vos-val.
- : prog (of-tup Dof1 Dof2) (form-tup Dcomp1 Dcomp2) (vos-step Dvos)
	<- prog Dof1 Dcomp1 Dvos1
	<- prog Dof2 Dcomp2 Dvos2
	<- ss-prog/tup Dvos1 Dvos2 Dvos.
- : prog (of-pi1 Dof) (form-pi1 Dcomp) (vos-step Dvos')
	<- prog Dof Dcomp Dvos
	<- ss-prog/pi1 Dvos Dof Dcomp Dvos'.
- : prog (of-pi2 Dof) (form-pi2 Dcomp) (vos-step Dvos')
	<- prog Dof Dcomp Dvos
	<- ss-prog/pi2 Dvos Dof Dcomp Dvos'.
- : prog (of-unrl Dof) (form-unrl Dcomp) (vos-step Dvos')
	<- prog Dof Dcomp Dvos
	<- ss-prog/unrl Dvos Dof Dcomp Dvos'.
- : prog (of-inj1 _ Dof) (form-inj1 Dcomp) (vos-step Dvos')
	<- prog Dof Dcomp Dvos
	<- ss-prog/inj1 Dvos Dvos'.
- : prog (of-inj2 _ Dof) (form-inj2 Dcomp) (vos-step Dvos')
	<- prog Dof Dcomp Dvos
	<- ss-prog/inj2 Dvos Dvos'.
- : prog (of-roll _ Dof) (form-roll Dcomp) (vos-step Dvos')
	<- prog Dof Dcomp Dvos
	<- ss-prog/roll Dvos Dvos'.
- : prog (of-case DofE DofM DofN) (form-case DcompE DcompM DcompN) (vos-step Dvos')
	<- prog DofE DcompE Dvos
	<- ss-prog/case Dvos (of-case DofE DofM DofN) DcompE Dvos'.
- : prog (of-app Dof1 Dof2) (form-app Dcomp1 Dcomp2) (vos-step Dvos)
	<- prog Dof1 Dcomp1 Dvos1
	<- prog Dof2 Dcomp2 Dvos2
	<- ss-prog/app Dvos1 Dvos2 Dof1 Dcomp1 Dvos.
- : prog (of-let DofE DofM) (form-let DcompE DcompM) (vos-step Dvos')
	<- prog DofE DcompE Dvos
	<- ss-prog/let Dvos DofM Dvos'.
- : prog (of-lett DofE DofM) (form-lett DcompE DcompM) (vos-step Dvos')
	<- prog DofE DcompE Dvos
	<- ss-prog/lett Dvos (of-lett DofE DofM) DcompE Dvos'.
%worlds () (prog _ _ _).
%total (Dvos) (prog Dvos _ _).

%% BETA STEPS AND COMPATIBILITY STEPS CANNOT BOTH HAPPEN
excl-exv-step : step (exv E) E' -> false -> type.
%mode excl-exv-step +Dstep -Dfalse.
- : excl-exv-step (ss-beta Dbeta) Dfalse
	<- excl-exv-beta Dbeta Dfalse.
- : excl-exv-step (ss-cont-s (Dcont : cont F) _ (Deq : eq-term (exv _) (F E))) Dfalse
	<- excl-exv-cont Dcont Deq Dfalse.
%worlds () (excl-exv-step _ _).
%total (Dstep) (excl-exv-step Dstep _).


%% DETERMINISM
step-unique : step E E1 -> step E E2 -> eq-term E1 E2 -> type.
%mode step-unique +Dstep1 +Dstep2 -Deq.
%% contradiction cases
- : step-unique (ss-cont-s (cont-tup2 V) _ _) (ss-cont-s (cont-tup1 E2) Dstep _) Deq
	<- excl-exv-step Dstep Dfalse
	<- false\eq-term Dfalse _ _ Deq.
- : step-unique (ss-cont-s (cont-tup1 E2) Dstep _) (ss-cont-s (cont-tup2 V) _ _) Deq
	<- excl-exv-step Dstep Dfalse
	<- false\eq-term Dfalse _ _ Deq.
- : step-unique (ss-cont-s (cont-app2 V) _ _) (ss-cont-s (cont-app1 E2) Dstep _) Deq
	<- excl-exv-step Dstep Dfalse
	<- false\eq-term Dfalse _ _ Deq.
- : step-unique (ss-cont-s (cont-app1 E2) Dstep _) (ss-cont-s (cont-app2 V) _ _) Deq
	<- excl-exv-step Dstep Dfalse
	<- false\eq-term Dfalse _ _ Deq.

- : step-unique (ss-cont-s _ Dstep _) (ss-beta _) Deq
	<- excl-exv-step Dstep Dfalse
	<- false\eq-term Dfalse _ _ Deq.

- : step-unique (ss-beta _) (ss-cont-s _ Dstep _) Deq
	<- excl-exv-step Dstep Dfalse
	<- false\eq-term Dfalse _ _ Deq.

%% all reduction cases
- : step-unique (ss-beta Dbeta) (ss-beta Dbeta') eq-term_.

%% all substep cases
- : step-unique (ss-cont-s (Dcont : cont F) Dstep eq-term_) (ss-cont-s (Dcont' : cont F) Dstep' eq-term_) Deq'
	<- step-unique Dstep Dstep' Deq
	<- eq-cong F Deq Deq'.

%worlds () (step-unique _ _ _).
%total (Dstep) (step-unique Dstep _ _).