%% REDUCTION JUDGMENT
mred : term L -> term L -> type. %name mred Dred.
%mode mred +E -V.
mred-ztup : mred ztup ztup.
mred-tup  : mred (tup E1 E2) (tup V1 V2)
			<- mred E2 V2
			<- mred E1 V1.
mred-pi1  : mred (pi1 E) V
			<- mred E (tup V _).
mred-pi2  : mred (pi2 E) V
			<- mred E (tup _ V).
mred-lam  : mred (lam M) (lam M).
mred-app  : mred (app E1 E2) V
			<- mred E2 V2
			<- mred E1 (lam ([x] M x))
			<- mred (M V2) V.
mred-let  : mred (let E M) V2
			<- mred E V1
			<- mred (M V1) V2.
mred-lett  : mred (lett E M) V3
			<- mred E (tup V1 V2)
			<- mred (M V1 V2) V3.
%worlds (term-block) (mred _ _).
%unique mred +E -1V.

%% PRESERVATION AND EVALUATION
pres : mred E V -> of E A -> val V -> of V A -> type.
%mode pres +D1 +D2 -D3 -D4.
- : pres mred-ztup of-ztup val-ztup of-ztup.
- : pres (mred-tup Dred1 Dred2) (of-tup DofE1 DofE2) (val-tup Dval1 Dval2) (of-tup DofV1 DofV2)
		<- pres Dred1 DofE1 Dval1 DofV1
		<- pres Dred2 DofE2 Dval2 DofV2.
- : pres (mred-pi1 Dred) (of-pi1 DofE) Dval DofV
		<- pres Dred DofE (val-tup Dval _) (of-tup DofV _).
- : pres (mred-pi2 Dred) (of-pi2 DofE) Dval DofV
		<- pres Dred DofE (val-tup _ Dval) (of-tup _ DofV).
- : pres mred-lam (of-lam DofM Dwf) val-lam (of-lam DofM Dwf).        
- : pres 
			(mred-app 
				(DredM  : mred (M V2) V3) 
				(DredE1 : mred E1 (lam M)) 
				(DredE2 : mred E2 V2)) 
			(of-app 
				(DofE1 : of E1 (arr A B))
				(DofE2 : of E2 A)) 
			DvalV3 
			DofV3
        <- pres DredE1 DofE1 _ (of-lam _ DofM : of (lam M) (arr A B))							%% \A.M : A->B
        <- pres DredE2 DofE2 _ (DofV2 : of V2 A)											%% V2 : A
        <- pres DredM (DofM V2 DofV2) DvalV3 DofV3.
- : pres 	(mred-let Dred2 Dred1) 
			(of-let DofE (DofM : {x:term L} of x A -> of (E2 x) B)) 
			Dval DofV2
		<- pres Dred1 DofE _ DofV1
		<- pres Dred2 (DofM V1 DofV1) Dval DofV2.
- : pres 	(mred-lett Dred2 Dred1) 
			(of-lett DofE (DofM : {x:term L} of x A -> {y} of y B -> of (M x y) C)) 
			Dval DofV
		<- pres Dred1 DofE _ (of-tup DofV1 DofV2)
		<- pres Dred2 (DofM V1 DofV1 V2 DofV2) Dval DofV.
        
%worlds () (pres _ _ _ _).
%total Dred (pres Dred _ _ _).

%% REDUCTION IS IDEMPOTENT
idem : mred E V -> mred V V -> type.
%mode idem +Dred1 -Dred2.
- : idem mred-ztup mred-ztup.
- : idem (mred-tup Dred1 Dred2) (mred-tup Dself1 Dself2)
	<- idem Dred1 Dself1
	<- idem Dred2 Dself2.
- : idem (mred-pi1 Dred) Dself
	<- idem Dred (mred-tup Dself _).
- : idem (mred-pi2 Dred) Dself
	<- idem Dred (mred-tup _ Dself).
- : idem mred-lam mred-lam.
- : idem (mred-app DredM _ _) Dself
	<- idem DredM Dself.
- : idem (mred-let DredM _) Dself
	<- idem DredM Dself.
- : idem (mred-lett DredM _) Dself
	<- idem DredM Dself.
%worlds (term-block) (idem _ _).
%total Dred (idem Dred _).

%% VALUES REDUCE TO THEMSELF
val-auto : val V -> mred V V -> type.
%mode val-auto +Dred1 -Dred2.
- : val-auto val-ztup mred-ztup.
- : val-auto (val-tup Dred1 Dred2) (mred-tup Dself1 Dself2)
	<- val-auto Dred1 Dself1
	<- val-auto Dred2 Dself2.
- : val-auto val-lam mred-lam.
%worlds (term-block) (val-auto _ _).
%total Dred (val-auto Dred _).

%% REDUCTION RESPECTS IDENTITY
mred-resp : mred E V -> eq-term E E' -> eq-term V V' -> mred E' V' -> type.
%mode mred-resp +Dred +DeqE +Didty -Dred'.
- : mred-resp Dred eq-term_ eq-term_ Dred.
%worlds (term-block) (mred-resp _ _ _ _).
%total {} (mred-resp _ _ _ _).


%% REDUCTION IS UNIQUE
mred-unique : mred E V1 -> mred E V2 -> eq-term V1 V2 -> type.
%mode mred-unique +Dred1 +Dred2 -Deq.
- : mred-unique _ _ eq-term_.
%worlds (term-block) (mred-unique _ _ _).
%total (D) (mred-unique D _ _).