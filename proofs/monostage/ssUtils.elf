
%% MULTISTEPS

step* : term L -> term L -> type.
step*-id : step* E E.
step*-step : step E1 E2 -> step* E2 E3 -> step* E1 E3.

%% MULTISTEP CHAIN
step*/compose : step* E1 E2 -> step* E2 E3 -> step* E1 E3 -> type.
%mode step*/compose +Dchain1 +Dchain2 -Dchain.
- : step*/compose step*-id C C.
- : step*/compose (step*-step S C1) C2 (step*-step S C')
	<- step*/compose C1 C2 C'.
%worlds () (step*/compose _ _ _).
%total D (step*/compose D _ _).

%% MULTISTEP RESPECTS EQUALITY
step*/resp : step* E1 E2 -> eq-term E1 E1' -> eq-term E2 E2' -> step* E1' E2' -> type.
%mode step*/resp +Dchain +Deq1 +Deq2 -Dchain'.
- : step*/resp D eq-term_ eq-term_ D.
%worlds () (step*/resp _ _ _ _).
%total {} (step*/resp _ _ _ _).

%% CHAIN IS A CONGRUENCE FOR SUBSTEP RULES
step*/substep : {F : term L -> term L} ({e} {e'} step e e' -> step (F e) (F e')) -> step* E E' -> step* (F E) (F E') -> type.
%mode step*/substep +F +R +Dchain -Dchain'.
- : step*/substep F R step*-id step*-id.
- : step*/substep F R (step*-step (Dstep : step E E') Dchain) (step*-step (R E E' Dstep) Dchain')
	<- step*/substep F R Dchain Dchain'.
%worlds () (step*/substep _ _ _ _).
%total {D} (step*/substep _ _ D _).

%% CONFLUENCE
conf : term L -> term L -> type.
conf_ : step* E1 E -> step* E2 E -> conf E1 E2.

%% CONFLUENCE IS SYMMETRIC
conf/sym : conf E1 E2 -> conf E2 E1 -> type.
%mode conf/sym +Dconf1 -Dconf2.
- : conf/sym (conf_ P1 P2) (conf_ P2 P1).
%worlds () (conf/sym _ _).
%total {} (conf/sym _ _).

%% CONFLUENCE IS TRANSITIVE HELPER (need helper because termination thing)
%{conf/trans/help : step* E1 E2 -> step* E3 E2 -> step* E3 E4 -> step* E5 E4 -> conf E1 E5 -> type.
%mode conf/trans/help +Dpath1 +Dpath2 +Dpath3 +Dpath4 -Dconf.
- : conf/trans/help P1 step*-id P3 P4 (conf_ P P4)
	<- step*/compose P1 P3 P.
- : conf/trans/help P1 P2 step*-id P4 (conf_ P1 P)
	<- step*/compose P4 P2 P.
- : conf/trans/help P1 (step*-step S2 P2) (step*-step S3 P3) P4 Dconf
	<- step/unique S3 S2 Deq
	<- step*/resp P3 Deq eq-term_ P3'
	<- conf/trans/help P1 P2 P3' P4 Dconf.
%worlds () (conf/trans/help _ _ _ _ _).
%total D (conf/trans/help _ D _ _ _).


%% CONFLUENCE IS TRANSITIVE
conf/trans : conf E1 E2 -> conf E2 E3 -> conf E1 E3 -> type.
%mode conf/trans +Dconf1 +Dconf2 -Dconf.
- : conf/trans (conf_ P1 P2) (conf_ P3 P4) Dconf
	<- conf/trans/help P1 P2 P3 P4 Dconf.
%worlds () (conf/trans _ _ _).
%total {} (conf/trans _ _ _).
}%

%% CONFLUENCE IS A CONGRUENCE FOR SUBSTEP RULES
conf/substep : {F : term L -> term L} ({e} {e'} step e e' -> step (F e) (F e')) -> conf E E' -> conf (F E) (F E') -> type.
%mode conf/substep +F +R +Dcong -Dcong'.
- : conf/substep F R (conf_ P1 P2) (conf_ P1' P2')
	<- step*/substep F R P1 P1'
	<- step*/substep F R P2 P2'.
%worlds () (conf/substep _ _ _ _).
%total {D} (conf/substep _ _ D _).

%% EQUAL THINGS ARE CONFLUENT
conf\eq : eq-term A B -> conf A B -> type.
%mode conf\eq +Deq -Dconf.
- : conf\eq eq-term_ (conf_ step*-id step*-id).
%worlds () (conf\eq _ _).
%total {D} (conf\eq D _).

%% BIGSTEP
step** : term L -> term L -> type.
step**_ : step* E (exv V) -> step** E V.

%% STEP EQUALITY
dup-step** : {A : step** E V} {A : step** E V} type.
%mode dup-step** +A -A'.
- : dup-step** A A.
%worlds () (dup-step** _ _).
%total (D) (dup-step** D _).


%% STEP RESPECTS EQUALITY
step**-resp : step** E V -> eq-term E E' -> eq-term V V' -> step** E' V' -> type.
%mode step**-resp +Dstep +DeqE +DeqV -Dstep'.
- : step**-resp Dstep eq-term_ eq-term_ Dstep.
%worlds () (step**-resp _ _ _ _).
%total {} (step**-resp _ _ _ _).


%% FALSE GIVES BIGSTEP
false\step** : false -> {E} {V} step** E V -> type.
%mode false\step** +Dfalse +E +V -Dstep.
%worlds () (false\step** _ _ _ _).
%total (D) (false\step** D _ _ _).


%% BIGSTEP IS UNIQUE
step**-unique_ : step* E (exv V) -> step* E (exv V') -> eq-term V V' -> type.
%mode step**-unique_ +Dpath +Dpath' -Deq.
- : step**-unique_ step*-id step*-id eq-term_.
- : step**-unique_ (step*-step Dstep Dpath) (step*-step Dstep' Dpath') DeqV
	<- step-unique Dstep' Dstep Deq
	<- step*/resp Dpath' Deq eq-term_ Dpath''
	<- step**-unique_ Dpath Dpath'' DeqV.
%worlds () (step**-unique_ _ _ _).
%total (D) (step**-unique_ D _ _).

step**-unique : step** E V -> step** E V' -> eq-term V V' -> type.
%mode step**-unique +Dred +Dred' -Deq.
- : step**-unique (step**_ Dpath) (step**_ Dpath') Deq
	<- step**-unique_ Dpath Dpath' Deq.
%worlds () (step**-unique _ _ _).
%total {} (step**-unique _ _ _).

%{

%% BIGSTEP RESULTS EVAL TO THEMSELF ITSELF
step**-term : step** E V -> step** V V -> type.
%mode step**-term +Dred -Dred'.
- : step**-term (step**_ Dpath) (step**_ step*-id).
%worlds () (step**-term _ _).
%total {} (step**-term _ _).

%% LETT EVAL INVERSION
step**-invert-lett_ :  step* (lett E M) V -> val V -> step* E (tup V1 V2) -> val (tup V1 V2) -> step* (M V1 V2) V -> type.
%mode step**-invert-lett_ +Dstep +Dval -DstepE -DvalE -DstepM.
- : step**-invert-lett_ (step*-step (ss-lett-s Dstep) Dpath) Dval (step*-step Dstep Dpath') Dval' DpathM
	<- step**-invert-lett_ Dpath Dval Dpath' Dval' DpathM.
- : step**-invert-lett_ (step*-step (ss-lett-r Dval) Dpath) _ step*-id Dval Dpath.
%worlds () (step**-invert-lett_ _ _ _ _ _).
%total (D) (step**-invert-lett_ D _ _ _ _).

step**-invert-lett :  step** (lett E M) V -> step** E (tup V1 V2) -> step** (M V1 V2) V -> type.
%mode step**-invert-lett +Dstep -DstepE -DstepM.
- : step**-invert-lett (step**_ Dpath Dval) (step**_ Dpath' Dval') (step**_ DpathM Dval)
	<- step**-invert-lett_ Dpath Dval Dpath' Dval' DpathM.
%worlds () (step**-invert-lett _ _ _).
%total (D) (step**-invert-lett D _ _).

%% TUP EVAL INVERSION
step**-invert-tup_ :  step* (tup E1 E2) (tup V1 V2) -> val (tup V1 V2) -> step** E1 V1 -> step** E2 V2 -> type.
%mode step**-invert-tup_ +Dstep +Dval -Dred1 -Dred2.
- : step**-invert-tup_ (step*-step (ss-tup-s1 Dstep) Dpath) Dval (step**_ (step*-step Dstep Dpath1) Dval1) Dred2
	<- step**-invert-tup_ Dpath Dval (step**_ Dpath1 Dval1) Dred2.
- : step**-invert-tup_ (step*-step (ss-tup-s2 Dstep Dval1) Dpath) Dval Dred1 (step**_ (step*-step Dstep Dpath2) Dval2)
	<- step**-invert-tup_ Dpath Dval Dred1 (step**_ Dpath2 Dval2).
- : step**-invert-tup_ step*-id (val-tup Dval1 Dval2) (step**_ step*-id Dval1) (step**_ step*-id Dval2).
%worlds () (step**-invert-tup_ _ _ _ _).
%total (D) (step**-invert-tup_ D _ _ _).

step**-invert-tup :  step** (tup E1 E2) (tup V1 V2) -> step** E1 V1 -> step** E2 V2 -> type.
%mode step**-invert-tup +Dstep -DstepE -DstepM.
- : step**-invert-tup (step**_ Dpath Dval) Dred1 Dred2
	<- step**-invert-tup_ Dpath Dval Dred1 Dred2.
%worlds () (step**-invert-tup _ _ _).
%total (D) (step**-invert-tup D _ _).

%% LETT EVAL INVERSION
step**-invert-pi1_ :  step* (pi1 E) V1 -> val V1 -> step* E (tup V1 V2) -> val (tup V1 V2) -> type.
%mode step**-invert-pi1_ +Dstep +Dval -DstepE -DvalE.
- : step**-invert-pi1_ (step*-step (ss-pi1-s Dstep) Dpath) Dval (step*-step Dstep Dpath') Dval'
	<- step**-invert-pi1_ Dpath Dval Dpath' Dval'.
- : step**-invert-pi1_ (step*-step (ss-pi1-r Dval) step*-id) _ step*-id Dval.
- : step**-invert-pi1_ (step*-step (ss-pi1-r (val-tup Dval1 _)) (step*-step Dstep _)) _ Dpath Dval
	<- excl-val-step Dstep Dval1 Dfalse
	<- false\step** Dfalse _ (tup _ ztup) (step**_ Dpath Dval).
%worlds () (step**-invert-pi1_ _ _ _ _).
%total (D) (step**-invert-pi1_ D _ _ _).

step**-invert-pi1 :  step** (pi1 E) V1 -> step** E (tup V1 V2) -> type.
%mode step**-invert-pi1 +Dstep -DstepE.
- : step**-invert-pi1 (step**_ Dpath Dval) (step**_ Dpath' Dval')
	<- step**-invert-pi1_ Dpath Dval Dpath' Dval'.
%worlds () (step**-invert-pi1 _ _).
%total (D) (step**-invert-pi1 D _).

}%