

%% RESIDUAL EQUIVALENCE
reqv : term L -> term L -> type. %name reqv Deqv.
;; : reqv E1 E2 -> reqv E2 E3 -> reqv E1 E3. %infix left 4 ;;.
reqv-id : reqv E E.
reqv-eq : eq-term E E' -> reqv E E'.
reqv-sym : reqv A B -> reqv B A.

reqv-pi1-r : reqv (pi1 (exv (tup Q1 Q2))) (exv Q1).
reqv-pi2-r : reqv (pi2 (exv (tup Q1 Q2))) (exv Q2).
reqv-lett-r : reqv (lett (exv (tup Q1 Q2)) M) (M Q1 Q2).
reqv-let-r : reqv (let (exv Q) M) (M Q).
reqv-case-r1 : reqv (case (exv (inj1 Q)) M N) (M Q).
reqv-case-r2 : reqv (case (exv (inj2 Q)) M N) (N Q).
reqv-app-r : reqv (app (exv (lam M)) (exv V)) (M (lam M) V).
reqv-unrl-r : reqv (unrl (exv (roll Q))) (exv Q).

reqv-tup-d : reqv (tup (exv Q1) (exv Q2)) (exv (tup Q1 Q2)).

reqv-app-s : reqv E1 E1' -> reqv E2 E2' -> reqv (app E1 E2) (app E1' E2').
reqv-let-s : reqv E E' -> ({x : term L} reqv (M x : term L) (M' x)) -> reqv (let E M) (let E' M').
reqv-tup-s :  reqv E1 E1' -> reqv E2 E2' -> reqv (tup E1 E2) (tup E1' E2').
reqv-pi1-s : reqv E E' -> reqv (pi1 E) (pi1 E').
reqv-pi2-s : reqv E E' -> reqv (pi2 E) (pi2 E').
reqv-inj1-s : reqv E E' -> reqv (inj1 E) (inj1 E').
reqv-inj2-s : reqv E E' -> reqv (inj2 E) (inj2 E').
reqv-roll-s : reqv E E' -> reqv (roll E) (roll E').
reqv-unrl-s : reqv E E' -> reqv (unrl E) (unrl E').
reqv-case-s : reqv E E' -> ({x} reqv (M x) (M' x)) -> ({x} reqv (N x) (N' x)) -> reqv (case E M N) (case E' M' N').
%%reqv-exv-s : reqv E E' -> reqv (exv E) (exv E').
reqv-exvlam-s : ({f}{x} reqv (M f x) (M' f x)) -> reqv (exv (lam M)) (exv (lam M')).
reqv-lett-s2 : ({l1}{l2} reqv (M l1 l2) (M' l1 l2)) -> reqv (lett E M) (lett E M').

reqv-lift-base : reqv Q (let Q ([x] (exv x))).
reqv-lift-pi1 : reqv (pi1 (let Q M)) (let Q ([x] (pi1 (M x)))).
reqv-lift-pi2 : reqv (pi2 (let Q M)) (let Q ([x] (pi2 (M x)))).
reqv-lift-tup1 : ({y} eq-term E (E' y)) -> reqv (tup (let Q M) E) (let Q ([y] (tup (M y) (E' y)))).
reqv-lift-tup2 : ({y} eq-term (exv E) (exv (E' y))) -> reqv (tup (exv E) (let Q M)) (let Q ([y] (tup (exv (E' y)) (M y)))).
reqv-lift-app1 : ({y} eq-term E (E' y)) -> reqv (app (let Q M) E) (let Q ([y] (app (M y) (E' y)))).
reqv-lift-app2 : ({y} eq-term (exv E) (exv (E' y))) ->  reqv (app (exv E) (let Q M)) (let Q ([y] (app (exv (E' y)) (M y)))).
reqv-lift-chain : ({y} eq-term E (E' y)) -> reqv (let (let Q M) ([_] E)) (let Q ([y] let (M y) ([_] E' y))).
reqv-lift-let : ({x}{y} eq-term (E x) (E' y x)) -> reqv (let (let Q M) E) (let Q ([y] let (M y) (E' y))).
reqv-lift-case : ({x}{y} eq-term (B1 x) (B1' y x)) -> ({x}{y} eq-term (B2 x) (B2' y x)) -> 
			reqv (case (let Q M) B1 B2) (let Q ([y] case (M y) (B1' y) (B2' y))).

reqv-lift-lett4 : reqv (lett (exv E) ([x][y] let Q ([z] M z x y))) (let Q ([z] lett (exv E) (M z))).

reqv-lift-in-lett = ([deqv] (reqv-lett-s2 deqv) ;; reqv-lift-lett4)
: ({x1:term L}{x2 : term L} reqv (A x1 x2) (let Q ([l] M l x1 x2))) -> reqv (lett (exv E) A) (let Q ([l] lett (exv E) (M l))).
reqv-lett-p = ([deqv] reqv-lett-r ;; deqv ;; reqv-sym (reqv-lett-r)) 
	: reqv (M Q1 Q2) (M' Q1' Q2') -> reqv (lett (exv (tup Q1 Q2)) M) (lett (exv (tup Q1' Q2')) M').

%% RESIDUAL EQUIVALENCE RESPECTS TERM EQUALITY
reqv-resp : reqv E V -> eq-term E E' -> eq-term V V' -> reqv E' V' -> type.
%mode reqv-resp +Dred +DeqE +Didty -Dred'.
- : reqv-resp Dred eq-term_ eq-term_ Dred.
%worlds (term-block) (reqv-resp _ _ _ _).
%total {} (reqv-resp _ _ _ _).

