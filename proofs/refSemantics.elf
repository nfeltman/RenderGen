%% CONTEXTUALIZED PARTIAL VALUE
cpval : type. %name cpval C.
empty : term -> cpval.
layer : term -> (term -> cpval) -> cpval.

%% CPV TYPING
cpv-of : cpval -> ty -> type. %name cpv-of Dof.
%mode cpv-of +C -T.
of-empty : cpv-of (empty E) T
			<- of E T wor1.
of-layer : cpv-of (layer Q E) T2
			<- of Q T1 wor2
			<- {x:term} {_:of x T1 wor2} cpv-of (E x) T2. 

%% REDUCTION AND SPECULATION JUDGMENTS
red : term -> cpval -> type. %name red Dred.
spc : term -> term -> type. %name spc Dspc.
%mode red +E -V.
%mode spc +E -V.

%% REDUCTION OUTPUT FACTORER pi1
rof-pi1 : cpval -> cpval -> type.
%mode rof-pi1 +C1 -C2.
rof-pi1-e : rof-pi1 (empty (tup V _)) (empty V).
rof-pi1-l : rof-pi1 (layer Q C) (layer Q C')
			<- {x:term} rof-pi1 (C x) (C' x). 
			
%% REDUCTION OUTPUT FACTORER pi2
rof-pi2 : cpval -> cpval -> type.
%mode rof-pi2 +C1 -C2.
rof-pi2-e : rof-pi2 (empty (tup _ V)) (empty V).
rof-pi2-l : rof-pi2 (layer Q C) (layer Q C')
			<- {x:term} rof-pi2 (C x) (C' x).
			
%% REDUCTION OUTPUT FACTORER tup
rof-tup : cpval -> cpval -> cpval -> type.
%mode rof-tup +C1 +C2 -C3.
rof-tup-ee : rof-tup (empty V1) (empty V2) (empty (tup V1 V2)).
rof-tup-el : rof-tup (empty V1) (layer Q C) (layer Q C')
			<- {x:term} rof-tup (empty V1) (C x) (C' x).
rof-tup-l  : rof-tup (layer Q C1) C2 (layer Q C')
			<- {x:term} rof-tup (C1 x) C2 (C' x).
			
%% REDUCTION OUTPUT FACTORER app
rof-app : cpval -> cpval -> cpval -> type.
%mode rof-app +C1 +C2 -C3.
rof-app-ee : rof-app (empty (lam _ ([x] M x))) (empty V2) C
			<- red (M V2) C.
rof-app-el : rof-app (empty V1) (layer Q C) (layer Q C')
			<- {x:term} rof-app (empty V1) (C x) (C' x).
rof-app-l  : rof-app (layer Q C1) C2 (layer Q C')
			<- {x:term} rof-app (C1 x) C2 (C' x).

%% REDUCTION OUTPUT FACTORER prev
rof-prev : cpval -> term -> type.
%mode rof-prev +C1 -C2.
rof-prev-e : rof-prev (empty (next Y)) Y.
rof-prev-l : rof-prev (layer Q1 C) (let Q1 Q2)
			<- {x:term} rof-prev (C x) (Q2 x).


%% REDUCTION
red-ztup : red ztup (empty ztup).
red-pi1  : red (pi1 E) C'
			<- red E C
			<- rof-pi1 C C'.
red-pi2  : red (pi2 E) C'
			<- red E C
			<- rof-pi2 C C'.
red-tup  : red (tup E1 E2) C'
			<- red E2 C2
			<- red E1 C1
			<- rof-tup C1 C2 C'.
red-lam  : red (lam A M) (empty (lam A M)).
red-app  : red (app E1 E2) C
        <- red E2 V2
        <- red E1 V1
        <- rof-app V1 V2 C.
red-next : red (next E) (layer Q ([x:term] empty(next x)))
			<- spc E Q.

%% SPECULATION
spc-ztup : spc ztup ztup.
spc-tup  : spc (tup E1 E2) (tup Q1 Q2)
			<- spc E2 Q2
			<- spc E1 Q1.
spc-pi1  : spc (pi1 E) (pi1 Q)
			<- spc E Q.
spc-pi2  : spc (pi2 E) (pi2 Q)
			<- spc E Q.
spc-lam  : spc (lam A M) (lam A N)
			<- ({x : term} spc x x -> spc (M x) (N x)).
spc-app  : spc (app E1 E2) (app Q1 Q2)
	        <- spc E2 Q2
	        <- spc E1 Q1.
spc-prev  : spc (prev E) Q
	        <- red E V
	        <- rof-prev V Q.

%% RESIDUAL JUDGMENT
res : term -> type. %name res Dres.
res-ztup	: res ztup.
res-tup		: res (tup E1 E2)
				<- res E2
				<- res E1.
res-pi1		: res (pi1 E)
				<- res E.
res-pi2		: res (pi2 E)
				<- res E.
res-lam		: res (lam _ M)
				<- {x : term} res x -> res (M x).
res-app		: res (app E1 E2)
				<- res E2
				<- res E1.
res-let		: res (let E M)
				<- res E
				<- {x:term} res x -> res (M x).
				 
%% VALUE JUDGMENT
pval : term -> type. %name pval Dpval.
context-entry : term -> type. %name context-entry Dce.
pval-ztup	: pval ztup.
pval-tup	: pval (tup E1 E2)
				<- pval E2
				<- pval E1.
pval-lam	: pval (lam _ _).
pval-next	: pval (next E)
				<- context-entry E
				<- res E.

%% CPV WELL-FORMED
cpv-wf : cpval -> type.
cpv-wf-e : cpv-wf (empty E) 
			<- pval E. 
cpv-wf-l : cpv-wf (layer Q E)
			<- res Q
			<- {x:term}{_ : res x}{_: context-entry x} cpv-wf (E x).

%% PRESERVATION AND EVALUATION
presRed : red E C -> of E A wor1 -> cpv-wf C -> cpv-of C A -> type.
presSpc : spc E Q -> of E A wor2 -> res  Q -> of Q A wor2 -> type.
%mode presRed +R +T1 -V -T2.
%mode presSpc +R +T1 -V -T2.

%% STANDARD BLOCKS
%block rof-block : some {T : ty} block {x:term} {_ : of x T wor2} {_ : res x} {_ : context-entry x}.
%block spc-block : some {A : ty} block {x:term} {Dres : res x} {Dof : of x A wor2} {Dspc : spc x x} {_ : presSpc Dspc Dof Dres Dof}.

%% OUTPUT FACTORING PRESERVATION tup
rof-tup-pres : rof-tup C1 C2 C -> cpv-of C1 T1 -> cpv-wf C1 -> cpv-of C2 T2 -> cpv-wf C2 -> cpv-of C (prod T1 T2) -> cpv-wf C -> type.
%mode rof-tup-pres +Drof +Dof1 +Dwf1 +Dof2 +Dwf2 -Dof -Dwf.
- : rof-tup-pres rof-tup-ee 
		(of-empty Dof1) (cpv-wf-e Dval1) 
		(of-empty Dof2) (cpv-wf-e Dval2) 
		(of-empty (of-tup Dof1 Dof2)) (cpv-wf-e (pval-tup Dval1 Dval2)).
- : rof-tup-pres (rof-tup-el Drof)
		Dof1 Dval1
		(of-layer DofC DofQ) (cpv-wf-l DwfC Dres) 
		(of-layer DofC' DofQ) (cpv-wf-l DwfC' Dres)
	<- {x:term}{dof : of x T wor2}{dres : res x}{dce : context-entry x} 
		rof-tup-pres (Drof x) Dof1 Dval1 (DofC x dof) (DwfC x dres dce) (DofC' x dof) (DwfC' x dres dce).
- : rof-tup-pres (rof-tup-l Drof) 
		(of-layer DofC DofQ) (cpv-wf-l DwfC Dres) 
		Dof2 Dval2
		(of-layer DofC' DofQ) (cpv-wf-l DwfC' Dres)
	<- {x:term}{dof : of x T wor2}{dres : res x}{dce : context-entry x} 
		rof-tup-pres (Drof x) (DofC x dof) (DwfC x dres dce) Dof2 Dval2 (DofC' x dof) (DwfC' x dres dce).
%worlds (rof-block | spc-block) (rof-tup-pres _ _ _ _ _ _ _).
%total (Drof) (rof-tup-pres Drof _ _ _ _ _ _).

%% OUTPUT FACTORING PRESERVATION pi1
rof-pi1-pres : rof-pi1 C1 C2 -> cpv-of C1 (prod T _) -> cpv-wf C1 -> cpv-of C2 T -> cpv-wf C2 -> type.
%mode rof-pi1-pres +Drof +Dof1 +Dwf1 -Dof2 -Dwf2.
- : rof-pi1-pres rof-pi1-e (of-empty (of-tup Dof _)) (cpv-wf-e (pval-tup Dval _)) (of-empty Dof) (cpv-wf-e Dval).  
- : rof-pi1-pres (rof-pi1-l Drof) (of-layer DofC DofQ) (cpv-wf-l DwfC Dres) (of-layer DofC' DofQ) (cpv-wf-l DwfC' Dres)
	<- {x:term}{dof : of x T wor2}{dres : res x}{dce : context-entry x} 
		rof-pi1-pres (Drof x) (DofC x dof) (DwfC x dres dce) (DofC' x dof) (DwfC' x dres dce).
%worlds (rof-block | spc-block) (rof-pi1-pres _ _ _ _ _).
%total (Drof) (rof-pi1-pres Drof _ _ _ _).

%% OUTPUT FACTORING PRESERVATION pi2
rof-pi2-pres : rof-pi2 C1 C2 -> cpv-of C1 (prod _ T) -> cpv-wf C1 -> cpv-of C2 T -> cpv-wf C2 -> type.
%mode rof-pi2-pres +Drof +Dof1 +Dwf1 -Dof2 -Dwf2.
- : rof-pi2-pres rof-pi2-e (of-empty (of-tup _ Dof)) (cpv-wf-e (pval-tup _ Dval)) (of-empty Dof) (cpv-wf-e Dval).  
- : rof-pi2-pres (rof-pi2-l Drof) (of-layer DofC DofQ) (cpv-wf-l DwfC Dres) (of-layer DofC' DofQ) (cpv-wf-l DwfC' Dres)
	<- {x:term}{dof : of x T wor2}{dres : res x}{dce : context-entry x} 
		rof-pi2-pres (Drof x) (DofC x dof) (DwfC x dres dce) (DofC' x dof) (DwfC' x dres dce).
%worlds (rof-block | spc-block) (rof-pi2-pres _ _ _ _ _).
%total (Drof) (rof-pi2-pres Drof _ _ _ _).

%% OUTPUT FACTORING PRESERVATION prev
rof-prev-pres : rof-prev C Q -> cpv-of C (fut T) -> cpv-wf C -> of Q T wor2 -> res Q -> type.
%mode rof-prev-pres +Drof +Dof1 +Dwf -Dof2 -Dres.
- : rof-prev-pres rof-prev-e (of-empty (of-next Dof)) (cpv-wf-e (pval-next Dres _)) Dof Dres.  
- : rof-prev-pres (rof-prev-l Drof) (of-layer DofC DofQ) (cpv-wf-l DwfC DresQ) (of-let DofM DofQ) (res-let DresM DresQ)
	<- {x:term}{dof : of x T wor2}{dres : res x}{dce : context-entry x} 
		rof-prev-pres (Drof x) (DofC x dof) (DwfC x dres dce) (DofM x dof) (DresM x dres).
%worlds (rof-block | spc-block) (rof-prev-pres _ _ _ _ _).
%total (Drof) (rof-prev-pres Drof _ _ _ _).

%% OUTPUT FACTORING PRESERVATION app
rof-app-pres : rof-app C1 C2 C -> cpv-of C1 (arr T1 T2) -> cpv-wf C1 -> cpv-of C2 T1 -> cpv-wf C2 -> cpv-of C T2 -> cpv-wf C -> type.
%mode rof-app-pres +Drof +Dof1 +Dwf1 +Dof2 +Dwf2 -Dof -Dwf.
- : rof-app-pres (rof-app-ee DredM) 
		(of-empty DofLam') _
		(of-empty DofV2') _ 
		DofC Dwf
    <- lam-annot1 DofLam' DofV2' (of-lam _ ([x] [d] DofM x d : of (M x) B wor1)) DofV2		%% \A.M : A->B; V2 : A
    <- presRed DredM (DofM V2 DofV2) Dwf DofC.
- : rof-app-pres (rof-app-el Drof)
		Dof1 Dval1
		(of-layer DofC DofQ) (cpv-wf-l DwfC Dres) 
		(of-layer DofC' DofQ) (cpv-wf-l DwfC' Dres)
	<- {x:term}{dof : of x T wor2}{dres : res x}{dce : context-entry x} 
		rof-app-pres (Drof x) Dof1 Dval1 (DofC x dof) (DwfC x dres dce) (DofC' x dof) (DwfC' x dres dce).
- : rof-app-pres (rof-app-l Drof) 
		(of-layer DofC DofQ) (cpv-wf-l DwfC Dres) 
		Dof2 Dval2
		(of-layer DofC' DofQ) (cpv-wf-l DwfC' Dres)
	<- {x:term}{dof : of x T wor2}{dres : res x}{dce : context-entry x} 
		rof-app-pres (Drof x) (DofC x dof) (DwfC x dres dce) Dof2 Dval2 (DofC' x dof) (DwfC' x dres dce).

%% PRESERVATION FOR REDUCTION
- : presRed red-ztup of-ztup (cpv-wf-e pval-ztup) (of-empty of-ztup).
- : presRed (red-tup Drof Dred1 Dred2) (of-tup DofE1 DofE2) Dwf DofC
	<- presRed Dred1 DofE1 Dwf1 DofC1
	<- presRed Dred2 DofE2 Dwf2 DofC2
	<- rof-tup-pres Drof DofC1 Dwf1 DofC2 Dwf2 DofC Dwf.
- : presRed (red-pi1 Drof Dred) (of-pi1 DofE) Dwf' DofC'
	<- presRed Dred DofE Dwf DofC 
	<- rof-pi1-pres Drof DofC Dwf DofC' Dwf'.
- : presRed (red-pi2 Drof Dred) (of-pi2 DofE) Dwf' DofC'
	<- presRed Dred DofE Dwf DofC 
	<- rof-pi2-pres Drof DofC Dwf DofC' Dwf'.
- : presRed red-lam Dof (cpv-wf-e pval-lam) (of-empty Dof).
- : presRed (red-app Drof DredE1 DredE2) (of-app DofE1 DofE2) Dwf DofV3
    <- presRed DredE1 DofE1 Dwf1 Dof1
    <- presRed DredE2 DofE2 Dwf2 Dof2
    <- rof-app-pres Drof Dof1 Dwf1 Dof2 Dwf2 DofV3 Dwf.
- : presRed (red-next Dred) (of-next DofE) 
		(cpv-wf-l ([x] [dres] [dx] cpv-wf-e (pval-next dres dx)) Dres) 
		(of-layer ([x] [dx] of-empty (of-next dx)) DofQ)    
	<- presSpc Dred DofE Dres DofQ.

%% PRESERVATION FOR SPECULATION
- : presSpc spc-ztup of-ztup res-ztup of-ztup.
- : presSpc (spc-tup Dspc1 Dspc2) (of-tup DofE1 DofE2) (res-tup Dres1 Dres2) (of-tup DofV1 DofV2)
	<- presSpc Dspc1 DofE1 Dres1 DofV1
	<- presSpc Dspc2 DofE2 Dres2 DofV2.
- : presSpc (spc-pi1 Dspc) (of-pi1 DofE) (res-pi1 Dres) (of-pi1 DofV)
	<- presSpc Dspc DofE Dres DofV.
- : presSpc (spc-pi2 Dspc) (of-pi2 DofE) (res-pi2 Dres) (of-pi2 DofV)
	<- presSpc Dspc DofE Dres DofV.
- : presSpc 
		(spc-lam (DspcM : {x : term} spc x x -> spc (M x) (N x))) 
		(of-lam Dwf (DofM : {x: term} of x A wor2 -> of (M x) B wor2)) 
		(res-lam DresN)
		(of-lam Dwf DofN)
	<- {x : term} {DresX : res x} {Dofx : of x A wor2} {Dspc : spc x x}
		{_ : presSpc Dspc Dofx DresX Dofx}
			presSpc (DspcM x Dspc) (DofM x Dofx) (DresN x DresX) (DofN x Dofx).
- : presSpc (spc-app Dspc1 Dspc2) (of-app DofE1 DofE2) (res-app DresV1 DresV2) (of-app DofV1 DofV2)
    <- presSpc Dspc1 DofE1 DresV1 DofV1
    <- presSpc Dspc2 DofE2 DresV2 DofV2.
- : presSpc (spc-prev Drof Dred) (of-prev DofE) Dres DofQ
    <- presRed Dred DofE Dwf DofC
    <- rof-prev-pres Drof DofC Dwf DofQ Dres.
    
%worlds (spc-block | rof-block) (presRed _ _ _ _) (presSpc _ _ _ _) (rof-app-pres _ _ _ _ _ _ _).
%total (Dred Dspc Drof) (presRed Dred _ _ _) (presSpc Dspc _ _ _) (rof-app-pres Drof _ _ _ _ _ _).
