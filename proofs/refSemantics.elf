%% CONTEXTUALIZED PARTIAL VALUE
cpval : type. %name cpval C.
empty : term -> cpval.
layer : term -> (term -> cpval) -> cpval.

%% CPV TYPING
cpv-of : cpval -> ty -> type. %name cpv-of Dof.
%mode cpv-of +C -T.
of-empty : cpv-of (empty E) T
			<- of E T wor1.
of-layer : cpv-of (layer Q E) T2
			<- of Q T1 wor2
			<- {x:term} {_:of x T1 wor2} cpv-of (E x) T2. 

%% REIFICATION
reify : cpval -> term -> type.
%mode reify +C -E.

%% REDUCTION AND SPECULATION JUDGMENTS
red : term -> cpval -> type. %name red Dred.
spc : term -> term -> type. %name spc Dspc.
%mode red +E -V.
%mode spc +E -V.

%% REDUCTION simple cases: ztup / lam / next
red-ztup : red ztup (empty ztup).
red-lam  : red (lam A M) (empty (lam A M)).
red-next : red (next E) (layer Q ([x:term] empty(next x)))
			<- spc E Q.

%% REDUCTION OUTPUT FACTORER pi1
rof-pi1 : cpval -> cpval -> type.
%mode rof-pi1 +C1 -C2.
rof-pi1-e : rof-pi1 (empty (tup V _)) (empty V).
rof-pi1-l : rof-pi1 (layer Q C) (layer Q C')
			<- {x:term} rof-pi1 (C x) (C' x).
red-pi1  : red (pi1 E) C'
			<- red E C
			<- rof-pi1 C C'.
%% REDUCTION OUTPUT FACTORER pi2
rof-pi2 : cpval -> cpval -> type.
%mode rof-pi2 +C1 -C2.
rof-pi2-e : rof-pi2 (empty (tup _ V)) (empty V).
rof-pi2-l : rof-pi2 (layer Q C) (layer Q C')
			<- {x:term} rof-pi2 (C x) (C' x).
red-pi2  : red (pi2 E) C'
			<- red E C
			<- rof-pi2 C C'.
%% REDUCTION OUTPUT FACTORER tup
rof-tup : cpval -> cpval -> cpval -> type.
%mode rof-tup +C1 +C2 -C3.
rof-tup-ee : rof-tup (empty V1) (empty V2) (empty (tup V1 V2)).
rof-tup-ef : rof-tup (empty V1) (layer Q C) (layer Q C')
			<- {x:term} rof-tup (empty V1) (C x) (C' x).
rof-tup-f  : rof-tup (layer Q C1) C2 (layer Q C')
			<- {x:term} rof-tup (C1 x) C2 (C' x).
red-tup  : red (tup E1 E2) C'
			<- red E2 C2
			<- red E1 C1
			<- rof-tup C1 C2 C'.
%% REDUCTION OUTPUT FACTORER app
rof-app : cpval -> cpval -> cpval -> type.
%mode rof-app +C1 +C2 -C3.
rof-app-ee : rof-tup (empty (lam _ ([x] M x))) (empty V2) C
			<- red (M V2) C.
rof-app-ef : rof-tup (empty V1) (layer Q C) (layer Q C')
			<- {x:term} rof-app (empty V1) (C x) (C' x).
rof-app-f  : rof-tup (layer Q C1) C2 (layer Q C')
			<- {x:term} rof-app (C1 x) C2 (C' x).
red-app  : red (app E1 E2) C
        <- red E2 V2
        <- red E1 V1
        <- rof-app V1 V2 C.

%% SPECULATION
spc-ztup : spc ztup ztup.
spc-tup  : spc (tup E1 E2) (tup Q1 Q2)
			<- spc E2 Q2
			<- spc E1 Q1.
spc-pi1  : spc (pi1 E) (pi1 Q)
			<- spc E Q.
spc-pi2  : spc (pi2 E) (pi2 Q)
			<- spc E Q.
spc-lam  : spc (lam A M) (lam A N)
			<- ({x : term} {x' : term} spc x x' -> spc (M x) (N x')).
spc-app  : spc (app E1 E2) (app Q1 Q2)
	        <- spc E2 Q2
	        <- spc E1 Q1.
spc-prev  : spc (prev E) Q
	        <- red E V
	        <- reify V Q.

%% RESIDUAL JUDGMENT
res : term -> type. %name res Dres.
res-ztup	: res ztup.
res-tup		: res (tup E1 E2)
				<- res E2
				<- res E1.
res-pi1		: res (pi1 E)
				<- res E.
res-pi2		: res (pi2 E)
				<- res E.
res-lam		: res (lam _ M)
				<- {x : term} res x -> res (M x).
res-app		: res (app E1 E2)
				<- res E2
				<- res E1. 
				 
%% VALUE JUDGMENT
pval : term -> type. %name pval Dpval.
context-entry : term -> type. %name pval Dce.
pval-ztup	: pval ztup.
pval-tup	: pval (tup E1 E2)
				<- pval E2
				<- pval E1.
pval-lam	: pval (lam _ _).
pval-next	: pval (next E)
				<- context-entry E.

%% CPV WELL-FORMED
cpv-wf : cpval -> type.
cpv-wf-empty : cpv-wf (empty E) 
			<- pval E. 
cpv-wf-layer : cpv-wf (layer Q E)
			<- res Q
			<- {x:term}{_: context-entry x} cpv-wf (E x).
%% PRESERVATION AND EVALUATION
presRed : red E C -> of E A wor1 -> cpv-wf C -> cpv-of C A -> type.
presSpc : spc E Q -> of E A wor2 -> res  Q -> of Q A wor2 -> type.
%mode presRed +R +T1 -V -T2.
%mode presSpc +R +T1 -V -T2.

%{
- : presRed red-ztup of-ztup pval-ztup of-ztup.
- : presRed (red-tup Dred1 Dred2) (of-tup DofE1 DofE2) (pval-tup Dval1 Dval2) (of-tup DofV1 DofV2)
	<- presRed Dred1 DofE1 Dval1 DofV1
	<- presRed Dred2 DofE2 Dval2 DofV2.
- : presRed (red-pi1 Dred) (of-pi1 DofE) Dval DofV
		<- presRed Dred DofE (pval-tup Dval _) (of-tup DofV _).
- : presRed (red-pi2 Dred) (of-pi2 DofE) Dval DofV
		<- presRed Dred DofE (pval-tup _ Dval) (of-tup _ DofV).
- : presRed red-lam Dof pval-lam Dof.
- : presRed 
			(red-app 
				(DredM : red (M V2) V3) 
				(DredE1 : red E1 (lam A M)) 
				(DredE2 : red E2 V2)) 
			(of-app 
				(DofE1 : of E1 (arr A' B) wor1)
				(DofE2 : of E2 A' wor1)) 
			DvalV3 
			DofV3
        <- presRed DredE1 DofE1 _ (DofLam' : of (lam A M) (arr A' B) wor1)						%% \A.M : A'->B
        <- presRed DredE2 DofE2 _ (DofV2' : of V2 A' wor1)										%% V2 : A'
        <- lam-annot DofLam' DofV2' (of-lam _ ([x] [d] DofM x d : of (M x) B wor1)) DofV2		%% \A.M : A->B; V2 : A
        <- presRed DredM (DofM V2 DofV2) DvalV3 DofV3.
- : presRed (red-next Dred) (of-next DofE) (pval-next Dres) (of-next DofV)    
	<- presSpc Dred DofE Dres DofV.
}%
- : presSpc spc-ztup of-ztup res-ztup of-ztup.
- : presSpc (spc-tup Dspc1 Dspc2) (of-tup DofE1 DofE2) (res-tup Dres1 Dres2) (of-tup DofV1 DofV2)
	<- presSpc Dspc1 DofE1 Dres1 DofV1
	<- presSpc Dspc2 DofE2 Dres2 DofV2.
- : presSpc (spc-pi1 Dspc) (of-pi1 DofE) (res-pi1 Dres) (of-pi1 DofV)
	<- presSpc Dspc DofE Dres DofV.
- : presSpc (spc-pi2 Dspc) (of-pi2 DofE) (res-pi2 Dres) (of-pi2 DofV)
	<- presSpc Dspc DofE Dres DofV.
%%- : presSpc (spc-lam M) (of-lam DofM _) Dres DofV
%%	<- {x : term} {Dofx : of x A wor2} {x' : term} {Dspc : spc x x'} 
%%	presSpc (M x x' Dspc) (DofM Dofx) Dres DofV.
- : presSpc (spc-app Dspc1 Dspc2) (of-app DofE1 DofE2) (res-app DresV1 DresV2) (of-app DofV1 DofV2)
    <- presSpc Dspc1 DofE1 DresV1 DofV1
    <- presSpc Dspc2 DofE2 DresV2 DofV2.
%%- : presSpc (spc-prev Dred) (of-prev DofE) Dres DofV
%%    <- presRed Dred DofE (pval-next Dres) (of-next DofV).
